
USB_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bf0c  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  0800c10c  0800c10c  0001c10c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c724  0800c724  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800c724  0800c724  0001c724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c72c  0800c72c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c72c  0800c72c  0001c72c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c730  0800c730  0001c730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800c734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002830  20000090  0800c7c4  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200028c0  0800c7c4  000228c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024877  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004684  00000000  00000000  00044935  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001140  00000000  00000000  00048fc0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f88  00000000  00000000  0004a100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002c345  00000000  00000000  0004b088  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000149bb  00000000  00000000  000773cd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f6b11  00000000  00000000  0008bd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00182899  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004858  00000000  00000000  00182914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000090 	.word	0x20000090
 800021c:	00000000 	.word	0x00000000
 8000220:	0800c0f4 	.word	0x0800c0f4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000094 	.word	0x20000094
 800023c:	0800c0f4 	.word	0x0800c0f4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b972 	b.w	80005ec <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	4688      	mov	r8, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14b      	bne.n	80003c6 <__udivmoddi4+0xa6>
 800032e:	428a      	cmp	r2, r1
 8000330:	4615      	mov	r5, r2
 8000332:	d967      	bls.n	8000404 <__udivmoddi4+0xe4>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0720 	rsb	r7, r2, #32
 800033e:	fa01 f302 	lsl.w	r3, r1, r2
 8000342:	fa20 f707 	lsr.w	r7, r0, r7
 8000346:	4095      	lsls	r5, r2
 8000348:	ea47 0803 	orr.w	r8, r7, r3
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbb8 f7fe 	udiv	r7, r8, lr
 8000358:	fa1f fc85 	uxth.w	ip, r5
 800035c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000360:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000364:	fb07 f10c 	mul.w	r1, r7, ip
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18eb      	adds	r3, r5, r3
 800036e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000372:	f080 811b 	bcs.w	80005ac <__udivmoddi4+0x28c>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8118 	bls.w	80005ac <__udivmoddi4+0x28c>
 800037c:	3f02      	subs	r7, #2
 800037e:	442b      	add	r3, r5
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0fe 	udiv	r0, r3, lr
 8000388:	fb0e 3310 	mls	r3, lr, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fc0c 	mul.w	ip, r0, ip
 8000394:	45a4      	cmp	ip, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	192c      	adds	r4, r5, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8107 	bcs.w	80005b0 <__udivmoddi4+0x290>
 80003a2:	45a4      	cmp	ip, r4
 80003a4:	f240 8104 	bls.w	80005b0 <__udivmoddi4+0x290>
 80003a8:	3802      	subs	r0, #2
 80003aa:	442c      	add	r4, r5
 80003ac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003b0:	eba4 040c 	sub.w	r4, r4, ip
 80003b4:	2700      	movs	r7, #0
 80003b6:	b11e      	cbz	r6, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c6 4300 	strd	r4, r3, [r6]
 80003c0:	4639      	mov	r1, r7
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d909      	bls.n	80003de <__udivmoddi4+0xbe>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80eb 	beq.w	80005a6 <__udivmoddi4+0x286>
 80003d0:	2700      	movs	r7, #0
 80003d2:	e9c6 0100 	strd	r0, r1, [r6]
 80003d6:	4638      	mov	r0, r7
 80003d8:	4639      	mov	r1, r7
 80003da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003de:	fab3 f783 	clz	r7, r3
 80003e2:	2f00      	cmp	r7, #0
 80003e4:	d147      	bne.n	8000476 <__udivmoddi4+0x156>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d302      	bcc.n	80003f0 <__udivmoddi4+0xd0>
 80003ea:	4282      	cmp	r2, r0
 80003ec:	f200 80fa 	bhi.w	80005e4 <__udivmoddi4+0x2c4>
 80003f0:	1a84      	subs	r4, r0, r2
 80003f2:	eb61 0303 	sbc.w	r3, r1, r3
 80003f6:	2001      	movs	r0, #1
 80003f8:	4698      	mov	r8, r3
 80003fa:	2e00      	cmp	r6, #0
 80003fc:	d0e0      	beq.n	80003c0 <__udivmoddi4+0xa0>
 80003fe:	e9c6 4800 	strd	r4, r8, [r6]
 8000402:	e7dd      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000404:	b902      	cbnz	r2, 8000408 <__udivmoddi4+0xe8>
 8000406:	deff      	udf	#255	; 0xff
 8000408:	fab2 f282 	clz	r2, r2
 800040c:	2a00      	cmp	r2, #0
 800040e:	f040 808f 	bne.w	8000530 <__udivmoddi4+0x210>
 8000412:	1b49      	subs	r1, r1, r5
 8000414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000418:	fa1f f885 	uxth.w	r8, r5
 800041c:	2701      	movs	r7, #1
 800041e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000422:	0c23      	lsrs	r3, r4, #16
 8000424:	fb0e 111c 	mls	r1, lr, ip, r1
 8000428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042c:	fb08 f10c 	mul.w	r1, r8, ip
 8000430:	4299      	cmp	r1, r3
 8000432:	d907      	bls.n	8000444 <__udivmoddi4+0x124>
 8000434:	18eb      	adds	r3, r5, r3
 8000436:	f10c 30ff 	add.w	r0, ip, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4299      	cmp	r1, r3
 800043e:	f200 80cd 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 8000442:	4684      	mov	ip, r0
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	b2a3      	uxth	r3, r4
 8000448:	fbb1 f0fe 	udiv	r0, r1, lr
 800044c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000450:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000454:	fb08 f800 	mul.w	r8, r8, r0
 8000458:	45a0      	cmp	r8, r4
 800045a:	d907      	bls.n	800046c <__udivmoddi4+0x14c>
 800045c:	192c      	adds	r4, r5, r4
 800045e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000462:	d202      	bcs.n	800046a <__udivmoddi4+0x14a>
 8000464:	45a0      	cmp	r8, r4
 8000466:	f200 80b6 	bhi.w	80005d6 <__udivmoddi4+0x2b6>
 800046a:	4618      	mov	r0, r3
 800046c:	eba4 0408 	sub.w	r4, r4, r8
 8000470:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000474:	e79f      	b.n	80003b6 <__udivmoddi4+0x96>
 8000476:	f1c7 0c20 	rsb	ip, r7, #32
 800047a:	40bb      	lsls	r3, r7
 800047c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000480:	ea4e 0e03 	orr.w	lr, lr, r3
 8000484:	fa01 f407 	lsl.w	r4, r1, r7
 8000488:	fa20 f50c 	lsr.w	r5, r0, ip
 800048c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000490:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000494:	4325      	orrs	r5, r4
 8000496:	fbb3 f9f8 	udiv	r9, r3, r8
 800049a:	0c2c      	lsrs	r4, r5, #16
 800049c:	fb08 3319 	mls	r3, r8, r9, r3
 80004a0:	fa1f fa8e 	uxth.w	sl, lr
 80004a4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80004a8:	fb09 f40a 	mul.w	r4, r9, sl
 80004ac:	429c      	cmp	r4, r3
 80004ae:	fa02 f207 	lsl.w	r2, r2, r7
 80004b2:	fa00 f107 	lsl.w	r1, r0, r7
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1e 0303 	adds.w	r3, lr, r3
 80004bc:	f109 30ff 	add.w	r0, r9, #4294967295
 80004c0:	f080 8087 	bcs.w	80005d2 <__udivmoddi4+0x2b2>
 80004c4:	429c      	cmp	r4, r3
 80004c6:	f240 8084 	bls.w	80005d2 <__udivmoddi4+0x2b2>
 80004ca:	f1a9 0902 	sub.w	r9, r9, #2
 80004ce:	4473      	add	r3, lr
 80004d0:	1b1b      	subs	r3, r3, r4
 80004d2:	b2ad      	uxth	r5, r5
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3310 	mls	r3, r8, r0, r3
 80004dc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004e0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004e4:	45a2      	cmp	sl, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80004f0:	d26b      	bcs.n	80005ca <__udivmoddi4+0x2aa>
 80004f2:	45a2      	cmp	sl, r4
 80004f4:	d969      	bls.n	80005ca <__udivmoddi4+0x2aa>
 80004f6:	3802      	subs	r0, #2
 80004f8:	4474      	add	r4, lr
 80004fa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004fe:	fba0 8902 	umull	r8, r9, r0, r2
 8000502:	eba4 040a 	sub.w	r4, r4, sl
 8000506:	454c      	cmp	r4, r9
 8000508:	46c2      	mov	sl, r8
 800050a:	464b      	mov	r3, r9
 800050c:	d354      	bcc.n	80005b8 <__udivmoddi4+0x298>
 800050e:	d051      	beq.n	80005b4 <__udivmoddi4+0x294>
 8000510:	2e00      	cmp	r6, #0
 8000512:	d069      	beq.n	80005e8 <__udivmoddi4+0x2c8>
 8000514:	ebb1 050a 	subs.w	r5, r1, sl
 8000518:	eb64 0403 	sbc.w	r4, r4, r3
 800051c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000520:	40fd      	lsrs	r5, r7
 8000522:	40fc      	lsrs	r4, r7
 8000524:	ea4c 0505 	orr.w	r5, ip, r5
 8000528:	e9c6 5400 	strd	r5, r4, [r6]
 800052c:	2700      	movs	r7, #0
 800052e:	e747      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000530:	f1c2 0320 	rsb	r3, r2, #32
 8000534:	fa20 f703 	lsr.w	r7, r0, r3
 8000538:	4095      	lsls	r5, r2
 800053a:	fa01 f002 	lsl.w	r0, r1, r2
 800053e:	fa21 f303 	lsr.w	r3, r1, r3
 8000542:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000546:	4338      	orrs	r0, r7
 8000548:	0c01      	lsrs	r1, r0, #16
 800054a:	fbb3 f7fe 	udiv	r7, r3, lr
 800054e:	fa1f f885 	uxth.w	r8, r5
 8000552:	fb0e 3317 	mls	r3, lr, r7, r3
 8000556:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800055a:	fb07 f308 	mul.w	r3, r7, r8
 800055e:	428b      	cmp	r3, r1
 8000560:	fa04 f402 	lsl.w	r4, r4, r2
 8000564:	d907      	bls.n	8000576 <__udivmoddi4+0x256>
 8000566:	1869      	adds	r1, r5, r1
 8000568:	f107 3cff 	add.w	ip, r7, #4294967295
 800056c:	d22f      	bcs.n	80005ce <__udivmoddi4+0x2ae>
 800056e:	428b      	cmp	r3, r1
 8000570:	d92d      	bls.n	80005ce <__udivmoddi4+0x2ae>
 8000572:	3f02      	subs	r7, #2
 8000574:	4429      	add	r1, r5
 8000576:	1acb      	subs	r3, r1, r3
 8000578:	b281      	uxth	r1, r0
 800057a:	fbb3 f0fe 	udiv	r0, r3, lr
 800057e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb00 f308 	mul.w	r3, r0, r8
 800058a:	428b      	cmp	r3, r1
 800058c:	d907      	bls.n	800059e <__udivmoddi4+0x27e>
 800058e:	1869      	adds	r1, r5, r1
 8000590:	f100 3cff 	add.w	ip, r0, #4294967295
 8000594:	d217      	bcs.n	80005c6 <__udivmoddi4+0x2a6>
 8000596:	428b      	cmp	r3, r1
 8000598:	d915      	bls.n	80005c6 <__udivmoddi4+0x2a6>
 800059a:	3802      	subs	r0, #2
 800059c:	4429      	add	r1, r5
 800059e:	1ac9      	subs	r1, r1, r3
 80005a0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80005a4:	e73b      	b.n	800041e <__udivmoddi4+0xfe>
 80005a6:	4637      	mov	r7, r6
 80005a8:	4630      	mov	r0, r6
 80005aa:	e709      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005ac:	4607      	mov	r7, r0
 80005ae:	e6e7      	b.n	8000380 <__udivmoddi4+0x60>
 80005b0:	4618      	mov	r0, r3
 80005b2:	e6fb      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b4:	4541      	cmp	r1, r8
 80005b6:	d2ab      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005b8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005bc:	eb69 020e 	sbc.w	r2, r9, lr
 80005c0:	3801      	subs	r0, #1
 80005c2:	4613      	mov	r3, r2
 80005c4:	e7a4      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c6:	4660      	mov	r0, ip
 80005c8:	e7e9      	b.n	800059e <__udivmoddi4+0x27e>
 80005ca:	4618      	mov	r0, r3
 80005cc:	e795      	b.n	80004fa <__udivmoddi4+0x1da>
 80005ce:	4667      	mov	r7, ip
 80005d0:	e7d1      	b.n	8000576 <__udivmoddi4+0x256>
 80005d2:	4681      	mov	r9, r0
 80005d4:	e77c      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d6:	3802      	subs	r0, #2
 80005d8:	442c      	add	r4, r5
 80005da:	e747      	b.n	800046c <__udivmoddi4+0x14c>
 80005dc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005e0:	442b      	add	r3, r5
 80005e2:	e72f      	b.n	8000444 <__udivmoddi4+0x124>
 80005e4:	4638      	mov	r0, r7
 80005e6:	e708      	b.n	80003fa <__udivmoddi4+0xda>
 80005e8:	4637      	mov	r7, r6
 80005ea:	e6e9      	b.n	80003c0 <__udivmoddi4+0xa0>

080005ec <__aeabi_idiv0>:
 80005ec:	4770      	bx	lr
 80005ee:	bf00      	nop

080005f0 <Send_Uart>:
DWORD fre_clust;
uint32_t total, free_space;


void Send_Uart (char *string)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(UART, (uint8_t *)string, strlen (string), HAL_MAX_DELAY);
 80005f8:	6878      	ldr	r0, [r7, #4]
 80005fa:	f7ff fe21 	bl	8000240 <strlen>
 80005fe:	4603      	mov	r3, r0
 8000600:	b29a      	uxth	r2, r3
 8000602:	f04f 33ff 	mov.w	r3, #4294967295
 8000606:	6879      	ldr	r1, [r7, #4]
 8000608:	4803      	ldr	r0, [pc, #12]	; (8000618 <Send_Uart+0x28>)
 800060a:	f003 fe31 	bl	8004270 <HAL_UART_Transmit>
}
 800060e:	bf00      	nop
 8000610:	3708      	adds	r7, #8
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
 8000616:	bf00      	nop
 8000618:	2000012c 	.word	0x2000012c

0800061c <Mount_USB>:



void Mount_USB (void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
	fresult = f_mount(&USBHFatFS, USBHPath, 1);
 8000620:	2201      	movs	r2, #1
 8000622:	490a      	ldr	r1, [pc, #40]	; (800064c <Mount_USB+0x30>)
 8000624:	480a      	ldr	r0, [pc, #40]	; (8000650 <Mount_USB+0x34>)
 8000626:	f00a f851 	bl	800a6cc <f_mount>
 800062a:	4603      	mov	r3, r0
 800062c:	461a      	mov	r2, r3
 800062e:	4b09      	ldr	r3, [pc, #36]	; (8000654 <Mount_USB+0x38>)
 8000630:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)Send_Uart ("ERROR!!! in mounting USB ...\n\n");
 8000632:	4b08      	ldr	r3, [pc, #32]	; (8000654 <Mount_USB+0x38>)
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	2b00      	cmp	r3, #0
 8000638:	d003      	beq.n	8000642 <Mount_USB+0x26>
 800063a:	4807      	ldr	r0, [pc, #28]	; (8000658 <Mount_USB+0x3c>)
 800063c:	f7ff ffd8 	bl	80005f0 <Send_Uart>
	else Send_Uart("USB mounted successfully...\n");
}
 8000640:	e002      	b.n	8000648 <Mount_USB+0x2c>
	else Send_Uart("USB mounted successfully...\n");
 8000642:	4806      	ldr	r0, [pc, #24]	; (800065c <Mount_USB+0x40>)
 8000644:	f7ff ffd4 	bl	80005f0 <Send_Uart>
}
 8000648:	bf00      	nop
 800064a:	bd80      	pop	{r7, pc}
 800064c:	200001b4 	.word	0x200001b4
 8000650:	200011e8 	.word	0x200011e8
 8000654:	2000010c 	.word	0x2000010c
 8000658:	0800c10c 	.word	0x0800c10c
 800065c:	0800c12c 	.word	0x0800c12c

08000660 <Unmount_USB>:

void Unmount_USB (void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	fresult = f_mount(NULL, USBHPath, 1);
 8000664:	2201      	movs	r2, #1
 8000666:	490a      	ldr	r1, [pc, #40]	; (8000690 <Unmount_USB+0x30>)
 8000668:	2000      	movs	r0, #0
 800066a:	f00a f82f 	bl	800a6cc <f_mount>
 800066e:	4603      	mov	r3, r0
 8000670:	461a      	mov	r2, r3
 8000672:	4b08      	ldr	r3, [pc, #32]	; (8000694 <Unmount_USB+0x34>)
 8000674:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK) Send_Uart ("USB UNMOUNTED successfully...\n\n\n");
 8000676:	4b07      	ldr	r3, [pc, #28]	; (8000694 <Unmount_USB+0x34>)
 8000678:	781b      	ldrb	r3, [r3, #0]
 800067a:	2b00      	cmp	r3, #0
 800067c:	d103      	bne.n	8000686 <Unmount_USB+0x26>
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <Unmount_USB+0x38>)
 8000680:	f7ff ffb6 	bl	80005f0 <Send_Uart>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
}
 8000684:	e002      	b.n	800068c <Unmount_USB+0x2c>
	else Send_Uart("ERROR!!! in UNMOUNTING USB \n\n\n");
 8000686:	4805      	ldr	r0, [pc, #20]	; (800069c <Unmount_USB+0x3c>)
 8000688:	f7ff ffb2 	bl	80005f0 <Send_Uart>
}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200001b4 	.word	0x200001b4
 8000694:	2000010c 	.word	0x2000010c
 8000698:	0800c14c 	.word	0x0800c14c
 800069c:	0800c170 	.word	0x0800c170

080006a0 <Write_File>:




FRESULT Write_File (char *name, char *data)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
 80006a8:	6039      	str	r1, [r7, #0]

	/**** check whether the file exists or not ****/
	fresult = f_stat (name, &USBHfno);
 80006aa:	4955      	ldr	r1, [pc, #340]	; (8000800 <Write_File+0x160>)
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f00a fc5b 	bl	800af68 <f_stat>
 80006b2:	4603      	mov	r3, r0
 80006b4:	461a      	mov	r2, r3
 80006b6:	4b53      	ldr	r3, [pc, #332]	; (8000804 <Write_File+0x164>)
 80006b8:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 80006ba:	4b52      	ldr	r3, [pc, #328]	; (8000804 <Write_File+0x164>)
 80006bc:	781b      	ldrb	r3, [r3, #0]
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d012      	beq.n	80006e8 <Write_File+0x48>
	{
		char *buf = malloc(100*sizeof(char));
 80006c2:	2064      	movs	r0, #100	; 0x64
 80006c4:	f00b f8f6 	bl	800b8b4 <malloc>
 80006c8:	4603      	mov	r3, r0
 80006ca:	60bb      	str	r3, [r7, #8]
		sprintf (buf, "ERROR!!! *%s* does not exists\n\n", name);
 80006cc:	687a      	ldr	r2, [r7, #4]
 80006ce:	494e      	ldr	r1, [pc, #312]	; (8000808 <Write_File+0x168>)
 80006d0:	68b8      	ldr	r0, [r7, #8]
 80006d2:	f00b f9cb 	bl	800ba6c <siprintf>
		Send_Uart (buf);
 80006d6:	68b8      	ldr	r0, [r7, #8]
 80006d8:	f7ff ff8a 	bl	80005f0 <Send_Uart>
	    free(buf);
 80006dc:	68b8      	ldr	r0, [r7, #8]
 80006de:	f00b f8f1 	bl	800b8c4 <free>
	    return fresult;
 80006e2:	4b48      	ldr	r3, [pc, #288]	; (8000804 <Write_File+0x164>)
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	e087      	b.n	80007f8 <Write_File+0x158>
	}

	else
	{
	    /* Create a file with read write access and open it */
	    fresult = f_open(&USBHFile, name, FA_OPEN_EXISTING | FA_WRITE);
 80006e8:	2202      	movs	r2, #2
 80006ea:	6879      	ldr	r1, [r7, #4]
 80006ec:	4847      	ldr	r0, [pc, #284]	; (800080c <Write_File+0x16c>)
 80006ee:	f00a f833 	bl	800a758 <f_open>
 80006f2:	4603      	mov	r3, r0
 80006f4:	461a      	mov	r2, r3
 80006f6:	4b43      	ldr	r3, [pc, #268]	; (8000804 <Write_File+0x164>)
 80006f8:	701a      	strb	r2, [r3, #0]
	    if (fresult != FR_OK)
 80006fa:	4b42      	ldr	r3, [pc, #264]	; (8000804 <Write_File+0x164>)
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d015      	beq.n	800072e <Write_File+0x8e>
	    {
	    	char *buf = malloc(100*sizeof(char));
 8000702:	2064      	movs	r0, #100	; 0x64
 8000704:	f00b f8d6 	bl	800b8b4 <malloc>
 8000708:	4603      	mov	r3, r0
 800070a:	60fb      	str	r3, [r7, #12]
	    	sprintf (buf, "ERROR!!! No. %d in opening file *%s*\n\n", fresult, name);
 800070c:	4b3d      	ldr	r3, [pc, #244]	; (8000804 <Write_File+0x164>)
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	461a      	mov	r2, r3
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	493e      	ldr	r1, [pc, #248]	; (8000810 <Write_File+0x170>)
 8000716:	68f8      	ldr	r0, [r7, #12]
 8000718:	f00b f9a8 	bl	800ba6c <siprintf>
	    	Send_Uart(buf);
 800071c:	68f8      	ldr	r0, [r7, #12]
 800071e:	f7ff ff67 	bl	80005f0 <Send_Uart>
	        free(buf);
 8000722:	68f8      	ldr	r0, [r7, #12]
 8000724:	f00b f8ce 	bl	800b8c4 <free>
	        return fresult;
 8000728:	4b36      	ldr	r3, [pc, #216]	; (8000804 <Write_File+0x164>)
 800072a:	781b      	ldrb	r3, [r3, #0]
 800072c:	e064      	b.n	80007f8 <Write_File+0x158>
	    }

	    else
	    {
	    	char *buf = malloc(100*sizeof(char));
 800072e:	2064      	movs	r0, #100	; 0x64
 8000730:	f00b f8c0 	bl	800b8b4 <malloc>
 8000734:	4603      	mov	r3, r0
 8000736:	61fb      	str	r3, [r7, #28]
	    	sprintf (buf, "Opening file-->  *%s*  To WRITE data in it\n", name);
 8000738:	687a      	ldr	r2, [r7, #4]
 800073a:	4936      	ldr	r1, [pc, #216]	; (8000814 <Write_File+0x174>)
 800073c:	69f8      	ldr	r0, [r7, #28]
 800073e:	f00b f995 	bl	800ba6c <siprintf>
	    	Send_Uart(buf);
 8000742:	69f8      	ldr	r0, [r7, #28]
 8000744:	f7ff ff54 	bl	80005f0 <Send_Uart>
	        free(buf);
 8000748:	69f8      	ldr	r0, [r7, #28]
 800074a:	f00b f8bb 	bl	800b8c4 <free>

	    	fresult = f_write(&USBHFile, data, strlen(data), &bw);
 800074e:	6838      	ldr	r0, [r7, #0]
 8000750:	f7ff fd76 	bl	8000240 <strlen>
 8000754:	4602      	mov	r2, r0
 8000756:	4b30      	ldr	r3, [pc, #192]	; (8000818 <Write_File+0x178>)
 8000758:	6839      	ldr	r1, [r7, #0]
 800075a:	482c      	ldr	r0, [pc, #176]	; (800080c <Write_File+0x16c>)
 800075c:	f00a f9c8 	bl	800aaf0 <f_write>
 8000760:	4603      	mov	r3, r0
 8000762:	461a      	mov	r2, r3
 8000764:	4b27      	ldr	r3, [pc, #156]	; (8000804 <Write_File+0x164>)
 8000766:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 8000768:	4b26      	ldr	r3, [pc, #152]	; (8000804 <Write_File+0x164>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	2b00      	cmp	r3, #0
 800076e:	d012      	beq.n	8000796 <Write_File+0xf6>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 8000770:	2064      	movs	r0, #100	; 0x64
 8000772:	f00b f89f 	bl	800b8b4 <malloc>
 8000776:	4603      	mov	r3, r0
 8000778:	61bb      	str	r3, [r7, #24]
	    		sprintf (buf, "ERROR!!! No. %d while writing to the FILE *%s*\n\n", fresult, name);
 800077a:	4b22      	ldr	r3, [pc, #136]	; (8000804 <Write_File+0x164>)
 800077c:	781b      	ldrb	r3, [r3, #0]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	4926      	ldr	r1, [pc, #152]	; (800081c <Write_File+0x17c>)
 8000784:	69b8      	ldr	r0, [r7, #24]
 8000786:	f00b f971 	bl	800ba6c <siprintf>
	    		Send_Uart(buf);
 800078a:	69b8      	ldr	r0, [r7, #24]
 800078c:	f7ff ff30 	bl	80005f0 <Send_Uart>
	    		free(buf);
 8000790:	69b8      	ldr	r0, [r7, #24]
 8000792:	f00b f897 	bl	800b8c4 <free>
	    	}

	    	/* Close file */
	    	fresult = f_close(&USBHFile);
 8000796:	481d      	ldr	r0, [pc, #116]	; (800080c <Write_File+0x16c>)
 8000798:	f00a fbbc 	bl	800af14 <f_close>
 800079c:	4603      	mov	r3, r0
 800079e:	461a      	mov	r2, r3
 80007a0:	4b18      	ldr	r3, [pc, #96]	; (8000804 <Write_File+0x164>)
 80007a2:	701a      	strb	r2, [r3, #0]
	    	if (fresult != FR_OK)
 80007a4:	4b17      	ldr	r3, [pc, #92]	; (8000804 <Write_File+0x164>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d013      	beq.n	80007d4 <Write_File+0x134>
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80007ac:	2064      	movs	r0, #100	; 0x64
 80007ae:	f00b f881 	bl	800b8b4 <malloc>
 80007b2:	4603      	mov	r3, r0
 80007b4:	613b      	str	r3, [r7, #16]
	    		sprintf (buf, "ERROR!!! No. %d in closing file *%s* after writing it\n\n", fresult, name);
 80007b6:	4b13      	ldr	r3, [pc, #76]	; (8000804 <Write_File+0x164>)
 80007b8:	781b      	ldrb	r3, [r3, #0]
 80007ba:	461a      	mov	r2, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4918      	ldr	r1, [pc, #96]	; (8000820 <Write_File+0x180>)
 80007c0:	6938      	ldr	r0, [r7, #16]
 80007c2:	f00b f953 	bl	800ba6c <siprintf>
	    		Send_Uart(buf);
 80007c6:	6938      	ldr	r0, [r7, #16]
 80007c8:	f7ff ff12 	bl	80005f0 <Send_Uart>
	    		free(buf);
 80007cc:	6938      	ldr	r0, [r7, #16]
 80007ce:	f00b f879 	bl	800b8c4 <free>
 80007d2:	e00f      	b.n	80007f4 <Write_File+0x154>
	    	}
	    	else
	    	{
	    		char *buf = malloc(100*sizeof(char));
 80007d4:	2064      	movs	r0, #100	; 0x64
 80007d6:	f00b f86d 	bl	800b8b4 <malloc>
 80007da:	4603      	mov	r3, r0
 80007dc:	617b      	str	r3, [r7, #20]
	    		sprintf (buf, "File *%s* is WRITTEN and CLOSED successfully\n\n", name);
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	4910      	ldr	r1, [pc, #64]	; (8000824 <Write_File+0x184>)
 80007e2:	6978      	ldr	r0, [r7, #20]
 80007e4:	f00b f942 	bl	800ba6c <siprintf>
	    		Send_Uart(buf);
 80007e8:	6978      	ldr	r0, [r7, #20]
 80007ea:	f7ff ff01 	bl	80005f0 <Send_Uart>
	    		free(buf);
 80007ee:	6978      	ldr	r0, [r7, #20]
 80007f0:	f00b f868 	bl	800b8c4 <free>
	    	}
	    }
	    return fresult;
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <Write_File+0x164>)
 80007f6:	781b      	ldrb	r3, [r3, #0]
	}
}
 80007f8:	4618      	mov	r0, r3
 80007fa:	3720      	adds	r7, #32
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	20000110 	.word	0x20000110
 8000804:	2000010c 	.word	0x2000010c
 8000808:	0800c1dc 	.word	0x0800c1dc
 800080c:	200001b8 	.word	0x200001b8
 8000810:	0800c1fc 	.word	0x0800c1fc
 8000814:	0800c224 	.word	0x0800c224
 8000818:	20000108 	.word	0x20000108
 800081c:	0800c250 	.word	0x0800c250
 8000820:	0800c284 	.word	0x0800c284
 8000824:	0800c2bc 	.word	0x0800c2bc

08000828 <Create_File>:
	    return fresult;
	}
}

FRESULT Create_File (char *name)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b088      	sub	sp, #32
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
	fresult = f_stat (name, &USBHfno);
 8000830:	4943      	ldr	r1, [pc, #268]	; (8000940 <Create_File+0x118>)
 8000832:	6878      	ldr	r0, [r7, #4]
 8000834:	f00a fb98 	bl	800af68 <f_stat>
 8000838:	4603      	mov	r3, r0
 800083a:	461a      	mov	r2, r3
 800083c:	4b41      	ldr	r3, [pc, #260]	; (8000944 <Create_File+0x11c>)
 800083e:	701a      	strb	r2, [r3, #0]
	if (fresult == FR_OK)
 8000840:	4b40      	ldr	r3, [pc, #256]	; (8000944 <Create_File+0x11c>)
 8000842:	781b      	ldrb	r3, [r3, #0]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d112      	bne.n	800086e <Create_File+0x46>
	{
		char *buf = malloc(100*sizeof(char));
 8000848:	2064      	movs	r0, #100	; 0x64
 800084a:	f00b f833 	bl	800b8b4 <malloc>
 800084e:	4603      	mov	r3, r0
 8000850:	60fb      	str	r3, [r7, #12]
		sprintf (buf, "ERROR!!! *%s* already exists!!!!\n use Update_File \n\n",name);
 8000852:	687a      	ldr	r2, [r7, #4]
 8000854:	493c      	ldr	r1, [pc, #240]	; (8000948 <Create_File+0x120>)
 8000856:	68f8      	ldr	r0, [r7, #12]
 8000858:	f00b f908 	bl	800ba6c <siprintf>
		Send_Uart(buf);
 800085c:	68f8      	ldr	r0, [r7, #12]
 800085e:	f7ff fec7 	bl	80005f0 <Send_Uart>
		free(buf);
 8000862:	68f8      	ldr	r0, [r7, #12]
 8000864:	f00b f82e 	bl	800b8c4 <free>
	    return fresult;
 8000868:	4b36      	ldr	r3, [pc, #216]	; (8000944 <Create_File+0x11c>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	e063      	b.n	8000936 <Create_File+0x10e>
	}
	else
	{
		fresult = f_open(&USBHFile, name, FA_CREATE_ALWAYS|FA_READ|FA_WRITE);
 800086e:	220b      	movs	r2, #11
 8000870:	6879      	ldr	r1, [r7, #4]
 8000872:	4836      	ldr	r0, [pc, #216]	; (800094c <Create_File+0x124>)
 8000874:	f009 ff70 	bl	800a758 <f_open>
 8000878:	4603      	mov	r3, r0
 800087a:	461a      	mov	r2, r3
 800087c:	4b31      	ldr	r3, [pc, #196]	; (8000944 <Create_File+0x11c>)
 800087e:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 8000880:	4b30      	ldr	r3, [pc, #192]	; (8000944 <Create_File+0x11c>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d015      	beq.n	80008b4 <Create_File+0x8c>
		{
			char *buf = malloc(100*sizeof(char));
 8000888:	2064      	movs	r0, #100	; 0x64
 800088a:	f00b f813 	bl	800b8b4 <malloc>
 800088e:	4603      	mov	r3, r0
 8000890:	613b      	str	r3, [r7, #16]
			sprintf (buf, "ERROR!!! No. %d in creating file *%s*\n\n", fresult, name);
 8000892:	4b2c      	ldr	r3, [pc, #176]	; (8000944 <Create_File+0x11c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	461a      	mov	r2, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	492d      	ldr	r1, [pc, #180]	; (8000950 <Create_File+0x128>)
 800089c:	6938      	ldr	r0, [r7, #16]
 800089e:	f00b f8e5 	bl	800ba6c <siprintf>
			Send_Uart(buf);
 80008a2:	6938      	ldr	r0, [r7, #16]
 80008a4:	f7ff fea4 	bl	80005f0 <Send_Uart>
			free(buf);
 80008a8:	6938      	ldr	r0, [r7, #16]
 80008aa:	f00b f80b 	bl	800b8c4 <free>
		    return fresult;
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <Create_File+0x11c>)
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	e040      	b.n	8000936 <Create_File+0x10e>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 80008b4:	2064      	movs	r0, #100	; 0x64
 80008b6:	f00a fffd 	bl	800b8b4 <malloc>
 80008ba:	4603      	mov	r3, r0
 80008bc:	61fb      	str	r3, [r7, #28]
			sprintf (buf, "*%s* created successfully\n Now use Write_File to write data\n",name);
 80008be:	687a      	ldr	r2, [r7, #4]
 80008c0:	4924      	ldr	r1, [pc, #144]	; (8000954 <Create_File+0x12c>)
 80008c2:	69f8      	ldr	r0, [r7, #28]
 80008c4:	f00b f8d2 	bl	800ba6c <siprintf>
			Send_Uart(buf);
 80008c8:	69f8      	ldr	r0, [r7, #28]
 80008ca:	f7ff fe91 	bl	80005f0 <Send_Uart>
			free(buf);
 80008ce:	69f8      	ldr	r0, [r7, #28]
 80008d0:	f00a fff8 	bl	800b8c4 <free>
		}

		fresult = f_close(&USBHFile);
 80008d4:	481d      	ldr	r0, [pc, #116]	; (800094c <Create_File+0x124>)
 80008d6:	f00a fb1d 	bl	800af14 <f_close>
 80008da:	4603      	mov	r3, r0
 80008dc:	461a      	mov	r2, r3
 80008de:	4b19      	ldr	r3, [pc, #100]	; (8000944 <Create_File+0x11c>)
 80008e0:	701a      	strb	r2, [r3, #0]
		if (fresult != FR_OK)
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <Create_File+0x11c>)
 80008e4:	781b      	ldrb	r3, [r3, #0]
 80008e6:	2b00      	cmp	r3, #0
 80008e8:	d013      	beq.n	8000912 <Create_File+0xea>
		{
			char *buf = malloc(100*sizeof(char));
 80008ea:	2064      	movs	r0, #100	; 0x64
 80008ec:	f00a ffe2 	bl	800b8b4 <malloc>
 80008f0:	4603      	mov	r3, r0
 80008f2:	617b      	str	r3, [r7, #20]
			sprintf (buf, "ERROR No. %d in closing file *%s*\n\n", fresult, name);
 80008f4:	4b13      	ldr	r3, [pc, #76]	; (8000944 <Create_File+0x11c>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	461a      	mov	r2, r3
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4916      	ldr	r1, [pc, #88]	; (8000958 <Create_File+0x130>)
 80008fe:	6978      	ldr	r0, [r7, #20]
 8000900:	f00b f8b4 	bl	800ba6c <siprintf>
			Send_Uart(buf);
 8000904:	6978      	ldr	r0, [r7, #20]
 8000906:	f7ff fe73 	bl	80005f0 <Send_Uart>
			free(buf);
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f00a ffda 	bl	800b8c4 <free>
 8000910:	e00f      	b.n	8000932 <Create_File+0x10a>
		}
		else
		{
			char *buf = malloc(100*sizeof(char));
 8000912:	2064      	movs	r0, #100	; 0x64
 8000914:	f00a ffce 	bl	800b8b4 <malloc>
 8000918:	4603      	mov	r3, r0
 800091a:	61bb      	str	r3, [r7, #24]
			sprintf (buf, "File *%s* CLOSED successfully\n\n", name);
 800091c:	687a      	ldr	r2, [r7, #4]
 800091e:	490f      	ldr	r1, [pc, #60]	; (800095c <Create_File+0x134>)
 8000920:	69b8      	ldr	r0, [r7, #24]
 8000922:	f00b f8a3 	bl	800ba6c <siprintf>
			Send_Uart(buf);
 8000926:	69b8      	ldr	r0, [r7, #24]
 8000928:	f7ff fe62 	bl	80005f0 <Send_Uart>
			free(buf);
 800092c:	69b8      	ldr	r0, [r7, #24]
 800092e:	f00a ffc9 	bl	800b8c4 <free>
		}
	}
    return fresult;
 8000932:	4b04      	ldr	r3, [pc, #16]	; (8000944 <Create_File+0x11c>)
 8000934:	781b      	ldrb	r3, [r3, #0]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000110 	.word	0x20000110
 8000944:	2000010c 	.word	0x2000010c
 8000948:	0800c3b0 	.word	0x0800c3b0
 800094c:	200001b8 	.word	0x200001b8
 8000950:	0800c3e8 	.word	0x0800c3e8
 8000954:	0800c410 	.word	0x0800c410
 8000958:	0800c450 	.word	0x0800c450
 800095c:	0800c390 	.word	0x0800c390

08000960 <Check_USB_Details>:
    }
    return fresult;
}

void Check_USB_Details (void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
    /* Check free space */
    f_getfree("", &fre_clust, &pUSBHFatFS);
 8000966:	4a2d      	ldr	r2, [pc, #180]	; (8000a1c <Check_USB_Details+0xbc>)
 8000968:	492d      	ldr	r1, [pc, #180]	; (8000a20 <Check_USB_Details+0xc0>)
 800096a:	482e      	ldr	r0, [pc, #184]	; (8000a24 <Check_USB_Details+0xc4>)
 800096c:	f00a fb35 	bl	800afda <f_getfree>

    total = (uint32_t)((pUSBHFatFS->n_fatent - 2) * pUSBHFatFS->csize * 0.5);
 8000970:	4b2a      	ldr	r3, [pc, #168]	; (8000a1c <Check_USB_Details+0xbc>)
 8000972:	681b      	ldr	r3, [r3, #0]
 8000974:	699b      	ldr	r3, [r3, #24]
 8000976:	3b02      	subs	r3, #2
 8000978:	4a28      	ldr	r2, [pc, #160]	; (8000a1c <Check_USB_Details+0xbc>)
 800097a:	6812      	ldr	r2, [r2, #0]
 800097c:	8952      	ldrh	r2, [r2, #10]
 800097e:	fb02 f303 	mul.w	r3, r2, r3
 8000982:	ee07 3a90 	vmov	s15, r3
 8000986:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 800098a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 800098e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000992:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000996:	ee17 2a90 	vmov	r2, s15
 800099a:	4b23      	ldr	r3, [pc, #140]	; (8000a28 <Check_USB_Details+0xc8>)
 800099c:	601a      	str	r2, [r3, #0]
    char *buf = malloc(30*sizeof(char));
 800099e:	201e      	movs	r0, #30
 80009a0:	f00a ff88 	bl	800b8b4 <malloc>
 80009a4:	4603      	mov	r3, r0
 80009a6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB  Total Size: \t%lu\n",total);
 80009a8:	4b1f      	ldr	r3, [pc, #124]	; (8000a28 <Check_USB_Details+0xc8>)
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	461a      	mov	r2, r3
 80009ae:	491f      	ldr	r1, [pc, #124]	; (8000a2c <Check_USB_Details+0xcc>)
 80009b0:	6878      	ldr	r0, [r7, #4]
 80009b2:	f00b f85b 	bl	800ba6c <siprintf>
    Send_Uart(buf);
 80009b6:	6878      	ldr	r0, [r7, #4]
 80009b8:	f7ff fe1a 	bl	80005f0 <Send_Uart>
    free(buf);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f00a ff81 	bl	800b8c4 <free>
    free_space = (uint32_t)(fre_clust * pUSBHFatFS->csize * 0.5);
 80009c2:	4b16      	ldr	r3, [pc, #88]	; (8000a1c <Check_USB_Details+0xbc>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	895b      	ldrh	r3, [r3, #10]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <Check_USB_Details+0xc0>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	fb03 f302 	mul.w	r3, r3, r2
 80009d2:	ee07 3a90 	vmov	s15, r3
 80009d6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80009da:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80009de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80009e2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80009e6:	ee17 2a90 	vmov	r2, s15
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <Check_USB_Details+0xd0>)
 80009ec:	601a      	str	r2, [r3, #0]
    buf = malloc(30*sizeof(char));
 80009ee:	201e      	movs	r0, #30
 80009f0:	f00a ff60 	bl	800b8b4 <malloc>
 80009f4:	4603      	mov	r3, r0
 80009f6:	607b      	str	r3, [r7, #4]
    sprintf (buf, "USB Free Space: \t%lu\n",free_space);
 80009f8:	4b0d      	ldr	r3, [pc, #52]	; (8000a30 <Check_USB_Details+0xd0>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	461a      	mov	r2, r3
 80009fe:	490d      	ldr	r1, [pc, #52]	; (8000a34 <Check_USB_Details+0xd4>)
 8000a00:	6878      	ldr	r0, [r7, #4]
 8000a02:	f00b f833 	bl	800ba6c <siprintf>
    Send_Uart(buf);
 8000a06:	6878      	ldr	r0, [r7, #4]
 8000a08:	f7ff fdf2 	bl	80005f0 <Send_Uart>
    free(buf);
 8000a0c:	6878      	ldr	r0, [r7, #4]
 8000a0e:	f00a ff59 	bl	800b8c4 <free>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000100 	.word	0x20000100
 8000a20:	200000f8 	.word	0x200000f8
 8000a24:	0800c584 	.word	0x0800c584
 8000a28:	20000128 	.word	0x20000128
 8000a2c:	0800c588 	.word	0x0800c588
 8000a30:	20000104 	.word	0x20000104
 8000a34:	0800c5a0 	.word	0x0800c5a0

08000a38 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a3c:	f000 fa69 	bl	8000f12 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a40:	f000 f810 	bl	8000a64 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a44:	f000 f8d2 	bl	8000bec <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000a48:	f000 f8a0 	bl	8000b8c <MX_USART3_UART_Init>
  MX_FATFS_Init();
 8000a4c:	f004 ffe4 	bl	8005a18 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000a50:	f00a fbd4 	bl	800b1fc <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */

  Send_Uart("begin usb app\n");
 8000a54:	4802      	ldr	r0, [pc, #8]	; (8000a60 <main+0x28>)
 8000a56:	f7ff fdcb 	bl	80005f0 <Send_Uart>
  /* USER CODE BEGIN WHILE */

  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000a5a:	f00a fbf5 	bl	800b248 <MX_USB_HOST_Process>
 8000a5e:	e7fc      	b.n	8000a5a <main+0x22>
 8000a60:	0800c5b8 	.word	0x0800c5b8

08000a64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b0b8      	sub	sp, #224	; 0xe0
 8000a68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a6a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000a6e:	2234      	movs	r2, #52	; 0x34
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00a ff39 	bl	800b8ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a78:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a88:	f107 0308 	add.w	r3, r7, #8
 8000a8c:	2290      	movs	r2, #144	; 0x90
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4618      	mov	r0, r3
 8000a92:	f00a ff2a 	bl	800b8ea <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a96:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <SystemClock_Config+0x11c>)
 8000a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a9a:	4a39      	ldr	r2, [pc, #228]	; (8000b80 <SystemClock_Config+0x11c>)
 8000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000aa0:	6413      	str	r3, [r2, #64]	; 0x40
 8000aa2:	4b37      	ldr	r3, [pc, #220]	; (8000b80 <SystemClock_Config+0x11c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000aae:	4b35      	ldr	r3, [pc, #212]	; (8000b84 <SystemClock_Config+0x120>)
 8000ab0:	681b      	ldr	r3, [r3, #0]
 8000ab2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ab6:	4a33      	ldr	r2, [pc, #204]	; (8000b84 <SystemClock_Config+0x120>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b31      	ldr	r3, [pc, #196]	; (8000b84 <SystemClock_Config+0x120>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ac6:	603b      	str	r3, [r7, #0]
 8000ac8:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000aca:	2301      	movs	r3, #1
 8000acc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ad0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ad4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ad8:	2302      	movs	r3, #2
 8000ada:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ade:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000ae2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000ae6:	2304      	movs	r3, #4
 8000ae8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000aec:	2360      	movs	r3, #96	; 0x60
 8000aee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000af2:	2302      	movs	r3, #2
 8000af4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000af8:	2304      	movs	r3, #4
 8000afa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000afe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000b02:	4618      	mov	r0, r3
 8000b04:	f002 fa9a 	bl	800303c <HAL_RCC_OscConfig>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000b0e:	f000 f8e7 	bl	8000ce0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000b12:	f002 fa43 	bl	8002f9c <HAL_PWREx_EnableOverDrive>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 8000b1c:	f000 f8e0 	bl	8000ce0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b20:	230f      	movs	r3, #15
 8000b22:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b26:	2302      	movs	r3, #2
 8000b28:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b36:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000b40:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000b44:	2103      	movs	r1, #3
 8000b46:	4618      	mov	r0, r3
 8000b48:	f002 fd26 	bl	8003598 <HAL_RCC_ClockConfig>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8000b52:	f000 f8c5 	bl	8000ce0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000b56:	4b0c      	ldr	r3, [pc, #48]	; (8000b88 <SystemClock_Config+0x124>)
 8000b58:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f002 ff0d 	bl	8003988 <HAL_RCCEx_PeriphCLKConfig>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d001      	beq.n	8000b78 <SystemClock_Config+0x114>
  {
    Error_Handler();
 8000b74:	f000 f8b4 	bl	8000ce0 <Error_Handler>
  }
}
 8000b78:	bf00      	nop
 8000b7a:	37e0      	adds	r7, #224	; 0xe0
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40007000 	.word	0x40007000
 8000b88:	00200100 	.word	0x00200100

08000b8c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b90:	4b14      	ldr	r3, [pc, #80]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000b92:	4a15      	ldr	r2, [pc, #84]	; (8000be8 <MX_USART3_UART_Init+0x5c>)
 8000b94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b96:	4b13      	ldr	r3, [pc, #76]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000b98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b9e:	4b11      	ldr	r3, [pc, #68]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ba4:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000baa:	4b0e      	ldr	r3, [pc, #56]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000bb0:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bb2:	220c      	movs	r2, #12
 8000bb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bb6:	4b0b      	ldr	r3, [pc, #44]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bbc:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000bc2:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000bc8:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000bce:	4805      	ldr	r0, [pc, #20]	; (8000be4 <MX_USART3_UART_Init+0x58>)
 8000bd0:	f003 fb00 	bl	80041d4 <HAL_UART_Init>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000bda:	f000 f881 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000bde:	bf00      	nop
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	bf00      	nop
 8000be4:	2000012c 	.word	0x2000012c
 8000be8:	40004800 	.word	0x40004800

08000bec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b08a      	sub	sp, #40	; 0x28
 8000bf0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	601a      	str	r2, [r3, #0]
 8000bfa:	605a      	str	r2, [r3, #4]
 8000bfc:	609a      	str	r2, [r3, #8]
 8000bfe:	60da      	str	r2, [r3, #12]
 8000c00:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c02:	4b34      	ldr	r3, [pc, #208]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c06:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0e:	4b31      	ldr	r3, [pc, #196]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c16:	613b      	str	r3, [r7, #16]
 8000c18:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1a:	4b2e      	ldr	r3, [pc, #184]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1e:	4a2d      	ldr	r2, [pc, #180]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c20:	f043 0302 	orr.w	r3, r3, #2
 8000c24:	6313      	str	r3, [r2, #48]	; 0x30
 8000c26:	4b2b      	ldr	r3, [pc, #172]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	f003 0302 	and.w	r3, r3, #2
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c32:	4b28      	ldr	r3, [pc, #160]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	4a27      	ldr	r2, [pc, #156]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c38:	f043 0308 	orr.w	r3, r3, #8
 8000c3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3e:	4b25      	ldr	r3, [pc, #148]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	f003 0308 	and.w	r3, r3, #8
 8000c46:	60bb      	str	r3, [r7, #8]
 8000c48:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c4a:	4b22      	ldr	r3, [pc, #136]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	4a21      	ldr	r2, [pc, #132]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c54:	6313      	str	r3, [r2, #48]	; 0x30
 8000c56:	4b1f      	ldr	r3, [pc, #124]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5e:	607b      	str	r3, [r7, #4]
 8000c60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c62:	4b1c      	ldr	r3, [pc, #112]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a1b      	ldr	r2, [pc, #108]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c68:	f043 0301 	orr.w	r3, r3, #1
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b19      	ldr	r3, [pc, #100]	; (8000cd4 <MX_GPIO_Init+0xe8>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0301 	and.w	r3, r3, #1
 8000c76:	603b      	str	r3, [r7, #0]
 8000c78:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_9, GPIO_PIN_RESET);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c80:	4815      	ldr	r0, [pc, #84]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000c82:	f000 fc81 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_SET);
 8000c86:	2201      	movs	r2, #1
 8000c88:	2140      	movs	r1, #64	; 0x40
 8000c8a:	4814      	ldr	r0, [pc, #80]	; (8000cdc <MX_GPIO_Init+0xf0>)
 8000c8c:	f000 fc7c 	bl	8001588 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c96:	2301      	movs	r3, #1
 8000c98:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ca2:	f107 0314 	add.w	r3, r7, #20
 8000ca6:	4619      	mov	r1, r3
 8000ca8:	480b      	ldr	r0, [pc, #44]	; (8000cd8 <MX_GPIO_Init+0xec>)
 8000caa:	f000 fac3 	bl	8001234 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000cae:	2340      	movs	r3, #64	; 0x40
 8000cb0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cb2:	2301      	movs	r3, #1
 8000cb4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4805      	ldr	r0, [pc, #20]	; (8000cdc <MX_GPIO_Init+0xf0>)
 8000cc6:	f000 fab5 	bl	8001234 <HAL_GPIO_Init>

}
 8000cca:	bf00      	nop
 8000ccc:	3728      	adds	r7, #40	; 0x28
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800
 8000cd8:	40020c00 	.word	0x40020c00
 8000cdc:	40021800 	.word	0x40021800

08000ce0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
   err_cnt++;
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <Error_Handler+0x18>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	4a03      	ldr	r2, [pc, #12]	; (8000cf8 <Error_Handler+0x18>)
 8000cec:	6013      	str	r3, [r2, #0]
  /* USER CODE END Error_Handler_Debug */
}
 8000cee:	bf00      	nop
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	200001ac 	.word	0x200001ac

08000cfc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000d02:	4b0f      	ldr	r3, [pc, #60]	; (8000d40 <HAL_MspInit+0x44>)
 8000d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d06:	4a0e      	ldr	r2, [pc, #56]	; (8000d40 <HAL_MspInit+0x44>)
 8000d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8000d0e:	4b0c      	ldr	r3, [pc, #48]	; (8000d40 <HAL_MspInit+0x44>)
 8000d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1a:	4b09      	ldr	r3, [pc, #36]	; (8000d40 <HAL_MspInit+0x44>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <HAL_MspInit+0x44>)
 8000d20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d24:	6453      	str	r3, [r2, #68]	; 0x44
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <HAL_MspInit+0x44>)
 8000d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d2e:	603b      	str	r3, [r7, #0]
 8000d30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d32:	bf00      	nop
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	40023800 	.word	0x40023800

08000d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d4c:	f107 0314 	add.w	r3, r7, #20
 8000d50:	2200      	movs	r2, #0
 8000d52:	601a      	str	r2, [r3, #0]
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	609a      	str	r2, [r3, #8]
 8000d58:	60da      	str	r2, [r3, #12]
 8000d5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	4a17      	ldr	r2, [pc, #92]	; (8000dc0 <HAL_UART_MspInit+0x7c>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d128      	bne.n	8000db8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d66:	4b17      	ldr	r3, [pc, #92]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d6a:	4a16      	ldr	r2, [pc, #88]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d70:	6413      	str	r3, [r2, #64]	; 0x40
 8000d72:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a10      	ldr	r2, [pc, #64]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b0e      	ldr	r3, [pc, #56]	; (8000dc4 <HAL_UART_MspInit+0x80>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	60fb      	str	r3, [r7, #12]
 8000d94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration    
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000d96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000d9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9c:	2302      	movs	r3, #2
 8000d9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da0:	2300      	movs	r3, #0
 8000da2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000da4:	2303      	movs	r3, #3
 8000da6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000da8:	2307      	movs	r3, #7
 8000daa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dac:	f107 0314 	add.w	r3, r7, #20
 8000db0:	4619      	mov	r1, r3
 8000db2:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_UART_MspInit+0x84>)
 8000db4:	f000 fa3e 	bl	8001234 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000db8:	bf00      	nop
 8000dba:	3728      	adds	r7, #40	; 0x28
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}
 8000dc0:	40004800 	.word	0x40004800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020400 	.word	0x40020400

08000dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dd0:	bf00      	nop
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd8:	4770      	bx	lr

08000dda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dda:	b480      	push	{r7}
 8000ddc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dde:	e7fe      	b.n	8000dde <HardFault_Handler+0x4>

08000de0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000de4:	e7fe      	b.n	8000de4 <MemManage_Handler+0x4>

08000de6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de6:	b480      	push	{r7}
 8000de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dea:	e7fe      	b.n	8000dea <BusFault_Handler+0x4>

08000dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000df0:	e7fe      	b.n	8000df0 <UsageFault_Handler+0x4>

08000df2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df2:	b480      	push	{r7}
 8000df4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfe:	4770      	bx	lr

08000e00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e00:	b480      	push	{r7}
 8000e02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e04:	bf00      	nop
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0e:	b480      	push	{r7}
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e12:	bf00      	nop
 8000e14:	46bd      	mov	sp, r7
 8000e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1a:	4770      	bx	lr

08000e1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e20:	f000 f8b4 	bl	8000f8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e24:	bf00      	nop
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e2c:	4802      	ldr	r0, [pc, #8]	; (8000e38 <OTG_FS_IRQHandler+0x10>)
 8000e2e:	f000 fe53 	bl	8001ad8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200025f8 	.word	0x200025f8

08000e3c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b084      	sub	sp, #16
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x50>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d102      	bne.n	8000e52 <_sbrk+0x16>
		heap_end = &end;
 8000e4c:	4b0f      	ldr	r3, [pc, #60]	; (8000e8c <_sbrk+0x50>)
 8000e4e:	4a10      	ldr	r2, [pc, #64]	; (8000e90 <_sbrk+0x54>)
 8000e50:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000e52:	4b0e      	ldr	r3, [pc, #56]	; (8000e8c <_sbrk+0x50>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000e58:	4b0c      	ldr	r3, [pc, #48]	; (8000e8c <_sbrk+0x50>)
 8000e5a:	681a      	ldr	r2, [r3, #0]
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	4413      	add	r3, r2
 8000e60:	466a      	mov	r2, sp
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d907      	bls.n	8000e76 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8000e66:	f00a fcfb 	bl	800b860 <__errno>
 8000e6a:	4602      	mov	r2, r0
 8000e6c:	230c      	movs	r3, #12
 8000e6e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000e70:	f04f 33ff 	mov.w	r3, #4294967295
 8000e74:	e006      	b.n	8000e84 <_sbrk+0x48>
	}

	heap_end += incr;
 8000e76:	4b05      	ldr	r3, [pc, #20]	; (8000e8c <_sbrk+0x50>)
 8000e78:	681a      	ldr	r2, [r3, #0]
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	4a03      	ldr	r2, [pc, #12]	; (8000e8c <_sbrk+0x50>)
 8000e80:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8000e82:	68fb      	ldr	r3, [r7, #12]
}
 8000e84:	4618      	mov	r0, r3
 8000e86:	3710      	adds	r7, #16
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}
 8000e8c:	200000ac 	.word	0x200000ac
 8000e90:	200028c0 	.word	0x200028c0

08000e94 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <SystemInit+0x28>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a07      	ldr	r2, [pc, #28]	; (8000ebc <SystemInit+0x28>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ea8:	4b04      	ldr	r3, [pc, #16]	; (8000ebc <SystemInit+0x28>)
 8000eaa:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eae:	609a      	str	r2, [r3, #8]
#endif
}
 8000eb0:	bf00      	nop
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000ec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ef8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000ec4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000ec6:	e003      	b.n	8000ed0 <LoopCopyDataInit>

08000ec8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ec8:	4b0c      	ldr	r3, [pc, #48]	; (8000efc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000eca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ecc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ece:	3104      	adds	r1, #4

08000ed0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ed0:	480b      	ldr	r0, [pc, #44]	; (8000f00 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000ed2:	4b0c      	ldr	r3, [pc, #48]	; (8000f04 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000ed4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000ed6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000ed8:	d3f6      	bcc.n	8000ec8 <CopyDataInit>
  ldr  r2, =_sbss
 8000eda:	4a0b      	ldr	r2, [pc, #44]	; (8000f08 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000edc:	e002      	b.n	8000ee4 <LoopFillZerobss>

08000ede <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000ede:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000ee0:	f842 3b04 	str.w	r3, [r2], #4

08000ee4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ee4:	4b09      	ldr	r3, [pc, #36]	; (8000f0c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ee6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ee8:	d3f9      	bcc.n	8000ede <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000eea:	f7ff ffd3 	bl	8000e94 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eee:	f00a fcbd 	bl	800b86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ef2:	f7ff fda1 	bl	8000a38 <main>
  bx  lr    
 8000ef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ef8:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8000efc:	0800c734 	.word	0x0800c734
  ldr  r0, =_sdata
 8000f00:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f04:	20000090 	.word	0x20000090
  ldr  r2, =_sbss
 8000f08:	20000090 	.word	0x20000090
  ldr  r3, = _ebss
 8000f0c:	200028c0 	.word	0x200028c0

08000f10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f10:	e7fe      	b.n	8000f10 <ADC_IRQHandler>

08000f12 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f12:	b580      	push	{r7, lr}
 8000f14:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f16:	2003      	movs	r0, #3
 8000f18:	f000 f94a 	bl	80011b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	f000 f805 	bl	8000f2c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f22:	f7ff feeb 	bl	8000cfc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b082      	sub	sp, #8
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f34:	4b12      	ldr	r3, [pc, #72]	; (8000f80 <HAL_InitTick+0x54>)
 8000f36:	681a      	ldr	r2, [r3, #0]
 8000f38:	4b12      	ldr	r3, [pc, #72]	; (8000f84 <HAL_InitTick+0x58>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f42:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f46:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f000 f965 	bl	800121a <HAL_SYSTICK_Config>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f56:	2301      	movs	r3, #1
 8000f58:	e00e      	b.n	8000f78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2b0f      	cmp	r3, #15
 8000f5e:	d80a      	bhi.n	8000f76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f60:	2200      	movs	r2, #0
 8000f62:	6879      	ldr	r1, [r7, #4]
 8000f64:	f04f 30ff 	mov.w	r0, #4294967295
 8000f68:	f000 f92d 	bl	80011c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f6c:	4a06      	ldr	r2, [pc, #24]	; (8000f88 <HAL_InitTick+0x5c>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f72:	2300      	movs	r3, #0
 8000f74:	e000      	b.n	8000f78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f76:	2301      	movs	r3, #1
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3708      	adds	r7, #8
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20000000 	.word	0x20000000
 8000f84:	20000008 	.word	0x20000008
 8000f88:	20000004 	.word	0x20000004

08000f8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f8c:	b480      	push	{r7}
 8000f8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <HAL_IncTick+0x20>)
 8000f92:	781b      	ldrb	r3, [r3, #0]
 8000f94:	461a      	mov	r2, r3
 8000f96:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4413      	add	r3, r2
 8000f9c:	4a04      	ldr	r2, [pc, #16]	; (8000fb0 <HAL_IncTick+0x24>)
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr
 8000faa:	bf00      	nop
 8000fac:	20000008 	.word	0x20000008
 8000fb0:	200001b0 	.word	0x200001b0

08000fb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fb8:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HAL_GetTick+0x14>)
 8000fba:	681b      	ldr	r3, [r3, #0]
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	200001b0 	.word	0x200001b0

08000fcc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fd4:	f7ff ffee 	bl	8000fb4 <HAL_GetTick>
 8000fd8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe4:	d005      	beq.n	8000ff2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000fe6:	4b09      	ldr	r3, [pc, #36]	; (800100c <HAL_Delay+0x40>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	4413      	add	r3, r2
 8000ff0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ff2:	bf00      	nop
 8000ff4:	f7ff ffde 	bl	8000fb4 <HAL_GetTick>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	429a      	cmp	r2, r3
 8001002:	d8f7      	bhi.n	8000ff4 <HAL_Delay+0x28>
  {
  }
}
 8001004:	bf00      	nop
 8001006:	3710      	adds	r7, #16
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000008 	.word	0x20000008

08001010 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001010:	b480      	push	{r7}
 8001012:	b085      	sub	sp, #20
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f003 0307 	and.w	r3, r3, #7
 800101e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001026:	68ba      	ldr	r2, [r7, #8]
 8001028:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800102c:	4013      	ands	r3, r2
 800102e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <__NVIC_SetPriorityGrouping+0x44>)
 800103a:	4313      	orrs	r3, r2
 800103c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800103e:	4a04      	ldr	r2, [pc, #16]	; (8001050 <__NVIC_SetPriorityGrouping+0x40>)
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	60d3      	str	r3, [r2, #12]
}
 8001044:	bf00      	nop
 8001046:	3714      	adds	r7, #20
 8001048:	46bd      	mov	sp, r7
 800104a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104e:	4770      	bx	lr
 8001050:	e000ed00 	.word	0xe000ed00
 8001054:	05fa0000 	.word	0x05fa0000

08001058 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800105c:	4b04      	ldr	r3, [pc, #16]	; (8001070 <__NVIC_GetPriorityGrouping+0x18>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	0a1b      	lsrs	r3, r3, #8
 8001062:	f003 0307 	and.w	r3, r3, #7
}
 8001066:	4618      	mov	r0, r3
 8001068:	46bd      	mov	sp, r7
 800106a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106e:	4770      	bx	lr
 8001070:	e000ed00 	.word	0xe000ed00

08001074 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	2b00      	cmp	r3, #0
 8001084:	db0b      	blt.n	800109e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001086:	79fb      	ldrb	r3, [r7, #7]
 8001088:	f003 021f 	and.w	r2, r3, #31
 800108c:	4907      	ldr	r1, [pc, #28]	; (80010ac <__NVIC_EnableIRQ+0x38>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	095b      	lsrs	r3, r3, #5
 8001094:	2001      	movs	r0, #1
 8001096:	fa00 f202 	lsl.w	r2, r0, r2
 800109a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	e000e100 	.word	0xe000e100

080010b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	6039      	str	r1, [r7, #0]
 80010ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	db0a      	blt.n	80010da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	490c      	ldr	r1, [pc, #48]	; (80010fc <__NVIC_SetPriority+0x4c>)
 80010ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ce:	0112      	lsls	r2, r2, #4
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	440b      	add	r3, r1
 80010d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010d8:	e00a      	b.n	80010f0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	b2da      	uxtb	r2, r3
 80010de:	4908      	ldr	r1, [pc, #32]	; (8001100 <__NVIC_SetPriority+0x50>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	f003 030f 	and.w	r3, r3, #15
 80010e6:	3b04      	subs	r3, #4
 80010e8:	0112      	lsls	r2, r2, #4
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	440b      	add	r3, r1
 80010ee:	761a      	strb	r2, [r3, #24]
}
 80010f0:	bf00      	nop
 80010f2:	370c      	adds	r7, #12
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000e100 	.word	0xe000e100
 8001100:	e000ed00 	.word	0xe000ed00

08001104 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001104:	b480      	push	{r7}
 8001106:	b089      	sub	sp, #36	; 0x24
 8001108:	af00      	add	r7, sp, #0
 800110a:	60f8      	str	r0, [r7, #12]
 800110c:	60b9      	str	r1, [r7, #8]
 800110e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	f003 0307 	and.w	r3, r3, #7
 8001116:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	f1c3 0307 	rsb	r3, r3, #7
 800111e:	2b04      	cmp	r3, #4
 8001120:	bf28      	it	cs
 8001122:	2304      	movcs	r3, #4
 8001124:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	3304      	adds	r3, #4
 800112a:	2b06      	cmp	r3, #6
 800112c:	d902      	bls.n	8001134 <NVIC_EncodePriority+0x30>
 800112e:	69fb      	ldr	r3, [r7, #28]
 8001130:	3b03      	subs	r3, #3
 8001132:	e000      	b.n	8001136 <NVIC_EncodePriority+0x32>
 8001134:	2300      	movs	r3, #0
 8001136:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001138:	f04f 32ff 	mov.w	r2, #4294967295
 800113c:	69bb      	ldr	r3, [r7, #24]
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	43da      	mvns	r2, r3
 8001144:	68bb      	ldr	r3, [r7, #8]
 8001146:	401a      	ands	r2, r3
 8001148:	697b      	ldr	r3, [r7, #20]
 800114a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800114c:	f04f 31ff 	mov.w	r1, #4294967295
 8001150:	697b      	ldr	r3, [r7, #20]
 8001152:	fa01 f303 	lsl.w	r3, r1, r3
 8001156:	43d9      	mvns	r1, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800115c:	4313      	orrs	r3, r2
         );
}
 800115e:	4618      	mov	r0, r3
 8001160:	3724      	adds	r7, #36	; 0x24
 8001162:	46bd      	mov	sp, r7
 8001164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001168:	4770      	bx	lr
	...

0800116c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	3b01      	subs	r3, #1
 8001178:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800117c:	d301      	bcc.n	8001182 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800117e:	2301      	movs	r3, #1
 8001180:	e00f      	b.n	80011a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <SysTick_Config+0x40>)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	3b01      	subs	r3, #1
 8001188:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800118a:	210f      	movs	r1, #15
 800118c:	f04f 30ff 	mov.w	r0, #4294967295
 8001190:	f7ff ff8e 	bl	80010b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001194:	4b05      	ldr	r3, [pc, #20]	; (80011ac <SysTick_Config+0x40>)
 8001196:	2200      	movs	r2, #0
 8001198:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800119a:	4b04      	ldr	r3, [pc, #16]	; (80011ac <SysTick_Config+0x40>)
 800119c:	2207      	movs	r2, #7
 800119e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011a0:	2300      	movs	r3, #0
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3708      	adds	r7, #8
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	e000e010 	.word	0xe000e010

080011b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f7ff ff29 	bl	8001010 <__NVIC_SetPriorityGrouping>
}
 80011be:	bf00      	nop
 80011c0:	3708      	adds	r7, #8
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}

080011c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80011c6:	b580      	push	{r7, lr}
 80011c8:	b086      	sub	sp, #24
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	4603      	mov	r3, r0
 80011ce:	60b9      	str	r1, [r7, #8]
 80011d0:	607a      	str	r2, [r7, #4]
 80011d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011d4:	2300      	movs	r3, #0
 80011d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80011d8:	f7ff ff3e 	bl	8001058 <__NVIC_GetPriorityGrouping>
 80011dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	68b9      	ldr	r1, [r7, #8]
 80011e2:	6978      	ldr	r0, [r7, #20]
 80011e4:	f7ff ff8e 	bl	8001104 <NVIC_EncodePriority>
 80011e8:	4602      	mov	r2, r0
 80011ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011ee:	4611      	mov	r1, r2
 80011f0:	4618      	mov	r0, r3
 80011f2:	f7ff ff5d 	bl	80010b0 <__NVIC_SetPriority>
}
 80011f6:	bf00      	nop
 80011f8:	3718      	adds	r7, #24
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}

080011fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011fe:	b580      	push	{r7, lr}
 8001200:	b082      	sub	sp, #8
 8001202:	af00      	add	r7, sp, #0
 8001204:	4603      	mov	r3, r0
 8001206:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001208:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff ff31 	bl	8001074 <__NVIC_EnableIRQ>
}
 8001212:	bf00      	nop
 8001214:	3708      	adds	r7, #8
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}

0800121a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ffa2 	bl	800116c <SysTick_Config>
 8001228:	4603      	mov	r3, r0
}
 800122a:	4618      	mov	r0, r3
 800122c:	3708      	adds	r7, #8
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b089      	sub	sp, #36	; 0x24
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001242:	2300      	movs	r3, #0
 8001244:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001246:	2300      	movs	r3, #0
 8001248:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800124a:	2300      	movs	r3, #0
 800124c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800124e:	2300      	movs	r3, #0
 8001250:	61fb      	str	r3, [r7, #28]
 8001252:	e175      	b.n	8001540 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001254:	2201      	movs	r2, #1
 8001256:	69fb      	ldr	r3, [r7, #28]
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	697a      	ldr	r2, [r7, #20]
 8001264:	4013      	ands	r3, r2
 8001266:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001268:	693a      	ldr	r2, [r7, #16]
 800126a:	697b      	ldr	r3, [r7, #20]
 800126c:	429a      	cmp	r2, r3
 800126e:	f040 8164 	bne.w	800153a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	2b01      	cmp	r3, #1
 8001278:	d00b      	beq.n	8001292 <HAL_GPIO_Init+0x5e>
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	2b02      	cmp	r3, #2
 8001280:	d007      	beq.n	8001292 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001286:	2b11      	cmp	r3, #17
 8001288:	d003      	beq.n	8001292 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	2b12      	cmp	r3, #18
 8001290:	d130      	bne.n	80012f4 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001298:	69fb      	ldr	r3, [r7, #28]
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2203      	movs	r2, #3
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	69ba      	ldr	r2, [r7, #24]
 80012a6:	4013      	ands	r3, r2
 80012a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	68da      	ldr	r2, [r3, #12]
 80012ae:	69fb      	ldr	r3, [r7, #28]
 80012b0:	005b      	lsls	r3, r3, #1
 80012b2:	fa02 f303 	lsl.w	r3, r2, r3
 80012b6:	69ba      	ldr	r2, [r7, #24]
 80012b8:	4313      	orrs	r3, r2
 80012ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c8:	2201      	movs	r2, #1
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	fa02 f303 	lsl.w	r3, r2, r3
 80012d0:	43db      	mvns	r3, r3
 80012d2:	69ba      	ldr	r2, [r7, #24]
 80012d4:	4013      	ands	r3, r2
 80012d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	091b      	lsrs	r3, r3, #4
 80012de:	f003 0201 	and.w	r2, r3, #1
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	fa02 f303 	lsl.w	r3, r2, r3
 80012e8:	69ba      	ldr	r2, [r7, #24]
 80012ea:	4313      	orrs	r3, r2
 80012ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	68db      	ldr	r3, [r3, #12]
 80012f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	2203      	movs	r2, #3
 8001300:	fa02 f303 	lsl.w	r3, r2, r3
 8001304:	43db      	mvns	r3, r3
 8001306:	69ba      	ldr	r2, [r7, #24]
 8001308:	4013      	ands	r3, r2
 800130a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	689a      	ldr	r2, [r3, #8]
 8001310:	69fb      	ldr	r3, [r7, #28]
 8001312:	005b      	lsls	r3, r3, #1
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	69ba      	ldr	r2, [r7, #24]
 800131a:	4313      	orrs	r3, r2
 800131c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	69ba      	ldr	r2, [r7, #24]
 8001322:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b02      	cmp	r3, #2
 800132a:	d003      	beq.n	8001334 <HAL_GPIO_Init+0x100>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	2b12      	cmp	r3, #18
 8001332:	d123      	bne.n	800137c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	08da      	lsrs	r2, r3, #3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	3208      	adds	r2, #8
 800133c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001342:	69fb      	ldr	r3, [r7, #28]
 8001344:	f003 0307 	and.w	r3, r3, #7
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	220f      	movs	r2, #15
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	691a      	ldr	r2, [r3, #16]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800136e:	69fb      	ldr	r3, [r7, #28]
 8001370:	08da      	lsrs	r2, r3, #3
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	3208      	adds	r2, #8
 8001376:	69b9      	ldr	r1, [r7, #24]
 8001378:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	005b      	lsls	r3, r3, #1
 8001386:	2203      	movs	r2, #3
 8001388:	fa02 f303 	lsl.w	r3, r2, r3
 800138c:	43db      	mvns	r3, r3
 800138e:	69ba      	ldr	r2, [r7, #24]
 8001390:	4013      	ands	r3, r2
 8001392:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	f003 0203 	and.w	r2, r3, #3
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	f000 80be 	beq.w	800153a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013be:	4b65      	ldr	r3, [pc, #404]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a64      	ldr	r2, [pc, #400]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b62      	ldr	r3, [pc, #392]	; (8001554 <HAL_GPIO_Init+0x320>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	60fb      	str	r3, [r7, #12]
 80013d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80013d6:	4a60      	ldr	r2, [pc, #384]	; (8001558 <HAL_GPIO_Init+0x324>)
 80013d8:	69fb      	ldr	r3, [r7, #28]
 80013da:	089b      	lsrs	r3, r3, #2
 80013dc:	3302      	adds	r3, #2
 80013de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0303 	and.w	r3, r3, #3
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	220f      	movs	r2, #15
 80013ee:	fa02 f303 	lsl.w	r3, r2, r3
 80013f2:	43db      	mvns	r3, r3
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	4013      	ands	r3, r2
 80013f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	4a57      	ldr	r2, [pc, #348]	; (800155c <HAL_GPIO_Init+0x328>)
 80013fe:	4293      	cmp	r3, r2
 8001400:	d037      	beq.n	8001472 <HAL_GPIO_Init+0x23e>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4a56      	ldr	r2, [pc, #344]	; (8001560 <HAL_GPIO_Init+0x32c>)
 8001406:	4293      	cmp	r3, r2
 8001408:	d031      	beq.n	800146e <HAL_GPIO_Init+0x23a>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a55      	ldr	r2, [pc, #340]	; (8001564 <HAL_GPIO_Init+0x330>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d02b      	beq.n	800146a <HAL_GPIO_Init+0x236>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a54      	ldr	r2, [pc, #336]	; (8001568 <HAL_GPIO_Init+0x334>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d025      	beq.n	8001466 <HAL_GPIO_Init+0x232>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a53      	ldr	r2, [pc, #332]	; (800156c <HAL_GPIO_Init+0x338>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d01f      	beq.n	8001462 <HAL_GPIO_Init+0x22e>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a52      	ldr	r2, [pc, #328]	; (8001570 <HAL_GPIO_Init+0x33c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d019      	beq.n	800145e <HAL_GPIO_Init+0x22a>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a51      	ldr	r2, [pc, #324]	; (8001574 <HAL_GPIO_Init+0x340>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d013      	beq.n	800145a <HAL_GPIO_Init+0x226>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a50      	ldr	r2, [pc, #320]	; (8001578 <HAL_GPIO_Init+0x344>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d00d      	beq.n	8001456 <HAL_GPIO_Init+0x222>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a4f      	ldr	r2, [pc, #316]	; (800157c <HAL_GPIO_Init+0x348>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d007      	beq.n	8001452 <HAL_GPIO_Init+0x21e>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a4e      	ldr	r2, [pc, #312]	; (8001580 <HAL_GPIO_Init+0x34c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d101      	bne.n	800144e <HAL_GPIO_Init+0x21a>
 800144a:	2309      	movs	r3, #9
 800144c:	e012      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800144e:	230a      	movs	r3, #10
 8001450:	e010      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001452:	2308      	movs	r3, #8
 8001454:	e00e      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001456:	2307      	movs	r3, #7
 8001458:	e00c      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145a:	2306      	movs	r3, #6
 800145c:	e00a      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800145e:	2305      	movs	r3, #5
 8001460:	e008      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001462:	2304      	movs	r3, #4
 8001464:	e006      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001466:	2303      	movs	r3, #3
 8001468:	e004      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146a:	2302      	movs	r3, #2
 800146c:	e002      	b.n	8001474 <HAL_GPIO_Init+0x240>
 800146e:	2301      	movs	r3, #1
 8001470:	e000      	b.n	8001474 <HAL_GPIO_Init+0x240>
 8001472:	2300      	movs	r3, #0
 8001474:	69fa      	ldr	r2, [r7, #28]
 8001476:	f002 0203 	and.w	r2, r2, #3
 800147a:	0092      	lsls	r2, r2, #2
 800147c:	4093      	lsls	r3, r2
 800147e:	69ba      	ldr	r2, [r7, #24]
 8001480:	4313      	orrs	r3, r2
 8001482:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001484:	4934      	ldr	r1, [pc, #208]	; (8001558 <HAL_GPIO_Init+0x324>)
 8001486:	69fb      	ldr	r3, [r7, #28]
 8001488:	089b      	lsrs	r3, r3, #2
 800148a:	3302      	adds	r3, #2
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001492:	4b3c      	ldr	r3, [pc, #240]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001498:	693b      	ldr	r3, [r7, #16]
 800149a:	43db      	mvns	r3, r3
 800149c:	69ba      	ldr	r2, [r7, #24]
 800149e:	4013      	ands	r3, r2
 80014a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80014ae:	69ba      	ldr	r2, [r7, #24]
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80014b6:	4a33      	ldr	r2, [pc, #204]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80014bc:	4b31      	ldr	r3, [pc, #196]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	43db      	mvns	r3, r3
 80014c6:	69ba      	ldr	r2, [r7, #24]
 80014c8:	4013      	ands	r3, r2
 80014ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d003      	beq.n	80014e0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80014d8:	69ba      	ldr	r2, [r7, #24]
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4313      	orrs	r3, r2
 80014de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014e0:	4a28      	ldr	r2, [pc, #160]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e2:	69bb      	ldr	r3, [r7, #24]
 80014e4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e6:	4b27      	ldr	r3, [pc, #156]	; (8001584 <HAL_GPIO_Init+0x350>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	43db      	mvns	r3, r3
 80014f0:	69ba      	ldr	r2, [r7, #24]
 80014f2:	4013      	ands	r3, r2
 80014f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d003      	beq.n	800150a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	4313      	orrs	r3, r2
 8001508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800150a:	4a1e      	ldr	r2, [pc, #120]	; (8001584 <HAL_GPIO_Init+0x350>)
 800150c:	69bb      	ldr	r3, [r7, #24]
 800150e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001510:	4b1c      	ldr	r3, [pc, #112]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001516:	693b      	ldr	r3, [r7, #16]
 8001518:	43db      	mvns	r3, r3
 800151a:	69ba      	ldr	r2, [r7, #24]
 800151c:	4013      	ands	r3, r2
 800151e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001528:	2b00      	cmp	r3, #0
 800152a:	d003      	beq.n	8001534 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800152c:	69ba      	ldr	r2, [r7, #24]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001534:	4a13      	ldr	r2, [pc, #76]	; (8001584 <HAL_GPIO_Init+0x350>)
 8001536:	69bb      	ldr	r3, [r7, #24]
 8001538:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	3301      	adds	r3, #1
 800153e:	61fb      	str	r3, [r7, #28]
 8001540:	69fb      	ldr	r3, [r7, #28]
 8001542:	2b0f      	cmp	r3, #15
 8001544:	f67f ae86 	bls.w	8001254 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001548:	bf00      	nop
 800154a:	3724      	adds	r7, #36	; 0x24
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	40023800 	.word	0x40023800
 8001558:	40013800 	.word	0x40013800
 800155c:	40020000 	.word	0x40020000
 8001560:	40020400 	.word	0x40020400
 8001564:	40020800 	.word	0x40020800
 8001568:	40020c00 	.word	0x40020c00
 800156c:	40021000 	.word	0x40021000
 8001570:	40021400 	.word	0x40021400
 8001574:	40021800 	.word	0x40021800
 8001578:	40021c00 	.word	0x40021c00
 800157c:	40022000 	.word	0x40022000
 8001580:	40022400 	.word	0x40022400
 8001584:	40013c00 	.word	0x40013c00

08001588 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001588:	b480      	push	{r7}
 800158a:	b083      	sub	sp, #12
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	460b      	mov	r3, r1
 8001592:	807b      	strh	r3, [r7, #2]
 8001594:	4613      	mov	r3, r2
 8001596:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001598:	787b      	ldrb	r3, [r7, #1]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d003      	beq.n	80015a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800159e:	887a      	ldrh	r2, [r7, #2]
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80015a4:	e003      	b.n	80015ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80015a6:	887b      	ldrh	r3, [r7, #2]
 80015a8:	041a      	lsls	r2, r3, #16
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	619a      	str	r2, [r3, #24]
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr

080015ba <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80015ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015bc:	b08f      	sub	sp, #60	; 0x3c
 80015be:	af0a      	add	r7, sp, #40	; 0x28
 80015c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d101      	bne.n	80015cc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e054      	b.n	8001676 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d106      	bne.n	80015ec <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	2200      	movs	r2, #0
 80015e2:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f009 fe80 	bl	800b2ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	2203      	movs	r2, #3
 80015f0:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d102      	bne.n	8001606 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2200      	movs	r2, #0
 8001604:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4618      	mov	r0, r3
 800160c:	f003 fb37 	bl	8004c7e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	687e      	ldr	r6, [r7, #4]
 8001618:	466d      	mov	r5, sp
 800161a:	f106 0410 	add.w	r4, r6, #16
 800161e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001622:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001624:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001626:	e894 0003 	ldmia.w	r4, {r0, r1}
 800162a:	e885 0003 	stmia.w	r5, {r0, r1}
 800162e:	1d33      	adds	r3, r6, #4
 8001630:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001632:	6838      	ldr	r0, [r7, #0]
 8001634:	f003 faba 	bl	8004bac <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	2101      	movs	r1, #1
 800163e:	4618      	mov	r0, r3
 8001640:	f003 fb2e 	bl	8004ca0 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	603b      	str	r3, [r7, #0]
 800164a:	687e      	ldr	r6, [r7, #4]
 800164c:	466d      	mov	r5, sp
 800164e:	f106 0410 	add.w	r4, r6, #16
 8001652:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001654:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001658:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800165a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800165e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001662:	1d33      	adds	r3, r6, #4
 8001664:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001666:	6838      	ldr	r0, [r7, #0]
 8001668:	f003 fc40 	bl	8004eec <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	2201      	movs	r2, #1
 8001670:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800167e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 800167e:	b590      	push	{r4, r7, lr}
 8001680:	b089      	sub	sp, #36	; 0x24
 8001682:	af04      	add	r7, sp, #16
 8001684:	6078      	str	r0, [r7, #4]
 8001686:	4608      	mov	r0, r1
 8001688:	4611      	mov	r1, r2
 800168a:	461a      	mov	r2, r3
 800168c:	4603      	mov	r3, r0
 800168e:	70fb      	strb	r3, [r7, #3]
 8001690:	460b      	mov	r3, r1
 8001692:	70bb      	strb	r3, [r7, #2]
 8001694:	4613      	mov	r3, r2
 8001696:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 800169e:	2b01      	cmp	r3, #1
 80016a0:	d101      	bne.n	80016a6 <HAL_HCD_HC_Init+0x28>
 80016a2:	2302      	movs	r3, #2
 80016a4:	e07f      	b.n	80017a6 <HAL_HCD_HC_Init+0x128>
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2201      	movs	r2, #1
 80016aa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  hhcd->hc[ch_num].do_ping = 0U;
 80016ae:	78fa      	ldrb	r2, [r7, #3]
 80016b0:	6879      	ldr	r1, [r7, #4]
 80016b2:	4613      	mov	r3, r2
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	4413      	add	r3, r2
 80016b8:	00db      	lsls	r3, r3, #3
 80016ba:	440b      	add	r3, r1
 80016bc:	333d      	adds	r3, #61	; 0x3d
 80016be:	2200      	movs	r2, #0
 80016c0:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80016c2:	78fa      	ldrb	r2, [r7, #3]
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	00db      	lsls	r3, r3, #3
 80016ce:	440b      	add	r3, r1
 80016d0:	3338      	adds	r3, #56	; 0x38
 80016d2:	787a      	ldrb	r2, [r7, #1]
 80016d4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 80016d6:	78fa      	ldrb	r2, [r7, #3]
 80016d8:	6879      	ldr	r1, [r7, #4]
 80016da:	4613      	mov	r3, r2
 80016dc:	009b      	lsls	r3, r3, #2
 80016de:	4413      	add	r3, r2
 80016e0:	00db      	lsls	r3, r3, #3
 80016e2:	440b      	add	r3, r1
 80016e4:	3340      	adds	r3, #64	; 0x40
 80016e6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80016e8:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80016ea:	78fa      	ldrb	r2, [r7, #3]
 80016ec:	6879      	ldr	r1, [r7, #4]
 80016ee:	4613      	mov	r3, r2
 80016f0:	009b      	lsls	r3, r3, #2
 80016f2:	4413      	add	r3, r2
 80016f4:	00db      	lsls	r3, r3, #3
 80016f6:	440b      	add	r3, r1
 80016f8:	3339      	adds	r3, #57	; 0x39
 80016fa:	78fa      	ldrb	r2, [r7, #3]
 80016fc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80016fe:	78fa      	ldrb	r2, [r7, #3]
 8001700:	6879      	ldr	r1, [r7, #4]
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	00db      	lsls	r3, r3, #3
 800170a:	440b      	add	r3, r1
 800170c:	333f      	adds	r3, #63	; 0x3f
 800170e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	78bb      	ldrb	r3, [r7, #2]
 8001718:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800171c:	b2d8      	uxtb	r0, r3
 800171e:	6879      	ldr	r1, [r7, #4]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	00db      	lsls	r3, r3, #3
 8001728:	440b      	add	r3, r1
 800172a:	333a      	adds	r3, #58	; 0x3a
 800172c:	4602      	mov	r2, r0
 800172e:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001730:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001734:	2b00      	cmp	r3, #0
 8001736:	da0a      	bge.n	800174e <HAL_HCD_HC_Init+0xd0>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001738:	78fa      	ldrb	r2, [r7, #3]
 800173a:	6879      	ldr	r1, [r7, #4]
 800173c:	4613      	mov	r3, r2
 800173e:	009b      	lsls	r3, r3, #2
 8001740:	4413      	add	r3, r2
 8001742:	00db      	lsls	r3, r3, #3
 8001744:	440b      	add	r3, r1
 8001746:	333b      	adds	r3, #59	; 0x3b
 8001748:	2201      	movs	r2, #1
 800174a:	701a      	strb	r2, [r3, #0]
 800174c:	e009      	b.n	8001762 <HAL_HCD_HC_Init+0xe4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800174e:	78fa      	ldrb	r2, [r7, #3]
 8001750:	6879      	ldr	r1, [r7, #4]
 8001752:	4613      	mov	r3, r2
 8001754:	009b      	lsls	r3, r3, #2
 8001756:	4413      	add	r3, r2
 8001758:	00db      	lsls	r3, r3, #3
 800175a:	440b      	add	r3, r1
 800175c:	333b      	adds	r3, #59	; 0x3b
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001762:	78fa      	ldrb	r2, [r7, #3]
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	4613      	mov	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	00db      	lsls	r3, r3, #3
 800176e:	440b      	add	r3, r1
 8001770:	333c      	adds	r3, #60	; 0x3c
 8001772:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001776:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	6818      	ldr	r0, [r3, #0]
 800177c:	787c      	ldrb	r4, [r7, #1]
 800177e:	78ba      	ldrb	r2, [r7, #2]
 8001780:	78f9      	ldrb	r1, [r7, #3]
 8001782:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001784:	9302      	str	r3, [sp, #8]
 8001786:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800178a:	9301      	str	r3, [sp, #4]
 800178c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001790:	9300      	str	r3, [sp, #0]
 8001792:	4623      	mov	r3, r4
 8001794:	f003 fd20 	bl	80051d8 <USB_HC_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2200      	movs	r2, #0
 80017a0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	3714      	adds	r7, #20
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd90      	pop	{r4, r7, pc}

080017ae <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b084      	sub	sp, #16
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
 80017b6:	460b      	mov	r3, r1
 80017b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d101      	bne.n	80017cc <HAL_HCD_HC_Halt+0x1e>
 80017c8:	2302      	movs	r3, #2
 80017ca:	e00f      	b.n	80017ec <HAL_HCD_HC_Halt+0x3e>
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2201      	movs	r2, #1
 80017d0:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	78fa      	ldrb	r2, [r7, #3]
 80017da:	4611      	mov	r1, r2
 80017dc:	4618      	mov	r0, r3
 80017de:	f003 ff5a 	bl	8005696 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return status;
 80017ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}

080017f4 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4603      	mov	r3, r0
 8001804:	70fb      	strb	r3, [r7, #3]
 8001806:	460b      	mov	r3, r1
 8001808:	70bb      	strb	r3, [r7, #2]
 800180a:	4613      	mov	r3, r2
 800180c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800180e:	78fa      	ldrb	r2, [r7, #3]
 8001810:	6879      	ldr	r1, [r7, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	00db      	lsls	r3, r3, #3
 800181a:	440b      	add	r3, r1
 800181c:	333b      	adds	r3, #59	; 0x3b
 800181e:	78ba      	ldrb	r2, [r7, #2]
 8001820:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001822:	78fa      	ldrb	r2, [r7, #3]
 8001824:	6879      	ldr	r1, [r7, #4]
 8001826:	4613      	mov	r3, r2
 8001828:	009b      	lsls	r3, r3, #2
 800182a:	4413      	add	r3, r2
 800182c:	00db      	lsls	r3, r3, #3
 800182e:	440b      	add	r3, r1
 8001830:	333f      	adds	r3, #63	; 0x3f
 8001832:	787a      	ldrb	r2, [r7, #1]
 8001834:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001836:	7c3b      	ldrb	r3, [r7, #16]
 8001838:	2b00      	cmp	r3, #0
 800183a:	d114      	bne.n	8001866 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800183c:	78fa      	ldrb	r2, [r7, #3]
 800183e:	6879      	ldr	r1, [r7, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	00db      	lsls	r3, r3, #3
 8001848:	440b      	add	r3, r1
 800184a:	3342      	adds	r3, #66	; 0x42
 800184c:	2203      	movs	r2, #3
 800184e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001850:	78fa      	ldrb	r2, [r7, #3]
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	4613      	mov	r3, r2
 8001856:	009b      	lsls	r3, r3, #2
 8001858:	4413      	add	r3, r2
 800185a:	00db      	lsls	r3, r3, #3
 800185c:	440b      	add	r3, r1
 800185e:	333d      	adds	r3, #61	; 0x3d
 8001860:	7f3a      	ldrb	r2, [r7, #28]
 8001862:	701a      	strb	r2, [r3, #0]
 8001864:	e009      	b.n	800187a <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001866:	78fa      	ldrb	r2, [r7, #3]
 8001868:	6879      	ldr	r1, [r7, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	00db      	lsls	r3, r3, #3
 8001872:	440b      	add	r3, r1
 8001874:	3342      	adds	r3, #66	; 0x42
 8001876:	2202      	movs	r2, #2
 8001878:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800187a:	787b      	ldrb	r3, [r7, #1]
 800187c:	2b03      	cmp	r3, #3
 800187e:	f200 80d6 	bhi.w	8001a2e <HAL_HCD_HC_SubmitRequest+0x23a>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <HAL_HCD_HC_SubmitRequest+0x94>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001899 	.word	0x08001899
 800188c:	08001a19 	.word	0x08001a19
 8001890:	08001905 	.word	0x08001905
 8001894:	0800198f 	.word	0x0800198f
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001898:	7c3b      	ldrb	r3, [r7, #16]
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 80c9 	bne.w	8001a32 <HAL_HCD_HC_SubmitRequest+0x23e>
 80018a0:	78bb      	ldrb	r3, [r7, #2]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	f040 80c5 	bne.w	8001a32 <HAL_HCD_HC_SubmitRequest+0x23e>
      {
        if (length == 0U)
 80018a8:	8b3b      	ldrh	r3, [r7, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d109      	bne.n	80018c2 <HAL_HCD_HC_SubmitRequest+0xce>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80018ae:	78fa      	ldrb	r2, [r7, #3]
 80018b0:	6879      	ldr	r1, [r7, #4]
 80018b2:	4613      	mov	r3, r2
 80018b4:	009b      	lsls	r3, r3, #2
 80018b6:	4413      	add	r3, r2
 80018b8:	00db      	lsls	r3, r3, #3
 80018ba:	440b      	add	r3, r1
 80018bc:	3351      	adds	r3, #81	; 0x51
 80018be:	2201      	movs	r2, #1
 80018c0:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80018c2:	78fa      	ldrb	r2, [r7, #3]
 80018c4:	6879      	ldr	r1, [r7, #4]
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	440b      	add	r3, r1
 80018d0:	3351      	adds	r3, #81	; 0x51
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d10a      	bne.n	80018ee <HAL_HCD_HC_SubmitRequest+0xfa>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	6879      	ldr	r1, [r7, #4]
 80018dc:	4613      	mov	r3, r2
 80018de:	009b      	lsls	r3, r3, #2
 80018e0:	4413      	add	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	440b      	add	r3, r1
 80018e6:	3342      	adds	r3, #66	; 0x42
 80018e8:	2200      	movs	r2, #0
 80018ea:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80018ec:	e0a1      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x23e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80018ee:	78fa      	ldrb	r2, [r7, #3]
 80018f0:	6879      	ldr	r1, [r7, #4]
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	00db      	lsls	r3, r3, #3
 80018fa:	440b      	add	r3, r1
 80018fc:	3342      	adds	r3, #66	; 0x42
 80018fe:	2202      	movs	r2, #2
 8001900:	701a      	strb	r2, [r3, #0]
      break;
 8001902:	e096      	b.n	8001a32 <HAL_HCD_HC_SubmitRequest+0x23e>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001904:	78bb      	ldrb	r3, [r7, #2]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d120      	bne.n	800194c <HAL_HCD_HC_SubmitRequest+0x158>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800190a:	78fa      	ldrb	r2, [r7, #3]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	3351      	adds	r3, #81	; 0x51
 800191a:	781b      	ldrb	r3, [r3, #0]
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10a      	bne.n	8001936 <HAL_HCD_HC_SubmitRequest+0x142>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001920:	78fa      	ldrb	r2, [r7, #3]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	3342      	adds	r3, #66	; 0x42
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001934:	e07e      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001936:	78fa      	ldrb	r2, [r7, #3]
 8001938:	6879      	ldr	r1, [r7, #4]
 800193a:	4613      	mov	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	4413      	add	r3, r2
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	440b      	add	r3, r1
 8001944:	3342      	adds	r3, #66	; 0x42
 8001946:	2202      	movs	r2, #2
 8001948:	701a      	strb	r2, [r3, #0]
      break;
 800194a:	e073      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	6879      	ldr	r1, [r7, #4]
 8001950:	4613      	mov	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	4413      	add	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	440b      	add	r3, r1
 800195a:	3350      	adds	r3, #80	; 0x50
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d10a      	bne.n	8001978 <HAL_HCD_HC_SubmitRequest+0x184>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001962:	78fa      	ldrb	r2, [r7, #3]
 8001964:	6879      	ldr	r1, [r7, #4]
 8001966:	4613      	mov	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	4413      	add	r3, r2
 800196c:	00db      	lsls	r3, r3, #3
 800196e:	440b      	add	r3, r1
 8001970:	3342      	adds	r3, #66	; 0x42
 8001972:	2200      	movs	r2, #0
 8001974:	701a      	strb	r2, [r3, #0]
      break;
 8001976:	e05d      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001978:	78fa      	ldrb	r2, [r7, #3]
 800197a:	6879      	ldr	r1, [r7, #4]
 800197c:	4613      	mov	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	00db      	lsls	r3, r3, #3
 8001984:	440b      	add	r3, r1
 8001986:	3342      	adds	r3, #66	; 0x42
 8001988:	2202      	movs	r2, #2
 800198a:	701a      	strb	r2, [r3, #0]
      break;
 800198c:	e052      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800198e:	78bb      	ldrb	r3, [r7, #2]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d120      	bne.n	80019d6 <HAL_HCD_HC_SubmitRequest+0x1e2>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001994:	78fa      	ldrb	r2, [r7, #3]
 8001996:	6879      	ldr	r1, [r7, #4]
 8001998:	4613      	mov	r3, r2
 800199a:	009b      	lsls	r3, r3, #2
 800199c:	4413      	add	r3, r2
 800199e:	00db      	lsls	r3, r3, #3
 80019a0:	440b      	add	r3, r1
 80019a2:	3351      	adds	r3, #81	; 0x51
 80019a4:	781b      	ldrb	r3, [r3, #0]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d10a      	bne.n	80019c0 <HAL_HCD_HC_SubmitRequest+0x1cc>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019aa:	78fa      	ldrb	r2, [r7, #3]
 80019ac:	6879      	ldr	r1, [r7, #4]
 80019ae:	4613      	mov	r3, r2
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	4413      	add	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	440b      	add	r3, r1
 80019b8:	3342      	adds	r3, #66	; 0x42
 80019ba:	2200      	movs	r2, #0
 80019bc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80019be:	e039      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80019c0:	78fa      	ldrb	r2, [r7, #3]
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	00db      	lsls	r3, r3, #3
 80019cc:	440b      	add	r3, r1
 80019ce:	3342      	adds	r3, #66	; 0x42
 80019d0:	2202      	movs	r2, #2
 80019d2:	701a      	strb	r2, [r3, #0]
      break;
 80019d4:	e02e      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80019d6:	78fa      	ldrb	r2, [r7, #3]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	009b      	lsls	r3, r3, #2
 80019de:	4413      	add	r3, r2
 80019e0:	00db      	lsls	r3, r3, #3
 80019e2:	440b      	add	r3, r1
 80019e4:	3350      	adds	r3, #80	; 0x50
 80019e6:	781b      	ldrb	r3, [r3, #0]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d10a      	bne.n	8001a02 <HAL_HCD_HC_SubmitRequest+0x20e>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80019ec:	78fa      	ldrb	r2, [r7, #3]
 80019ee:	6879      	ldr	r1, [r7, #4]
 80019f0:	4613      	mov	r3, r2
 80019f2:	009b      	lsls	r3, r3, #2
 80019f4:	4413      	add	r3, r2
 80019f6:	00db      	lsls	r3, r3, #3
 80019f8:	440b      	add	r3, r1
 80019fa:	3342      	adds	r3, #66	; 0x42
 80019fc:	2200      	movs	r2, #0
 80019fe:	701a      	strb	r2, [r3, #0]
      break;
 8001a00:	e018      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a02:	78fa      	ldrb	r2, [r7, #3]
 8001a04:	6879      	ldr	r1, [r7, #4]
 8001a06:	4613      	mov	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	4413      	add	r3, r2
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	440b      	add	r3, r1
 8001a10:	3342      	adds	r3, #66	; 0x42
 8001a12:	2202      	movs	r2, #2
 8001a14:	701a      	strb	r2, [r3, #0]
      break;
 8001a16:	e00d      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001a18:	78fa      	ldrb	r2, [r7, #3]
 8001a1a:	6879      	ldr	r1, [r7, #4]
 8001a1c:	4613      	mov	r3, r2
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4413      	add	r3, r2
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	440b      	add	r3, r1
 8001a26:	3342      	adds	r3, #66	; 0x42
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
      break;
 8001a2c:	e002      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>

    default:
      break;
 8001a2e:	bf00      	nop
 8001a30:	e000      	b.n	8001a34 <HAL_HCD_HC_SubmitRequest+0x240>
      break;
 8001a32:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001a34:	78fa      	ldrb	r2, [r7, #3]
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	4413      	add	r3, r2
 8001a3e:	00db      	lsls	r3, r3, #3
 8001a40:	440b      	add	r3, r1
 8001a42:	3344      	adds	r3, #68	; 0x44
 8001a44:	697a      	ldr	r2, [r7, #20]
 8001a46:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001a48:	78fa      	ldrb	r2, [r7, #3]
 8001a4a:	8b39      	ldrh	r1, [r7, #24]
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	4613      	mov	r3, r2
 8001a50:	009b      	lsls	r3, r3, #2
 8001a52:	4413      	add	r3, r2
 8001a54:	00db      	lsls	r3, r3, #3
 8001a56:	4403      	add	r3, r0
 8001a58:	3348      	adds	r3, #72	; 0x48
 8001a5a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001a5c:	78fa      	ldrb	r2, [r7, #3]
 8001a5e:	6879      	ldr	r1, [r7, #4]
 8001a60:	4613      	mov	r3, r2
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	4413      	add	r3, r2
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	440b      	add	r3, r1
 8001a6a:	335c      	adds	r3, #92	; 0x5c
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001a70:	78fa      	ldrb	r2, [r7, #3]
 8001a72:	6879      	ldr	r1, [r7, #4]
 8001a74:	4613      	mov	r3, r2
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	4413      	add	r3, r2
 8001a7a:	00db      	lsls	r3, r3, #3
 8001a7c:	440b      	add	r3, r1
 8001a7e:	334c      	adds	r3, #76	; 0x4c
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001a84:	78fa      	ldrb	r2, [r7, #3]
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	4613      	mov	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	4413      	add	r3, r2
 8001a8e:	00db      	lsls	r3, r3, #3
 8001a90:	440b      	add	r3, r1
 8001a92:	3339      	adds	r3, #57	; 0x39
 8001a94:	78fa      	ldrb	r2, [r7, #3]
 8001a96:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001a98:	78fa      	ldrb	r2, [r7, #3]
 8001a9a:	6879      	ldr	r1, [r7, #4]
 8001a9c:	4613      	mov	r3, r2
 8001a9e:	009b      	lsls	r3, r3, #2
 8001aa0:	4413      	add	r3, r2
 8001aa2:	00db      	lsls	r3, r3, #3
 8001aa4:	440b      	add	r3, r1
 8001aa6:	335d      	adds	r3, #93	; 0x5d
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6818      	ldr	r0, [r3, #0]
 8001ab0:	78fa      	ldrb	r2, [r7, #3]
 8001ab2:	4613      	mov	r3, r2
 8001ab4:	009b      	lsls	r3, r3, #2
 8001ab6:	4413      	add	r3, r2
 8001ab8:	00db      	lsls	r3, r3, #3
 8001aba:	3338      	adds	r3, #56	; 0x38
 8001abc:	687a      	ldr	r2, [r7, #4]
 8001abe:	18d1      	adds	r1, r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	691b      	ldr	r3, [r3, #16]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	f003 fc90 	bl	80053ec <USB_HC_StartXfer>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop

08001ad8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b086      	sub	sp, #24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	60fb      	str	r3, [r7, #12]
  uint32_t i, interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f003 f9b9 	bl	8004e66 <USB_GetMode>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b01      	cmp	r3, #1
 8001af8:	f040 80ef 	bne.w	8001cda <HAL_HCD_IRQHandler+0x202>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4618      	mov	r0, r3
 8001b02:	f003 f99d 	bl	8004e40 <USB_ReadInterrupts>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f000 80e5 	beq.w	8001cd8 <HAL_HCD_IRQHandler+0x200>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4618      	mov	r0, r3
 8001b14:	f003 f994 	bl	8004e40 <USB_ReadInterrupts>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b1e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b22:	d104      	bne.n	8001b2e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001b2c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 f984 	bl	8004e40 <USB_ReadInterrupts>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001b42:	d104      	bne.n	8001b4e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001b4c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f003 f974 	bl	8004e40 <USB_ReadInterrupts>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001b5e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001b62:	d104      	bne.n	8001b6e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001b6c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4618      	mov	r0, r3
 8001b74:	f003 f964 	bl	8004e40 <USB_ReadInterrupts>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	f003 0302 	and.w	r3, r3, #2
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d103      	bne.n	8001b8a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	2202      	movs	r2, #2
 8001b88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f003 f956 	bl	8004e40 <USB_ReadInterrupts>
 8001b94:	4603      	mov	r3, r0
 8001b96:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b9a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b9e:	d115      	bne.n	8001bcc <HAL_HCD_IRQHandler+0xf4>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001ba8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	f003 0301 	and.w	r3, r3, #1
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d108      	bne.n	8001bcc <HAL_HCD_IRQHandler+0xf4>
      {
        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f009 fc16 	bl	800b3ec <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2101      	movs	r1, #1
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f003 fa40 	bl	800504c <USB_InitFSLSPClkSel>
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f003 f935 	bl	8004e40 <USB_ReadInterrupts>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bdc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001be0:	d102      	bne.n	8001be8 <HAL_HCD_IRQHandler+0x110>
    {
      HCD_Port_IRQHandler(hhcd);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f001 f966 	bl	8002eb4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f003 f927 	bl	8004e40 <USB_ReadInterrupts>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	f003 0308 	and.w	r3, r3, #8
 8001bf8:	2b08      	cmp	r3, #8
 8001bfa:	d106      	bne.n	8001c0a <HAL_HCD_IRQHandler+0x132>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f009 fbd9 	bl	800b3b4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2208      	movs	r2, #8
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f003 f916 	bl	8004e40 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c1a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c1e:	d138      	bne.n	8001c92 <HAL_HCD_IRQHandler+0x1ba>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f003 fd25 	bl	8005674 <USB_HC_ReadInterrupt>
 8001c2a:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	617b      	str	r3, [r7, #20]
 8001c30:	e025      	b.n	8001c7e <HAL_HCD_IRQHandler+0x1a6>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001c32:	697b      	ldr	r3, [r7, #20]
 8001c34:	f003 030f 	and.w	r3, r3, #15
 8001c38:	68ba      	ldr	r2, [r7, #8]
 8001c3a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d018      	beq.n	8001c78 <HAL_HCD_IRQHandler+0x1a0>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	015a      	lsls	r2, r3, #5
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001c58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001c5c:	d106      	bne.n	8001c6c <HAL_HCD_IRQHandler+0x194>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	4619      	mov	r1, r3
 8001c64:	6878      	ldr	r0, [r7, #4]
 8001c66:	f000 f8cf 	bl	8001e08 <HCD_HC_IN_IRQHandler>
 8001c6a:	e005      	b.n	8001c78 <HAL_HCD_IRQHandler+0x1a0>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	4619      	mov	r1, r3
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f000 fcfd 	bl	8002672 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001c78:	697b      	ldr	r3, [r7, #20]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	697a      	ldr	r2, [r7, #20]
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d3d4      	bcc.n	8001c32 <HAL_HCD_IRQHandler+0x15a>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f003 f8d2 	bl	8004e40 <USB_ReadInterrupts>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	f003 0310 	and.w	r3, r3, #16
 8001ca2:	2b10      	cmp	r3, #16
 8001ca4:	d101      	bne.n	8001caa <HAL_HCD_IRQHandler+0x1d2>
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e000      	b.n	8001cac <HAL_HCD_IRQHandler+0x1d4>
 8001caa:	2300      	movs	r3, #0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d014      	beq.n	8001cda <HAL_HCD_IRQHandler+0x202>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699a      	ldr	r2, [r3, #24]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f022 0210 	bic.w	r2, r2, #16
 8001cbe:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001cc0:	6878      	ldr	r0, [r7, #4]
 8001cc2:	f001 f84b 	bl	8002d5c <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	699a      	ldr	r2, [r3, #24]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f042 0210 	orr.w	r2, r2, #16
 8001cd4:	619a      	str	r2, [r3, #24]
 8001cd6:	e000      	b.n	8001cda <HAL_HCD_IRQHandler+0x202>
      return;
 8001cd8:	bf00      	nop
    }
  }
}
 8001cda:	3718      	adds	r7, #24
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d101      	bne.n	8001cf6 <HAL_HCD_Start+0x16>
 8001cf2:	2302      	movs	r3, #2
 8001cf4:	e013      	b.n	8001d1e <HAL_HCD_Start+0x3e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  __HAL_HCD_ENABLE(hhcd);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f002 ffaa 	bl	8004c5c <USB_EnableGlobalInt>
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	2101      	movs	r1, #1
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f003 fa00 	bl	8005114 <USB_DriveVbus>
  __HAL_UNLOCK(hhcd);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2200      	movs	r2, #0
 8001d18:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001d26:	b580      	push	{r7, lr}
 8001d28:	b082      	sub	sp, #8
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	f893 32b8 	ldrb.w	r3, [r3, #696]	; 0x2b8
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d101      	bne.n	8001d3c <HAL_HCD_Stop+0x16>
 8001d38:	2302      	movs	r3, #2
 8001d3a:	e00d      	b.n	8001d58 <HAL_HCD_Stop+0x32>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8
  (void)USB_StopHost(hhcd->Instance);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f003 fddf 	bl	800590c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 f9a7 	bl	80050c0 <USB_ResetPort>
 8001d72:	4603      	mov	r3, r0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3708      	adds	r7, #8
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	460b      	mov	r3, r1
 8001d86:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001d88:	78fa      	ldrb	r2, [r7, #3]
 8001d8a:	6879      	ldr	r1, [r7, #4]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	009b      	lsls	r3, r3, #2
 8001d90:	4413      	add	r3, r2
 8001d92:	00db      	lsls	r3, r3, #3
 8001d94:	440b      	add	r3, r1
 8001d96:	335c      	adds	r3, #92	; 0x5c
 8001d98:	781b      	ldrb	r3, [r3, #0]
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	460b      	mov	r3, r1
 8001db0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001db2:	78fa      	ldrb	r2, [r7, #3]
 8001db4:	6879      	ldr	r1, [r7, #4]
 8001db6:	4613      	mov	r3, r2
 8001db8:	009b      	lsls	r3, r3, #2
 8001dba:	4413      	add	r3, r2
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	440b      	add	r3, r1
 8001dc0:	334c      	adds	r3, #76	; 0x4c
 8001dc2:	681b      	ldr	r3, [r3, #0]
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	370c      	adds	r7, #12
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dce:	4770      	bx	lr

08001dd0 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f9e9 	bl	80051b4 <USB_GetCurrentFrame>
 8001de2:	4603      	mov	r3, r0
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	3708      	adds	r7, #8
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}

08001dec <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f003 f9c4 	bl	8005186 <USB_GetHostSpeed>
 8001dfe:	4603      	mov	r3, r0
}
 8001e00:	4618      	mov	r0, r3
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b086      	sub	sp, #24
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	460b      	mov	r3, r1
 8001e12:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001e1e:	78fb      	ldrb	r3, [r7, #3]
 8001e20:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	015a      	lsls	r2, r3, #5
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4413      	add	r3, r2
 8001e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0304 	and.w	r3, r3, #4
 8001e34:	2b04      	cmp	r3, #4
 8001e36:	d119      	bne.n	8001e6c <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	015a      	lsls	r2, r3, #5
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4413      	add	r3, r2
 8001e40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e44:	461a      	mov	r2, r3
 8001e46:	2304      	movs	r3, #4
 8001e48:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	015a      	lsls	r2, r3, #5
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4413      	add	r3, r2
 8001e52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e56:	68db      	ldr	r3, [r3, #12]
 8001e58:	68fa      	ldr	r2, [r7, #12]
 8001e5a:	0151      	lsls	r1, r2, #5
 8001e5c:	693a      	ldr	r2, [r7, #16]
 8001e5e:	440a      	add	r2, r1
 8001e60:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001e64:	f043 0302 	orr.w	r3, r3, #2
 8001e68:	60d3      	str	r3, [r2, #12]
 8001e6a:	e0ce      	b.n	800200a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	015a      	lsls	r2, r3, #5
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	4413      	add	r3, r2
 8001e74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e78:	689b      	ldr	r3, [r3, #8]
 8001e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e82:	d12c      	bne.n	8001ede <HCD_HC_IN_IRQHandler+0xd6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	015a      	lsls	r2, r3, #5
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e90:	461a      	mov	r2, r3
 8001e92:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e96:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8001e98:	6879      	ldr	r1, [r7, #4]
 8001e9a:	68fa      	ldr	r2, [r7, #12]
 8001e9c:	4613      	mov	r3, r2
 8001e9e:	009b      	lsls	r3, r3, #2
 8001ea0:	4413      	add	r3, r2
 8001ea2:	00db      	lsls	r3, r3, #3
 8001ea4:	440b      	add	r3, r1
 8001ea6:	335d      	adds	r3, #93	; 0x5d
 8001ea8:	2207      	movs	r2, #7
 8001eaa:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	015a      	lsls	r2, r3, #5
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	0151      	lsls	r1, r2, #5
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	440a      	add	r2, r1
 8001ec2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001ec6:	f043 0302 	orr.w	r3, r3, #2
 8001eca:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	b2d2      	uxtb	r2, r2
 8001ed4:	4611      	mov	r1, r2
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f003 fbdd 	bl	8005696 <USB_HC_Halt>
 8001edc:	e095      	b.n	800200a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	693b      	ldr	r3, [r7, #16]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 0320 	and.w	r3, r3, #32
 8001ef0:	2b20      	cmp	r3, #32
 8001ef2:	d109      	bne.n	8001f08 <HCD_HC_IN_IRQHandler+0x100>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	015a      	lsls	r2, r3, #5
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4413      	add	r3, r2
 8001efc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f00:	461a      	mov	r2, r3
 8001f02:	2320      	movs	r3, #32
 8001f04:	6093      	str	r3, [r2, #8]
 8001f06:	e080      	b.n	800200a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	015a      	lsls	r2, r3, #5
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	4413      	add	r3, r2
 8001f10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f14:	689b      	ldr	r3, [r3, #8]
 8001f16:	f003 0308 	and.w	r3, r3, #8
 8001f1a:	2b08      	cmp	r3, #8
 8001f1c:	d134      	bne.n	8001f88 <HCD_HC_IN_IRQHandler+0x180>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	015a      	lsls	r2, r3, #5
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4413      	add	r3, r2
 8001f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f2a:	68db      	ldr	r3, [r3, #12]
 8001f2c:	68fa      	ldr	r2, [r7, #12]
 8001f2e:	0151      	lsls	r1, r2, #5
 8001f30:	693a      	ldr	r2, [r7, #16]
 8001f32:	440a      	add	r2, r1
 8001f34:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].state = HC_STALL;
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4613      	mov	r3, r2
 8001f44:	009b      	lsls	r3, r3, #2
 8001f46:	4413      	add	r3, r2
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	440b      	add	r3, r1
 8001f4c:	335d      	adds	r3, #93	; 0x5d
 8001f4e:	2205      	movs	r2, #5
 8001f50:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	015a      	lsls	r2, r3, #5
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4413      	add	r3, r2
 8001f5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f5e:	461a      	mov	r2, r3
 8001f60:	2310      	movs	r3, #16
 8001f62:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	015a      	lsls	r2, r3, #5
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f70:	461a      	mov	r2, r3
 8001f72:	2308      	movs	r3, #8
 8001f74:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68fa      	ldr	r2, [r7, #12]
 8001f7c:	b2d2      	uxtb	r2, r2
 8001f7e:	4611      	mov	r1, r2
 8001f80:	4618      	mov	r0, r3
 8001f82:	f003 fb88 	bl	8005696 <USB_HC_Halt>
 8001f86:	e040      	b.n	800200a <HCD_HC_IN_IRQHandler+0x202>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	015a      	lsls	r2, r3, #5
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	4413      	add	r3, r2
 8001f90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9e:	d134      	bne.n	800200a <HCD_HC_IN_IRQHandler+0x202>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	015a      	lsls	r2, r3, #5
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fac:	68db      	ldr	r3, [r3, #12]
 8001fae:	68fa      	ldr	r2, [r7, #12]
 8001fb0:	0151      	lsls	r1, r2, #5
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	440a      	add	r2, r1
 8001fb6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8001fba:	f043 0302 	orr.w	r3, r3, #2
 8001fbe:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	68fa      	ldr	r2, [r7, #12]
 8001fc6:	b2d2      	uxtb	r2, r2
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 fb63 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	015a      	lsls	r2, r3, #5
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	4413      	add	r3, r2
 8001fd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fdc:	461a      	mov	r2, r3
 8001fde:	2310      	movs	r3, #16
 8001fe0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8001fe2:	6879      	ldr	r1, [r7, #4]
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	00db      	lsls	r3, r3, #3
 8001fee:	440b      	add	r3, r1
 8001ff0:	335d      	adds	r3, #93	; 0x5d
 8001ff2:	2208      	movs	r2, #8
 8001ff4:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002002:	461a      	mov	r2, r3
 8002004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002008:	6093      	str	r3, [r2, #8]
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	015a      	lsls	r2, r3, #5
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	4413      	add	r3, r2
 8002012:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002016:	689b      	ldr	r3, [r3, #8]
 8002018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800201c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002020:	d122      	bne.n	8002068 <HCD_HC_IN_IRQHandler+0x260>
  {
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	015a      	lsls	r2, r3, #5
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	4413      	add	r3, r2
 800202a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	68fa      	ldr	r2, [r7, #12]
 8002032:	0151      	lsls	r1, r2, #5
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	440a      	add	r2, r1
 8002038:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	68fa      	ldr	r2, [r7, #12]
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	4611      	mov	r1, r2
 800204c:	4618      	mov	r0, r3
 800204e:	f003 fb22 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	015a      	lsls	r2, r3, #5
 8002056:	693b      	ldr	r3, [r7, #16]
 8002058:	4413      	add	r3, r2
 800205a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800205e:	461a      	mov	r2, r3
 8002060:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002064:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002066:	e300      	b.n	800266a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	015a      	lsls	r2, r3, #5
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	4413      	add	r3, r2
 8002070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	2b01      	cmp	r3, #1
 800207c:	f040 80fd 	bne.w	800227a <HCD_HC_IN_IRQHandler+0x472>
    if (hhcd->Init.dma_enable != 0U)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	691b      	ldr	r3, [r3, #16]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d01b      	beq.n	80020c0 <HCD_HC_IN_IRQHandler+0x2b8>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 8002088:	6879      	ldr	r1, [r7, #4]
 800208a:	68fa      	ldr	r2, [r7, #12]
 800208c:	4613      	mov	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	4413      	add	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	440b      	add	r3, r1
 8002096:	3348      	adds	r3, #72	; 0x48
 8002098:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	0159      	lsls	r1, r3, #5
 800209e:	693b      	ldr	r3, [r7, #16]
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020a6:	691b      	ldr	r3, [r3, #16]
 80020a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].xfer_len - \
 80020ac:	1ad1      	subs	r1, r2, r3
 80020ae:	6878      	ldr	r0, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4613      	mov	r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	4413      	add	r3, r2
 80020b8:	00db      	lsls	r3, r3, #3
 80020ba:	4403      	add	r3, r0
 80020bc:	334c      	adds	r3, #76	; 0x4c
 80020be:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 80020c0:	6879      	ldr	r1, [r7, #4]
 80020c2:	68fa      	ldr	r2, [r7, #12]
 80020c4:	4613      	mov	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	4413      	add	r3, r2
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	440b      	add	r3, r1
 80020ce:	335d      	adds	r3, #93	; 0x5d
 80020d0:	2201      	movs	r2, #1
 80020d2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	68fa      	ldr	r2, [r7, #12]
 80020d8:	4613      	mov	r3, r2
 80020da:	009b      	lsls	r3, r3, #2
 80020dc:	4413      	add	r3, r2
 80020de:	00db      	lsls	r3, r3, #3
 80020e0:	440b      	add	r3, r1
 80020e2:	3358      	adds	r3, #88	; 0x58
 80020e4:	2200      	movs	r2, #0
 80020e6:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	693b      	ldr	r3, [r7, #16]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80020fa:	6879      	ldr	r1, [r7, #4]
 80020fc:	68fa      	ldr	r2, [r7, #12]
 80020fe:	4613      	mov	r3, r2
 8002100:	009b      	lsls	r3, r3, #2
 8002102:	4413      	add	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	440b      	add	r3, r1
 8002108:	333f      	adds	r3, #63	; 0x3f
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d00a      	beq.n	8002126 <HCD_HC_IN_IRQHandler+0x31e>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002110:	6879      	ldr	r1, [r7, #4]
 8002112:	68fa      	ldr	r2, [r7, #12]
 8002114:	4613      	mov	r3, r2
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	4413      	add	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	440b      	add	r3, r1
 800211e:	333f      	adds	r3, #63	; 0x3f
 8002120:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002122:	2b02      	cmp	r3, #2
 8002124:	d121      	bne.n	800216a <HCD_HC_IN_IRQHandler+0x362>
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	015a      	lsls	r2, r3, #5
 800212a:	693b      	ldr	r3, [r7, #16]
 800212c:	4413      	add	r3, r2
 800212e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002132:	68db      	ldr	r3, [r3, #12]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	0151      	lsls	r1, r2, #5
 8002138:	693a      	ldr	r2, [r7, #16]
 800213a:	440a      	add	r2, r1
 800213c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002140:	f043 0302 	orr.w	r3, r3, #2
 8002144:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	b2d2      	uxtb	r2, r2
 800214e:	4611      	mov	r1, r2
 8002150:	4618      	mov	r0, r3
 8002152:	f003 faa0 	bl	8005696 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	015a      	lsls	r2, r3, #5
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4413      	add	r3, r2
 800215e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002162:	461a      	mov	r2, r3
 8002164:	2310      	movs	r3, #16
 8002166:	6093      	str	r3, [r2, #8]
 8002168:	e070      	b.n	800224c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800216a:	6879      	ldr	r1, [r7, #4]
 800216c:	68fa      	ldr	r2, [r7, #12]
 800216e:	4613      	mov	r3, r2
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	4413      	add	r3, r2
 8002174:	00db      	lsls	r3, r3, #3
 8002176:	440b      	add	r3, r1
 8002178:	333f      	adds	r3, #63	; 0x3f
 800217a:	781b      	ldrb	r3, [r3, #0]
 800217c:	2b03      	cmp	r3, #3
 800217e:	d12a      	bne.n	80021d6 <HCD_HC_IN_IRQHandler+0x3ce>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	015a      	lsls	r2, r3, #5
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	4413      	add	r3, r2
 8002188:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	68fa      	ldr	r2, [r7, #12]
 8002190:	0151      	lsls	r1, r2, #5
 8002192:	693a      	ldr	r2, [r7, #16]
 8002194:	440a      	add	r2, r1
 8002196:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800219a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800219e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021a0:	6879      	ldr	r1, [r7, #4]
 80021a2:	68fa      	ldr	r2, [r7, #12]
 80021a4:	4613      	mov	r3, r2
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	4413      	add	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	440b      	add	r3, r1
 80021ae:	335c      	adds	r3, #92	; 0x5c
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	b2d8      	uxtb	r0, r3
 80021b8:	6879      	ldr	r1, [r7, #4]
 80021ba:	68fa      	ldr	r2, [r7, #12]
 80021bc:	4613      	mov	r3, r2
 80021be:	009b      	lsls	r3, r3, #2
 80021c0:	4413      	add	r3, r2
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	440b      	add	r3, r1
 80021c6:	335c      	adds	r3, #92	; 0x5c
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	461a      	mov	r2, r3
 80021cc:	4601      	mov	r1, r0
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f009 f91a 	bl	800b408 <HAL_HCD_HC_NotifyURBChange_Callback>
 80021d4:	e03a      	b.n	800224c <HCD_HC_IN_IRQHandler+0x444>
    else if (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC)
 80021d6:	6879      	ldr	r1, [r7, #4]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	4613      	mov	r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	4413      	add	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	440b      	add	r3, r1
 80021e4:	333f      	adds	r3, #63	; 0x3f
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d12f      	bne.n	800224c <HCD_HC_IN_IRQHandler+0x444>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80021ec:	6879      	ldr	r1, [r7, #4]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	00db      	lsls	r3, r3, #3
 80021f8:	440b      	add	r3, r1
 80021fa:	335c      	adds	r3, #92	; 0x5c
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002200:	6879      	ldr	r1, [r7, #4]
 8002202:	68fa      	ldr	r2, [r7, #12]
 8002204:	4613      	mov	r3, r2
 8002206:	009b      	lsls	r3, r3, #2
 8002208:	4413      	add	r3, r2
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	440b      	add	r3, r1
 800220e:	3350      	adds	r3, #80	; 0x50
 8002210:	781b      	ldrb	r3, [r3, #0]
 8002212:	f083 0301 	eor.w	r3, r3, #1
 8002216:	b2d8      	uxtb	r0, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	68fa      	ldr	r2, [r7, #12]
 800221c:	4613      	mov	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	4413      	add	r3, r2
 8002222:	00db      	lsls	r3, r3, #3
 8002224:	440b      	add	r3, r1
 8002226:	3350      	adds	r3, #80	; 0x50
 8002228:	4602      	mov	r2, r0
 800222a:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	b2d8      	uxtb	r0, r3
 8002230:	6879      	ldr	r1, [r7, #4]
 8002232:	68fa      	ldr	r2, [r7, #12]
 8002234:	4613      	mov	r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	4413      	add	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	440b      	add	r3, r1
 800223e:	335c      	adds	r3, #92	; 0x5c
 8002240:	781b      	ldrb	r3, [r3, #0]
 8002242:	461a      	mov	r2, r3
 8002244:	4601      	mov	r1, r0
 8002246:	6878      	ldr	r0, [r7, #4]
 8002248:	f009 f8de 	bl	800b408 <HAL_HCD_HC_NotifyURBChange_Callback>
    hhcd->hc[ch_num].toggle_in ^= 1U;
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	68fa      	ldr	r2, [r7, #12]
 8002250:	4613      	mov	r3, r2
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	4413      	add	r3, r2
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	440b      	add	r3, r1
 800225a:	3350      	adds	r3, #80	; 0x50
 800225c:	781b      	ldrb	r3, [r3, #0]
 800225e:	f083 0301 	eor.w	r3, r3, #1
 8002262:	b2d8      	uxtb	r0, r3
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	68fa      	ldr	r2, [r7, #12]
 8002268:	4613      	mov	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	4413      	add	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	440b      	add	r3, r1
 8002272:	3350      	adds	r3, #80	; 0x50
 8002274:	4602      	mov	r2, r0
 8002276:	701a      	strb	r2, [r3, #0]
}
 8002278:	e1f7      	b.n	800266a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	015a      	lsls	r2, r3, #5
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4413      	add	r3, r2
 8002282:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002286:	689b      	ldr	r3, [r3, #8]
 8002288:	f003 0302 	and.w	r3, r3, #2
 800228c:	2b02      	cmp	r3, #2
 800228e:	f040 811a 	bne.w	80024c6 <HCD_HC_IN_IRQHandler+0x6be>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	4413      	add	r3, r2
 800229a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	68fa      	ldr	r2, [r7, #12]
 80022a2:	0151      	lsls	r1, r2, #5
 80022a4:	693a      	ldr	r2, [r7, #16]
 80022a6:	440a      	add	r2, r1
 80022a8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022ac:	f023 0302 	bic.w	r3, r3, #2
 80022b0:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	68fa      	ldr	r2, [r7, #12]
 80022b6:	4613      	mov	r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	4413      	add	r3, r2
 80022bc:	00db      	lsls	r3, r3, #3
 80022be:	440b      	add	r3, r1
 80022c0:	335d      	adds	r3, #93	; 0x5d
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d10a      	bne.n	80022de <HCD_HC_IN_IRQHandler+0x4d6>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	4613      	mov	r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	4413      	add	r3, r2
 80022d2:	00db      	lsls	r3, r3, #3
 80022d4:	440b      	add	r3, r1
 80022d6:	335c      	adds	r3, #92	; 0x5c
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]
 80022dc:	e0d9      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80022de:	6879      	ldr	r1, [r7, #4]
 80022e0:	68fa      	ldr	r2, [r7, #12]
 80022e2:	4613      	mov	r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	4413      	add	r3, r2
 80022e8:	00db      	lsls	r3, r3, #3
 80022ea:	440b      	add	r3, r1
 80022ec:	335d      	adds	r3, #93	; 0x5d
 80022ee:	781b      	ldrb	r3, [r3, #0]
 80022f0:	2b05      	cmp	r3, #5
 80022f2:	d10a      	bne.n	800230a <HCD_HC_IN_IRQHandler+0x502>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 80022f4:	6879      	ldr	r1, [r7, #4]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	4613      	mov	r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	4413      	add	r3, r2
 80022fe:	00db      	lsls	r3, r3, #3
 8002300:	440b      	add	r3, r1
 8002302:	335c      	adds	r3, #92	; 0x5c
 8002304:	2205      	movs	r2, #5
 8002306:	701a      	strb	r2, [r3, #0]
 8002308:	e0c3      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x68a>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	68fa      	ldr	r2, [r7, #12]
 800230e:	4613      	mov	r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	4413      	add	r3, r2
 8002314:	00db      	lsls	r3, r3, #3
 8002316:	440b      	add	r3, r1
 8002318:	335d      	adds	r3, #93	; 0x5d
 800231a:	781b      	ldrb	r3, [r3, #0]
 800231c:	2b06      	cmp	r3, #6
 800231e:	d00a      	beq.n	8002336 <HCD_HC_IN_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	4413      	add	r3, r2
 800232a:	00db      	lsls	r3, r3, #3
 800232c:	440b      	add	r3, r1
 800232e:	335d      	adds	r3, #93	; 0x5d
 8002330:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002332:	2b08      	cmp	r3, #8
 8002334:	d156      	bne.n	80023e4 <HCD_HC_IN_IRQHandler+0x5dc>
      hhcd->hc[ch_num].ErrCnt++;
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	68fa      	ldr	r2, [r7, #12]
 800233a:	4613      	mov	r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	00db      	lsls	r3, r3, #3
 8002342:	440b      	add	r3, r1
 8002344:	3358      	adds	r3, #88	; 0x58
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	1c59      	adds	r1, r3, #1
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	68fa      	ldr	r2, [r7, #12]
 800234e:	4613      	mov	r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	4413      	add	r3, r2
 8002354:	00db      	lsls	r3, r3, #3
 8002356:	4403      	add	r3, r0
 8002358:	3358      	adds	r3, #88	; 0x58
 800235a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 800235c:	6879      	ldr	r1, [r7, #4]
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4613      	mov	r3, r2
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	4413      	add	r3, r2
 8002366:	00db      	lsls	r3, r3, #3
 8002368:	440b      	add	r3, r1
 800236a:	3358      	adds	r3, #88	; 0x58
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2b03      	cmp	r3, #3
 8002370:	d914      	bls.n	800239c <HCD_HC_IN_IRQHandler+0x594>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002372:	6879      	ldr	r1, [r7, #4]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	00db      	lsls	r3, r3, #3
 800237e:	440b      	add	r3, r1
 8002380:	3358      	adds	r3, #88	; 0x58
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002386:	6879      	ldr	r1, [r7, #4]
 8002388:	68fa      	ldr	r2, [r7, #12]
 800238a:	4613      	mov	r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	4413      	add	r3, r2
 8002390:	00db      	lsls	r3, r3, #3
 8002392:	440b      	add	r3, r1
 8002394:	335c      	adds	r3, #92	; 0x5c
 8002396:	2204      	movs	r2, #4
 8002398:	701a      	strb	r2, [r3, #0]
 800239a:	e009      	b.n	80023b0 <HCD_HC_IN_IRQHandler+0x5a8>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	4613      	mov	r3, r2
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	4413      	add	r3, r2
 80023a6:	00db      	lsls	r3, r3, #3
 80023a8:	440b      	add	r3, r1
 80023aa:	335c      	adds	r3, #92	; 0x5c
 80023ac:	2202      	movs	r2, #2
 80023ae:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	015a      	lsls	r2, r3, #5
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	4413      	add	r3, r2
 80023b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80023c6:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80023c8:	68bb      	ldr	r3, [r7, #8]
 80023ca:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80023ce:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	015a      	lsls	r2, r3, #5
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	4413      	add	r3, r2
 80023d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023dc:	461a      	mov	r2, r3
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e056      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80023e4:	6879      	ldr	r1, [r7, #4]
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	440b      	add	r3, r1
 80023f2:	335d      	adds	r3, #93	; 0x5d
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b03      	cmp	r3, #3
 80023f8:	d123      	bne.n	8002442 <HCD_HC_IN_IRQHandler+0x63a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	68fa      	ldr	r2, [r7, #12]
 80023fe:	4613      	mov	r3, r2
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	4413      	add	r3, r2
 8002404:	00db      	lsls	r3, r3, #3
 8002406:	440b      	add	r3, r1
 8002408:	335c      	adds	r3, #92	; 0x5c
 800240a:	2202      	movs	r2, #2
 800240c:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002424:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800242c:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	015a      	lsls	r2, r3, #5
 8002432:	693b      	ldr	r3, [r7, #16]
 8002434:	4413      	add	r3, r2
 8002436:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800243a:	461a      	mov	r2, r3
 800243c:	68bb      	ldr	r3, [r7, #8]
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	e027      	b.n	8002492 <HCD_HC_IN_IRQHandler+0x68a>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	68fa      	ldr	r2, [r7, #12]
 8002446:	4613      	mov	r3, r2
 8002448:	009b      	lsls	r3, r3, #2
 800244a:	4413      	add	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	440b      	add	r3, r1
 8002450:	335d      	adds	r3, #93	; 0x5d
 8002452:	781b      	ldrb	r3, [r3, #0]
 8002454:	2b07      	cmp	r3, #7
 8002456:	d11c      	bne.n	8002492 <HCD_HC_IN_IRQHandler+0x68a>
      hhcd->hc[ch_num].ErrCnt++;
 8002458:	6879      	ldr	r1, [r7, #4]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	4613      	mov	r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	4413      	add	r3, r2
 8002462:	00db      	lsls	r3, r3, #3
 8002464:	440b      	add	r3, r1
 8002466:	3358      	adds	r3, #88	; 0x58
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	1c59      	adds	r1, r3, #1
 800246c:	6878      	ldr	r0, [r7, #4]
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4613      	mov	r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	4413      	add	r3, r2
 8002476:	00db      	lsls	r3, r3, #3
 8002478:	4403      	add	r3, r0
 800247a:	3358      	adds	r3, #88	; 0x58
 800247c:	6019      	str	r1, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800247e:	6879      	ldr	r1, [r7, #4]
 8002480:	68fa      	ldr	r2, [r7, #12]
 8002482:	4613      	mov	r3, r2
 8002484:	009b      	lsls	r3, r3, #2
 8002486:	4413      	add	r3, r2
 8002488:	00db      	lsls	r3, r3, #3
 800248a:	440b      	add	r3, r1
 800248c:	335c      	adds	r3, #92	; 0x5c
 800248e:	2204      	movs	r2, #4
 8002490:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002492:	68fb      	ldr	r3, [r7, #12]
 8002494:	015a      	lsls	r2, r3, #5
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	4413      	add	r3, r2
 800249a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800249e:	461a      	mov	r2, r3
 80024a0:	2302      	movs	r3, #2
 80024a2:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	b2d8      	uxtb	r0, r3
 80024a8:	6879      	ldr	r1, [r7, #4]
 80024aa:	68fa      	ldr	r2, [r7, #12]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	440b      	add	r3, r1
 80024b6:	335c      	adds	r3, #92	; 0x5c
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	461a      	mov	r2, r3
 80024bc:	4601      	mov	r1, r0
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f008 ffa2 	bl	800b408 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80024c4:	e0d1      	b.n	800266a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	015a      	lsls	r2, r3, #5
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	4413      	add	r3, r2
 80024ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024d8:	2b80      	cmp	r3, #128	; 0x80
 80024da:	d13e      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x752>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	015a      	lsls	r2, r3, #5
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	4413      	add	r3, r2
 80024e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e8:	68db      	ldr	r3, [r3, #12]
 80024ea:	68fa      	ldr	r2, [r7, #12]
 80024ec:	0151      	lsls	r1, r2, #5
 80024ee:	693a      	ldr	r2, [r7, #16]
 80024f0:	440a      	add	r2, r1
 80024f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80024f6:	f043 0302 	orr.w	r3, r3, #2
 80024fa:	60d3      	str	r3, [r2, #12]
    hhcd->hc[ch_num].ErrCnt++;
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	4613      	mov	r3, r2
 8002502:	009b      	lsls	r3, r3, #2
 8002504:	4413      	add	r3, r2
 8002506:	00db      	lsls	r3, r3, #3
 8002508:	440b      	add	r3, r1
 800250a:	3358      	adds	r3, #88	; 0x58
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1c59      	adds	r1, r3, #1
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	68fa      	ldr	r2, [r7, #12]
 8002514:	4613      	mov	r3, r2
 8002516:	009b      	lsls	r3, r3, #2
 8002518:	4413      	add	r3, r2
 800251a:	00db      	lsls	r3, r3, #3
 800251c:	4403      	add	r3, r0
 800251e:	3358      	adds	r3, #88	; 0x58
 8002520:	6019      	str	r1, [r3, #0]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002522:	6879      	ldr	r1, [r7, #4]
 8002524:	68fa      	ldr	r2, [r7, #12]
 8002526:	4613      	mov	r3, r2
 8002528:	009b      	lsls	r3, r3, #2
 800252a:	4413      	add	r3, r2
 800252c:	00db      	lsls	r3, r3, #3
 800252e:	440b      	add	r3, r1
 8002530:	335d      	adds	r3, #93	; 0x5d
 8002532:	2206      	movs	r2, #6
 8002534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	b2d2      	uxtb	r2, r2
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f003 f8a8 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	015a      	lsls	r2, r3, #5
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	4413      	add	r3, r2
 800254e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002552:	461a      	mov	r2, r3
 8002554:	2380      	movs	r3, #128	; 0x80
 8002556:	6093      	str	r3, [r2, #8]
}
 8002558:	e087      	b.n	800266a <HCD_HC_IN_IRQHandler+0x862>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0310 	and.w	r3, r3, #16
 800256c:	2b10      	cmp	r3, #16
 800256e:	d17c      	bne.n	800266a <HCD_HC_IN_IRQHandler+0x862>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002570:	6879      	ldr	r1, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	4613      	mov	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4413      	add	r3, r2
 800257a:	00db      	lsls	r3, r3, #3
 800257c:	440b      	add	r3, r1
 800257e:	333f      	adds	r3, #63	; 0x3f
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b03      	cmp	r3, #3
 8002584:	d122      	bne.n	80025cc <HCD_HC_IN_IRQHandler+0x7c4>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002586:	6879      	ldr	r1, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	4613      	mov	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	4413      	add	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	440b      	add	r3, r1
 8002594:	3358      	adds	r3, #88	; 0x58
 8002596:	2200      	movs	r2, #0
 8002598:	601a      	str	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	015a      	lsls	r2, r3, #5
 800259e:	693b      	ldr	r3, [r7, #16]
 80025a0:	4413      	add	r3, r2
 80025a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	68fa      	ldr	r2, [r7, #12]
 80025aa:	0151      	lsls	r1, r2, #5
 80025ac:	693a      	ldr	r2, [r7, #16]
 80025ae:	440a      	add	r2, r1
 80025b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80025b4:	f043 0302 	orr.w	r3, r3, #2
 80025b8:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	b2d2      	uxtb	r2, r2
 80025c2:	4611      	mov	r1, r2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f003 f866 	bl	8005696 <USB_HC_Halt>
 80025ca:	e045      	b.n	8002658 <HCD_HC_IN_IRQHandler+0x850>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4613      	mov	r3, r2
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4413      	add	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	440b      	add	r3, r1
 80025da:	333f      	adds	r3, #63	; 0x3f
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HCD_HC_IN_IRQHandler+0x7f0>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80025e2:	6879      	ldr	r1, [r7, #4]
 80025e4:	68fa      	ldr	r2, [r7, #12]
 80025e6:	4613      	mov	r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	4413      	add	r3, r2
 80025ec:	00db      	lsls	r3, r3, #3
 80025ee:	440b      	add	r3, r1
 80025f0:	333f      	adds	r3, #63	; 0x3f
 80025f2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d12f      	bne.n	8002658 <HCD_HC_IN_IRQHandler+0x850>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	68fa      	ldr	r2, [r7, #12]
 80025fc:	4613      	mov	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	4413      	add	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	440b      	add	r3, r1
 8002606:	3358      	adds	r3, #88	; 0x58
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d121      	bne.n	8002658 <HCD_HC_IN_IRQHandler+0x850>
        hhcd->hc[ch_num].state = HC_NAK;
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	68fa      	ldr	r2, [r7, #12]
 8002618:	4613      	mov	r3, r2
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	4413      	add	r3, r2
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	440b      	add	r3, r1
 8002622:	335d      	adds	r3, #93	; 0x5d
 8002624:	2203      	movs	r2, #3
 8002626:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	015a      	lsls	r2, r3, #5
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	4413      	add	r3, r2
 8002630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	0151      	lsls	r1, r2, #5
 800263a:	693a      	ldr	r2, [r7, #16]
 800263c:	440a      	add	r2, r1
 800263e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002642:	f043 0302 	orr.w	r3, r3, #2
 8002646:	60d3      	str	r3, [r2, #12]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	b2d2      	uxtb	r2, r2
 8002650:	4611      	mov	r1, r2
 8002652:	4618      	mov	r0, r3
 8002654:	f003 f81f 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	015a      	lsls	r2, r3, #5
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	4413      	add	r3, r2
 8002660:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002664:	461a      	mov	r2, r3
 8002666:	2310      	movs	r3, #16
 8002668:	6093      	str	r3, [r2, #8]
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b086      	sub	sp, #24
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
 800267a:	460b      	mov	r3, r1
 800267c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002688:	78fb      	ldrb	r3, [r7, #3]
 800268a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	015a      	lsls	r2, r3, #5
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	4413      	add	r3, r2
 8002694:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	f003 0304 	and.w	r3, r3, #4
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d119      	bne.n	80026d6 <HCD_HC_OUT_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	015a      	lsls	r2, r3, #5
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	4413      	add	r3, r2
 80026aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026ae:	461a      	mov	r2, r3
 80026b0:	2304      	movs	r3, #4
 80026b2:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	0151      	lsls	r1, r2, #5
 80026c6:	693a      	ldr	r2, [r7, #16]
 80026c8:	440a      	add	r2, r1
 80026ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026ce:	f043 0302 	orr.w	r3, r3, #2
 80026d2:	60d3      	str	r3, [r2, #12]
  }
  else
  {
    /* ... */
  }
}
 80026d4:	e33e      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	015a      	lsls	r2, r3, #5
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	4413      	add	r3, r2
 80026de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	f003 0320 	and.w	r3, r3, #32
 80026e8:	2b20      	cmp	r3, #32
 80026ea:	d141      	bne.n	8002770 <HCD_HC_OUT_IRQHandler+0xfe>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	015a      	lsls	r2, r3, #5
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	4413      	add	r3, r2
 80026f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f8:	461a      	mov	r2, r3
 80026fa:	2320      	movs	r3, #32
 80026fc:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026fe:	6879      	ldr	r1, [r7, #4]
 8002700:	68fa      	ldr	r2, [r7, #12]
 8002702:	4613      	mov	r3, r2
 8002704:	009b      	lsls	r3, r3, #2
 8002706:	4413      	add	r3, r2
 8002708:	00db      	lsls	r3, r3, #3
 800270a:	440b      	add	r3, r1
 800270c:	333d      	adds	r3, #61	; 0x3d
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	2b01      	cmp	r3, #1
 8002712:	f040 831f 	bne.w	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
      hhcd->hc[ch_num].do_ping = 0U;
 8002716:	6879      	ldr	r1, [r7, #4]
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	4613      	mov	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4413      	add	r3, r2
 8002720:	00db      	lsls	r3, r3, #3
 8002722:	440b      	add	r3, r1
 8002724:	333d      	adds	r3, #61	; 0x3d
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800272a:	6879      	ldr	r1, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	4613      	mov	r3, r2
 8002730:	009b      	lsls	r3, r3, #2
 8002732:	4413      	add	r3, r2
 8002734:	00db      	lsls	r3, r3, #3
 8002736:	440b      	add	r3, r1
 8002738:	335c      	adds	r3, #92	; 0x5c
 800273a:	2202      	movs	r2, #2
 800273c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	015a      	lsls	r2, r3, #5
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	4413      	add	r3, r2
 8002746:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800274a:	68db      	ldr	r3, [r3, #12]
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	0151      	lsls	r1, r2, #5
 8002750:	693a      	ldr	r2, [r7, #16]
 8002752:	440a      	add	r2, r1
 8002754:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002758:	f043 0302 	orr.w	r3, r3, #2
 800275c:	60d3      	str	r3, [r2, #12]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	b2d2      	uxtb	r2, r2
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f002 ff94 	bl	8005696 <USB_HC_Halt>
}
 800276e:	e2f1      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	015a      	lsls	r2, r3, #5
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	4413      	add	r3, r2
 8002778:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002782:	2b40      	cmp	r3, #64	; 0x40
 8002784:	d13f      	bne.n	8002806 <HCD_HC_OUT_IRQHandler+0x194>
    hhcd->hc[ch_num].state = HC_NYET;
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	68fa      	ldr	r2, [r7, #12]
 800278a:	4613      	mov	r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	4413      	add	r3, r2
 8002790:	00db      	lsls	r3, r3, #3
 8002792:	440b      	add	r3, r1
 8002794:	335d      	adds	r3, #93	; 0x5d
 8002796:	2204      	movs	r2, #4
 8002798:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 800279a:	6879      	ldr	r1, [r7, #4]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	4613      	mov	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	4413      	add	r3, r2
 80027a4:	00db      	lsls	r3, r3, #3
 80027a6:	440b      	add	r3, r1
 80027a8:	333d      	adds	r3, #61	; 0x3d
 80027aa:	2201      	movs	r2, #1
 80027ac:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80027ae:	6879      	ldr	r1, [r7, #4]
 80027b0:	68fa      	ldr	r2, [r7, #12]
 80027b2:	4613      	mov	r3, r2
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
 80027b8:	00db      	lsls	r3, r3, #3
 80027ba:	440b      	add	r3, r1
 80027bc:	3358      	adds	r3, #88	; 0x58
 80027be:	2200      	movs	r2, #0
 80027c0:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	015a      	lsls	r2, r3, #5
 80027c6:	693b      	ldr	r3, [r7, #16]
 80027c8:	4413      	add	r3, r2
 80027ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ce:	68db      	ldr	r3, [r3, #12]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	0151      	lsls	r1, r2, #5
 80027d4:	693a      	ldr	r2, [r7, #16]
 80027d6:	440a      	add	r2, r1
 80027d8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	b2d2      	uxtb	r2, r2
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f002 ff52 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	015a      	lsls	r2, r3, #5
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027fe:	461a      	mov	r2, r3
 8002800:	2340      	movs	r3, #64	; 0x40
 8002802:	6093      	str	r3, [r2, #8]
}
 8002804:	e2a6      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800281c:	d122      	bne.n	8002864 <HCD_HC_OUT_IRQHandler+0x1f2>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	015a      	lsls	r2, r3, #5
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	4413      	add	r3, r2
 8002826:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	68fa      	ldr	r2, [r7, #12]
 800282e:	0151      	lsls	r1, r2, #5
 8002830:	693a      	ldr	r2, [r7, #16]
 8002832:	440a      	add	r2, r1
 8002834:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002838:	f043 0302 	orr.w	r3, r3, #2
 800283c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	b2d2      	uxtb	r2, r2
 8002846:	4611      	mov	r1, r2
 8002848:	4618      	mov	r0, r3
 800284a:	f002 ff24 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002860:	6093      	str	r3, [r2, #8]
}
 8002862:	e277      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	015a      	lsls	r2, r3, #5
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	4413      	add	r3, r2
 800286c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d135      	bne.n	80028e6 <HCD_HC_OUT_IRQHandler+0x274>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68fa      	ldr	r2, [r7, #12]
 800287e:	4613      	mov	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	4413      	add	r3, r2
 8002884:	00db      	lsls	r3, r3, #3
 8002886:	440b      	add	r3, r1
 8002888:	3358      	adds	r3, #88	; 0x58
 800288a:	2200      	movs	r2, #0
 800288c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	015a      	lsls	r2, r3, #5
 8002892:	693b      	ldr	r3, [r7, #16]
 8002894:	4413      	add	r3, r2
 8002896:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	68fa      	ldr	r2, [r7, #12]
 800289e:	0151      	lsls	r1, r2, #5
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	440a      	add	r2, r1
 80028a4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80028a8:	f043 0302 	orr.w	r3, r3, #2
 80028ac:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	68fa      	ldr	r2, [r7, #12]
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f002 feec 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	015a      	lsls	r2, r3, #5
 80028c2:	693b      	ldr	r3, [r7, #16]
 80028c4:	4413      	add	r3, r2
 80028c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ca:	461a      	mov	r2, r3
 80028cc:	2301      	movs	r3, #1
 80028ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80028d0:	6879      	ldr	r1, [r7, #4]
 80028d2:	68fa      	ldr	r2, [r7, #12]
 80028d4:	4613      	mov	r3, r2
 80028d6:	009b      	lsls	r3, r3, #2
 80028d8:	4413      	add	r3, r2
 80028da:	00db      	lsls	r3, r3, #3
 80028dc:	440b      	add	r3, r1
 80028de:	335d      	adds	r3, #93	; 0x5d
 80028e0:	2201      	movs	r2, #1
 80028e2:	701a      	strb	r2, [r3, #0]
}
 80028e4:	e236      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	015a      	lsls	r2, r3, #5
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	4413      	add	r3, r2
 80028ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f003 0308 	and.w	r3, r3, #8
 80028f8:	2b08      	cmp	r3, #8
 80028fa:	d12b      	bne.n	8002954 <HCD_HC_OUT_IRQHandler+0x2e2>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2308      	movs	r3, #8
 800290c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4413      	add	r3, r2
 8002916:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	68fa      	ldr	r2, [r7, #12]
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	440a      	add	r2, r1
 8002924:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002928:	f043 0302 	orr.w	r3, r3, #2
 800292c:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f002 feac 	bl	8005696 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_STALL;
 800293e:	6879      	ldr	r1, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	4613      	mov	r3, r2
 8002944:	009b      	lsls	r3, r3, #2
 8002946:	4413      	add	r3, r2
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	440b      	add	r3, r1
 800294c:	335d      	adds	r3, #93	; 0x5d
 800294e:	2205      	movs	r2, #5
 8002950:	701a      	strb	r2, [r3, #0]
}
 8002952:	e1ff      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	015a      	lsls	r2, r3, #5
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	4413      	add	r3, r2
 800295c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	f003 0310 	and.w	r3, r3, #16
 8002966:	2b10      	cmp	r3, #16
 8002968:	d155      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x3a4>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4613      	mov	r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4413      	add	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	440b      	add	r3, r1
 8002978:	3358      	adds	r3, #88	; 0x58
 800297a:	2200      	movs	r2, #0
 800297c:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4613      	mov	r3, r2
 8002984:	009b      	lsls	r3, r3, #2
 8002986:	4413      	add	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	440b      	add	r3, r1
 800298c:	335d      	adds	r3, #93	; 0x5d
 800298e:	2203      	movs	r2, #3
 8002990:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	68fa      	ldr	r2, [r7, #12]
 8002996:	4613      	mov	r3, r2
 8002998:	009b      	lsls	r3, r3, #2
 800299a:	4413      	add	r3, r2
 800299c:	00db      	lsls	r3, r3, #3
 800299e:	440b      	add	r3, r1
 80029a0:	333d      	adds	r3, #61	; 0x3d
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d114      	bne.n	80029d2 <HCD_HC_OUT_IRQHandler+0x360>
      if (hhcd->hc[ch_num].speed == HCD_SPEED_HIGH)
 80029a8:	6879      	ldr	r1, [r7, #4]
 80029aa:	68fa      	ldr	r2, [r7, #12]
 80029ac:	4613      	mov	r3, r2
 80029ae:	009b      	lsls	r3, r3, #2
 80029b0:	4413      	add	r3, r2
 80029b2:	00db      	lsls	r3, r3, #3
 80029b4:	440b      	add	r3, r1
 80029b6:	333c      	adds	r3, #60	; 0x3c
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d109      	bne.n	80029d2 <HCD_HC_OUT_IRQHandler+0x360>
        hhcd->hc[ch_num].do_ping = 1U;
 80029be:	6879      	ldr	r1, [r7, #4]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	4613      	mov	r3, r2
 80029c4:	009b      	lsls	r3, r3, #2
 80029c6:	4413      	add	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	440b      	add	r3, r1
 80029cc:	333d      	adds	r3, #61	; 0x3d
 80029ce:	2201      	movs	r2, #1
 80029d0:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	015a      	lsls	r2, r3, #5
 80029d6:	693b      	ldr	r3, [r7, #16]
 80029d8:	4413      	add	r3, r2
 80029da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029de:	68db      	ldr	r3, [r3, #12]
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	0151      	lsls	r1, r2, #5
 80029e4:	693a      	ldr	r2, [r7, #16]
 80029e6:	440a      	add	r2, r1
 80029e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80029ec:	f043 0302 	orr.w	r3, r3, #2
 80029f0:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	b2d2      	uxtb	r2, r2
 80029fa:	4611      	mov	r1, r2
 80029fc:	4618      	mov	r0, r3
 80029fe:	f002 fe4a 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	015a      	lsls	r2, r3, #5
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	4413      	add	r3, r2
 8002a0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a0e:	461a      	mov	r2, r3
 8002a10:	2310      	movs	r3, #16
 8002a12:	6093      	str	r3, [r2, #8]
}
 8002a14:	e19e      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a28:	2b80      	cmp	r3, #128	; 0x80
 8002a2a:	d12b      	bne.n	8002a84 <HCD_HC_OUT_IRQHandler+0x412>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	68fa      	ldr	r2, [r7, #12]
 8002a3c:	0151      	lsls	r1, r2, #5
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	440a      	add	r2, r1
 8002a42:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002a46:	f043 0302 	orr.w	r3, r3, #2
 8002a4a:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	68fa      	ldr	r2, [r7, #12]
 8002a52:	b2d2      	uxtb	r2, r2
 8002a54:	4611      	mov	r1, r2
 8002a56:	4618      	mov	r0, r3
 8002a58:	f002 fe1d 	bl	8005696 <USB_HC_Halt>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a5c:	6879      	ldr	r1, [r7, #4]
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	4613      	mov	r3, r2
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	440b      	add	r3, r1
 8002a6a:	335d      	adds	r3, #93	; 0x5d
 8002a6c:	2206      	movs	r2, #6
 8002a6e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	693b      	ldr	r3, [r7, #16]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2380      	movs	r3, #128	; 0x80
 8002a80:	6093      	str	r3, [r2, #8]
}
 8002a82:	e167      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	015a      	lsls	r2, r3, #5
 8002a88:	693b      	ldr	r3, [r7, #16]
 8002a8a:	4413      	add	r3, r2
 8002a8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a9a:	d135      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x496>
    __HAL_HCD_UNMASK_HALT_HC_INT(ch_num);
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	015a      	lsls	r2, r3, #5
 8002aa0:	693b      	ldr	r3, [r7, #16]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	0151      	lsls	r1, r2, #5
 8002aae:	693a      	ldr	r2, [r7, #16]
 8002ab0:	440a      	add	r2, r1
 8002ab2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002ab6:	f043 0302 	orr.w	r3, r3, #2
 8002aba:	60d3      	str	r3, [r2, #12]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68fa      	ldr	r2, [r7, #12]
 8002ac2:	b2d2      	uxtb	r2, r2
 8002ac4:	4611      	mov	r1, r2
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	f002 fde5 	bl	8005696 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	2310      	movs	r3, #16
 8002adc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	015a      	lsls	r2, r3, #5
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	4413      	add	r3, r2
 8002ae6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aea:	461a      	mov	r2, r3
 8002aec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002af0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002af2:	6879      	ldr	r1, [r7, #4]
 8002af4:	68fa      	ldr	r2, [r7, #12]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	440b      	add	r3, r1
 8002b00:	335d      	adds	r3, #93	; 0x5d
 8002b02:	2208      	movs	r2, #8
 8002b04:	701a      	strb	r2, [r3, #0]
}
 8002b06:	e125      	b.n	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	693b      	ldr	r3, [r7, #16]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0302 	and.w	r3, r3, #2
 8002b1a:	2b02      	cmp	r3, #2
 8002b1c:	f040 811a 	bne.w	8002d54 <HCD_HC_OUT_IRQHandler+0x6e2>
    __HAL_HCD_MASK_HALT_HC_INT(ch_num);
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	015a      	lsls	r2, r3, #5
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	4413      	add	r3, r2
 8002b28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	68fa      	ldr	r2, [r7, #12]
 8002b30:	0151      	lsls	r1, r2, #5
 8002b32:	693a      	ldr	r2, [r7, #16]
 8002b34:	440a      	add	r2, r1
 8002b36:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8002b3a:	f023 0302 	bic.w	r3, r3, #2
 8002b3e:	60d3      	str	r3, [r2, #12]
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	4613      	mov	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	4413      	add	r3, r2
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	440b      	add	r3, r1
 8002b4e:	335d      	adds	r3, #93	; 0x5d
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d137      	bne.n	8002bc6 <HCD_HC_OUT_IRQHandler+0x554>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	68fa      	ldr	r2, [r7, #12]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	00db      	lsls	r3, r3, #3
 8002b62:	440b      	add	r3, r1
 8002b64:	335c      	adds	r3, #92	; 0x5c
 8002b66:	2201      	movs	r2, #1
 8002b68:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b6a:	6879      	ldr	r1, [r7, #4]
 8002b6c:	68fa      	ldr	r2, [r7, #12]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	00db      	lsls	r3, r3, #3
 8002b76:	440b      	add	r3, r1
 8002b78:	333f      	adds	r3, #63	; 0x3f
 8002b7a:	781b      	ldrb	r3, [r3, #0]
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d00b      	beq.n	8002b98 <HCD_HC_OUT_IRQHandler+0x526>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	68fa      	ldr	r2, [r7, #12]
 8002b84:	4613      	mov	r3, r2
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	00db      	lsls	r3, r3, #3
 8002b8c:	440b      	add	r3, r1
 8002b8e:	333f      	adds	r3, #63	; 0x3f
 8002b90:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b92:	2b03      	cmp	r3, #3
 8002b94:	f040 80c5 	bne.w	8002d22 <HCD_HC_OUT_IRQHandler+0x6b0>
        hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b98:	6879      	ldr	r1, [r7, #4]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	4613      	mov	r3, r2
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	4413      	add	r3, r2
 8002ba2:	00db      	lsls	r3, r3, #3
 8002ba4:	440b      	add	r3, r1
 8002ba6:	3351      	adds	r3, #81	; 0x51
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	f083 0301 	eor.w	r3, r3, #1
 8002bae:	b2d8      	uxtb	r0, r3
 8002bb0:	6879      	ldr	r1, [r7, #4]
 8002bb2:	68fa      	ldr	r2, [r7, #12]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	4413      	add	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	440b      	add	r3, r1
 8002bbe:	3351      	adds	r3, #81	; 0x51
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	701a      	strb	r2, [r3, #0]
 8002bc4:	e0ad      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bc6:	6879      	ldr	r1, [r7, #4]
 8002bc8:	68fa      	ldr	r2, [r7, #12]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4413      	add	r3, r2
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	440b      	add	r3, r1
 8002bd4:	335d      	adds	r3, #93	; 0x5d
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d10a      	bne.n	8002bf2 <HCD_HC_OUT_IRQHandler+0x580>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bdc:	6879      	ldr	r1, [r7, #4]
 8002bde:	68fa      	ldr	r2, [r7, #12]
 8002be0:	4613      	mov	r3, r2
 8002be2:	009b      	lsls	r3, r3, #2
 8002be4:	4413      	add	r3, r2
 8002be6:	00db      	lsls	r3, r3, #3
 8002be8:	440b      	add	r3, r1
 8002bea:	335c      	adds	r3, #92	; 0x5c
 8002bec:	2202      	movs	r2, #2
 8002bee:	701a      	strb	r2, [r3, #0]
 8002bf0:	e097      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	68fa      	ldr	r2, [r7, #12]
 8002bf6:	4613      	mov	r3, r2
 8002bf8:	009b      	lsls	r3, r3, #2
 8002bfa:	4413      	add	r3, r2
 8002bfc:	00db      	lsls	r3, r3, #3
 8002bfe:	440b      	add	r3, r1
 8002c00:	335d      	adds	r3, #93	; 0x5d
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	2b04      	cmp	r3, #4
 8002c06:	d10a      	bne.n	8002c1e <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	68fa      	ldr	r2, [r7, #12]
 8002c0c:	4613      	mov	r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	4413      	add	r3, r2
 8002c12:	00db      	lsls	r3, r3, #3
 8002c14:	440b      	add	r3, r1
 8002c16:	335c      	adds	r3, #92	; 0x5c
 8002c18:	2202      	movs	r2, #2
 8002c1a:	701a      	strb	r2, [r3, #0]
 8002c1c:	e081      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	68fa      	ldr	r2, [r7, #12]
 8002c22:	4613      	mov	r3, r2
 8002c24:	009b      	lsls	r3, r3, #2
 8002c26:	4413      	add	r3, r2
 8002c28:	00db      	lsls	r3, r3, #3
 8002c2a:	440b      	add	r3, r1
 8002c2c:	335d      	adds	r3, #93	; 0x5d
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	2b05      	cmp	r3, #5
 8002c32:	d10a      	bne.n	8002c4a <HCD_HC_OUT_IRQHandler+0x5d8>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c34:	6879      	ldr	r1, [r7, #4]
 8002c36:	68fa      	ldr	r2, [r7, #12]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4413      	add	r3, r2
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	440b      	add	r3, r1
 8002c42:	335c      	adds	r3, #92	; 0x5c
 8002c44:	2205      	movs	r2, #5
 8002c46:	701a      	strb	r2, [r3, #0]
 8002c48:	e06b      	b.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6b0>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c4a:	6879      	ldr	r1, [r7, #4]
 8002c4c:	68fa      	ldr	r2, [r7, #12]
 8002c4e:	4613      	mov	r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	4413      	add	r3, r2
 8002c54:	00db      	lsls	r3, r3, #3
 8002c56:	440b      	add	r3, r1
 8002c58:	335d      	adds	r3, #93	; 0x5d
 8002c5a:	781b      	ldrb	r3, [r3, #0]
 8002c5c:	2b06      	cmp	r3, #6
 8002c5e:	d00a      	beq.n	8002c76 <HCD_HC_OUT_IRQHandler+0x604>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c60:	6879      	ldr	r1, [r7, #4]
 8002c62:	68fa      	ldr	r2, [r7, #12]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	440b      	add	r3, r1
 8002c6e:	335d      	adds	r3, #93	; 0x5d
 8002c70:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c72:	2b08      	cmp	r3, #8
 8002c74:	d155      	bne.n	8002d22 <HCD_HC_OUT_IRQHandler+0x6b0>
      hhcd->hc[ch_num].ErrCnt++;
 8002c76:	6879      	ldr	r1, [r7, #4]
 8002c78:	68fa      	ldr	r2, [r7, #12]
 8002c7a:	4613      	mov	r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	4413      	add	r3, r2
 8002c80:	00db      	lsls	r3, r3, #3
 8002c82:	440b      	add	r3, r1
 8002c84:	3358      	adds	r3, #88	; 0x58
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	1c59      	adds	r1, r3, #1
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	68fa      	ldr	r2, [r7, #12]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	4413      	add	r3, r2
 8002c94:	00db      	lsls	r3, r3, #3
 8002c96:	4403      	add	r3, r0
 8002c98:	3358      	adds	r3, #88	; 0x58
 8002c9a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 3U)
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	4413      	add	r3, r2
 8002ca6:	00db      	lsls	r3, r3, #3
 8002ca8:	440b      	add	r3, r1
 8002caa:	3358      	adds	r3, #88	; 0x58
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2b03      	cmp	r3, #3
 8002cb0:	d914      	bls.n	8002cdc <HCD_HC_OUT_IRQHandler+0x66a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002cb2:	6879      	ldr	r1, [r7, #4]
 8002cb4:	68fa      	ldr	r2, [r7, #12]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	4413      	add	r3, r2
 8002cbc:	00db      	lsls	r3, r3, #3
 8002cbe:	440b      	add	r3, r1
 8002cc0:	3358      	adds	r3, #88	; 0x58
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cc6:	6879      	ldr	r1, [r7, #4]
 8002cc8:	68fa      	ldr	r2, [r7, #12]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	4413      	add	r3, r2
 8002cd0:	00db      	lsls	r3, r3, #3
 8002cd2:	440b      	add	r3, r1
 8002cd4:	335c      	adds	r3, #92	; 0x5c
 8002cd6:	2204      	movs	r2, #4
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e009      	b.n	8002cf0 <HCD_HC_OUT_IRQHandler+0x67e>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cdc:	6879      	ldr	r1, [r7, #4]
 8002cde:	68fa      	ldr	r2, [r7, #12]
 8002ce0:	4613      	mov	r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	4413      	add	r3, r2
 8002ce6:	00db      	lsls	r3, r3, #3
 8002ce8:	440b      	add	r3, r1
 8002cea:	335c      	adds	r3, #92	; 0x5c
 8002cec:	2202      	movs	r2, #2
 8002cee:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	015a      	lsls	r2, r3, #5
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	4413      	add	r3, r2
 8002cf8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002d06:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002d0e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	015a      	lsls	r2, r3, #5
 8002d14:	693b      	ldr	r3, [r7, #16]
 8002d16:	4413      	add	r3, r2
 8002d18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d2e:	461a      	mov	r2, r3
 8002d30:	2302      	movs	r3, #2
 8002d32:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	b2d8      	uxtb	r0, r3
 8002d38:	6879      	ldr	r1, [r7, #4]
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	4413      	add	r3, r2
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	440b      	add	r3, r1
 8002d46:	335c      	adds	r3, #92	; 0x5c
 8002d48:	781b      	ldrb	r3, [r3, #0]
 8002d4a:	461a      	mov	r2, r3
 8002d4c:	4601      	mov	r1, r0
 8002d4e:	6878      	ldr	r0, [r7, #4]
 8002d50:	f008 fb5a 	bl	800b408 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d54:	bf00      	nop
 8002d56:	3718      	adds	r7, #24
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}

08002d5c <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08a      	sub	sp, #40	; 0x28
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6c:	623b      	str	r3, [r7, #32]
  uint32_t pktcnt;
  uint32_t temp;
  uint32_t tmpreg;
  uint32_t ch_num;

  temp = hhcd->Instance->GRXSTSP;
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	6a1b      	ldr	r3, [r3, #32]
 8002d74:	61fb      	str	r3, [r7, #28]
  ch_num = temp & USB_OTG_GRXSTSP_EPNUM;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	f003 030f 	and.w	r3, r3, #15
 8002d7c:	61bb      	str	r3, [r7, #24]
  pktsts = (temp & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	0c5b      	lsrs	r3, r3, #17
 8002d82:	f003 030f 	and.w	r3, r3, #15
 8002d86:	617b      	str	r3, [r7, #20]
  pktcnt = (temp & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d90:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d003      	beq.n	8002da0 <HCD_RXQLVL_IRQHandler+0x44>
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	f000 8082 	beq.w	8002ea2 <HCD_RXQLVL_IRQHandler+0x146>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d9e:	e083      	b.n	8002ea8 <HCD_RXQLVL_IRQHandler+0x14c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002da0:	693b      	ldr	r3, [r7, #16]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d07f      	beq.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x14a>
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4613      	mov	r3, r2
 8002dac:	009b      	lsls	r3, r3, #2
 8002dae:	4413      	add	r3, r2
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	440b      	add	r3, r1
 8002db4:	3344      	adds	r3, #68	; 0x44
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d074      	beq.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x14a>
        (void)USB_ReadPacket(hhcd->Instance, hhcd->hc[ch_num].xfer_buff, (uint16_t)pktcnt);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6818      	ldr	r0, [r3, #0]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	69ba      	ldr	r2, [r7, #24]
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	4413      	add	r3, r2
 8002dca:	00db      	lsls	r3, r3, #3
 8002dcc:	440b      	add	r3, r1
 8002dce:	3344      	adds	r3, #68	; 0x44
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	693a      	ldr	r2, [r7, #16]
 8002dd4:	b292      	uxth	r2, r2
 8002dd6:	4619      	mov	r1, r3
 8002dd8:	f002 f809 	bl	8004dee <USB_ReadPacket>
        hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	69ba      	ldr	r2, [r7, #24]
 8002de0:	4613      	mov	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4413      	add	r3, r2
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	440b      	add	r3, r1
 8002dea:	3344      	adds	r3, #68	; 0x44
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	18d1      	adds	r1, r2, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	4613      	mov	r3, r2
 8002df8:	009b      	lsls	r3, r3, #2
 8002dfa:	4413      	add	r3, r2
 8002dfc:	00db      	lsls	r3, r3, #3
 8002dfe:	4403      	add	r3, r0
 8002e00:	3344      	adds	r3, #68	; 0x44
 8002e02:	6019      	str	r1, [r3, #0]
        hhcd->hc[ch_num].xfer_count  += pktcnt;
 8002e04:	6879      	ldr	r1, [r7, #4]
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	009b      	lsls	r3, r3, #2
 8002e0c:	4413      	add	r3, r2
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	440b      	add	r3, r1
 8002e12:	334c      	adds	r3, #76	; 0x4c
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	18d1      	adds	r1, r2, r3
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	009b      	lsls	r3, r3, #2
 8002e22:	4413      	add	r3, r2
 8002e24:	00db      	lsls	r3, r3, #3
 8002e26:	4403      	add	r3, r0
 8002e28:	334c      	adds	r3, #76	; 0x4c
 8002e2a:	6019      	str	r1, [r3, #0]
        if ((USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) > 0U)
 8002e2c:	69bb      	ldr	r3, [r7, #24]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	6a3b      	ldr	r3, [r7, #32]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	4b1d      	ldr	r3, [pc, #116]	; (8002eb0 <HCD_RXQLVL_IRQHandler+0x154>)
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d031      	beq.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x14a>
          tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e42:	69bb      	ldr	r3, [r7, #24]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	6a3b      	ldr	r3, [r7, #32]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e58:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e60:	60fb      	str	r3, [r7, #12]
          USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e62:	69bb      	ldr	r3, [r7, #24]
 8002e64:	015a      	lsls	r2, r3, #5
 8002e66:	6a3b      	ldr	r3, [r7, #32]
 8002e68:	4413      	add	r3, r2
 8002e6a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e6e:	461a      	mov	r2, r3
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	6013      	str	r3, [r2, #0]
          hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e74:	6879      	ldr	r1, [r7, #4]
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4613      	mov	r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	4413      	add	r3, r2
 8002e7e:	00db      	lsls	r3, r3, #3
 8002e80:	440b      	add	r3, r1
 8002e82:	3350      	adds	r3, #80	; 0x50
 8002e84:	781b      	ldrb	r3, [r3, #0]
 8002e86:	f083 0301 	eor.w	r3, r3, #1
 8002e8a:	b2d8      	uxtb	r0, r3
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	69ba      	ldr	r2, [r7, #24]
 8002e90:	4613      	mov	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	4413      	add	r3, r2
 8002e96:	00db      	lsls	r3, r3, #3
 8002e98:	440b      	add	r3, r1
 8002e9a:	3350      	adds	r3, #80	; 0x50
 8002e9c:	4602      	mov	r2, r0
 8002e9e:	701a      	strb	r2, [r3, #0]
      break;
 8002ea0:	e001      	b.n	8002ea6 <HCD_RXQLVL_IRQHandler+0x14a>
      break;
 8002ea2:	bf00      	nop
 8002ea4:	e000      	b.n	8002ea8 <HCD_RXQLVL_IRQHandler+0x14c>
      break;
 8002ea6:	bf00      	nop
  }
}
 8002ea8:	bf00      	nop
 8002eaa:	3728      	adds	r7, #40	; 0x28
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	1ff80000 	.word	0x1ff80000

08002eb4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	b086      	sub	sp, #24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0, hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ec6:	693b      	ldr	r3, [r7, #16]
 8002ec8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002ee0:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	f003 0302 	and.w	r3, r3, #2
 8002ee8:	2b02      	cmp	r3, #2
 8002eea:	d10b      	bne.n	8002f04 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b01      	cmp	r3, #1
 8002ef4:	d102      	bne.n	8002efc <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f008 fa6a 	bl	800b3d0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup  |= USB_OTG_HPRT_PCDET;
 8002efc:	68bb      	ldr	r3, [r7, #8]
 8002efe:	f043 0302 	orr.w	r3, r3, #2
 8002f02:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	f003 0308 	and.w	r3, r3, #8
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d132      	bne.n	8002f74 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	f043 0308 	orr.w	r3, r3, #8
 8002f14:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b04      	cmp	r3, #4
 8002f1e:	d126      	bne.n	8002f6e <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	699b      	ldr	r3, [r3, #24]
 8002f24:	2b02      	cmp	r3, #2
 8002f26:	d113      	bne.n	8002f50 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f2e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f32:	d106      	bne.n	8002f42 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	2102      	movs	r1, #2
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f002 f886 	bl	800504c <USB_InitFSLSPClkSel>
 8002f40:	e011      	b.n	8002f66 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2101      	movs	r1, #1
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f002 f87f 	bl	800504c <USB_InitFSLSPClkSel>
 8002f4e:	e00a      	b.n	8002f66 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	68db      	ldr	r3, [r3, #12]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d106      	bne.n	8002f66 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f58:	693b      	ldr	r3, [r7, #16]
 8002f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f64:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f008 fa5c 	bl	800b424 <HAL_HCD_PortEnabled_Callback>
 8002f6c:	e002      	b.n	8002f74 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	f008 fa66 	bl	800b440 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b20      	cmp	r3, #32
 8002f7c:	d103      	bne.n	8002f86 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	f043 0320 	orr.w	r3, r3, #32
 8002f84:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	6013      	str	r3, [r2, #0]
}
 8002f92:	bf00      	nop
 8002f94:	3718      	adds	r7, #24
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bd80      	pop	{r7, pc}
	...

08002f9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b082      	sub	sp, #8
 8002fa0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fa6:	4b23      	ldr	r3, [pc, #140]	; (8003034 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	4a22      	ldr	r2, [pc, #136]	; (8003034 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb2:	4b20      	ldr	r3, [pc, #128]	; (8003034 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fba:	603b      	str	r3, [r7, #0]
 8002fbc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a1d      	ldr	r2, [pc, #116]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fc8:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002fca:	f7fd fff3 	bl	8000fb4 <HAL_GetTick>
 8002fce:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fd0:	e009      	b.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002fd2:	f7fd ffef 	bl	8000fb4 <HAL_GetTick>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	1ad3      	subs	r3, r2, r3
 8002fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002fe0:	d901      	bls.n	8002fe6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002fe2:	2303      	movs	r3, #3
 8002fe4:	e022      	b.n	800302c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002fe6:	4b14      	ldr	r3, [pc, #80]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ff2:	d1ee      	bne.n	8002fd2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002ff4:	4b10      	ldr	r3, [pc, #64]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a0f      	ldr	r2, [pc, #60]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002ffa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ffe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003000:	f7fd ffd8 	bl	8000fb4 <HAL_GetTick>
 8003004:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003006:	e009      	b.n	800301c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003008:	f7fd ffd4 	bl	8000fb4 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003016:	d901      	bls.n	800301c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e007      	b.n	800302c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800301c:	4b06      	ldr	r3, [pc, #24]	; (8003038 <HAL_PWREx_EnableOverDrive+0x9c>)
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003024:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003028:	d1ee      	bne.n	8003008 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	4618      	mov	r0, r3
 800302e:	3708      	adds	r7, #8
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}
 8003034:	40023800 	.word	0x40023800
 8003038:	40007000 	.word	0x40007000

0800303c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b086      	sub	sp, #24
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003044:	2300      	movs	r3, #0
 8003046:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d101      	bne.n	8003052 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800304e:	2301      	movs	r3, #1
 8003050:	e29b      	b.n	800358a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	f000 8087 	beq.w	800316e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003060:	4b96      	ldr	r3, [pc, #600]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 030c 	and.w	r3, r3, #12
 8003068:	2b04      	cmp	r3, #4
 800306a:	d00c      	beq.n	8003086 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800306c:	4b93      	ldr	r3, [pc, #588]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d112      	bne.n	800309e <HAL_RCC_OscConfig+0x62>
 8003078:	4b90      	ldr	r3, [pc, #576]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003080:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003084:	d10b      	bne.n	800309e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003086:	4b8d      	ldr	r3, [pc, #564]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d06c      	beq.n	800316c <HAL_RCC_OscConfig+0x130>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d168      	bne.n	800316c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800309a:	2301      	movs	r3, #1
 800309c:	e275      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a6:	d106      	bne.n	80030b6 <HAL_RCC_OscConfig+0x7a>
 80030a8:	4b84      	ldr	r3, [pc, #528]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a83      	ldr	r2, [pc, #524]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	e02e      	b.n	8003114 <HAL_RCC_OscConfig+0xd8>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10c      	bne.n	80030d8 <HAL_RCC_OscConfig+0x9c>
 80030be:	4b7f      	ldr	r3, [pc, #508]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a7e      	ldr	r2, [pc, #504]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	4b7c      	ldr	r3, [pc, #496]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a7b      	ldr	r2, [pc, #492]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80030d4:	6013      	str	r3, [r2, #0]
 80030d6:	e01d      	b.n	8003114 <HAL_RCC_OscConfig+0xd8>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	685b      	ldr	r3, [r3, #4]
 80030dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030e0:	d10c      	bne.n	80030fc <HAL_RCC_OscConfig+0xc0>
 80030e2:	4b76      	ldr	r3, [pc, #472]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a75      	ldr	r2, [pc, #468]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	4b73      	ldr	r3, [pc, #460]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a72      	ldr	r2, [pc, #456]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	e00b      	b.n	8003114 <HAL_RCC_OscConfig+0xd8>
 80030fc:	4b6f      	ldr	r3, [pc, #444]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a6e      	ldr	r2, [pc, #440]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003102:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003106:	6013      	str	r3, [r2, #0]
 8003108:	4b6c      	ldr	r3, [pc, #432]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6b      	ldr	r2, [pc, #428]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800310e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003112:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d013      	beq.n	8003144 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800311c:	f7fd ff4a 	bl	8000fb4 <HAL_GetTick>
 8003120:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003122:	e008      	b.n	8003136 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003124:	f7fd ff46 	bl	8000fb4 <HAL_GetTick>
 8003128:	4602      	mov	r2, r0
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	1ad3      	subs	r3, r2, r3
 800312e:	2b64      	cmp	r3, #100	; 0x64
 8003130:	d901      	bls.n	8003136 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003132:	2303      	movs	r3, #3
 8003134:	e229      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003136:	4b61      	ldr	r3, [pc, #388]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800313e:	2b00      	cmp	r3, #0
 8003140:	d0f0      	beq.n	8003124 <HAL_RCC_OscConfig+0xe8>
 8003142:	e014      	b.n	800316e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003144:	f7fd ff36 	bl	8000fb4 <HAL_GetTick>
 8003148:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800314a:	e008      	b.n	800315e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800314c:	f7fd ff32 	bl	8000fb4 <HAL_GetTick>
 8003150:	4602      	mov	r2, r0
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	2b64      	cmp	r3, #100	; 0x64
 8003158:	d901      	bls.n	800315e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e215      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800315e:	4b57      	ldr	r3, [pc, #348]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003166:	2b00      	cmp	r3, #0
 8003168:	d1f0      	bne.n	800314c <HAL_RCC_OscConfig+0x110>
 800316a:	e000      	b.n	800316e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800316c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d069      	beq.n	800324e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800317a:	4b50      	ldr	r3, [pc, #320]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00b      	beq.n	800319e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b4d      	ldr	r3, [pc, #308]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003188:	689b      	ldr	r3, [r3, #8]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b08      	cmp	r3, #8
 8003190:	d11c      	bne.n	80031cc <HAL_RCC_OscConfig+0x190>
 8003192:	4b4a      	ldr	r3, [pc, #296]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d116      	bne.n	80031cc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800319e:	4b47      	ldr	r3, [pc, #284]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d005      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17a>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	68db      	ldr	r3, [r3, #12]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d001      	beq.n	80031b6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	e1e9      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031b6:	4b41      	ldr	r3, [pc, #260]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
 80031c2:	00db      	lsls	r3, r3, #3
 80031c4:	493d      	ldr	r1, [pc, #244]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031c6:	4313      	orrs	r3, r2
 80031c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031ca:	e040      	b.n	800324e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d023      	beq.n	800321c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031d4:	4b39      	ldr	r3, [pc, #228]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a38      	ldr	r2, [pc, #224]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031da:	f043 0301 	orr.w	r3, r3, #1
 80031de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031e0:	f7fd fee8 	bl	8000fb4 <HAL_GetTick>
 80031e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e6:	e008      	b.n	80031fa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e8:	f7fd fee4 	bl	8000fb4 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	1ad3      	subs	r3, r2, r3
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d901      	bls.n	80031fa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e1c7      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031fa:	4b30      	ldr	r3, [pc, #192]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d0f0      	beq.n	80031e8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003206:	4b2d      	ldr	r3, [pc, #180]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	00db      	lsls	r3, r3, #3
 8003214:	4929      	ldr	r1, [pc, #164]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003216:	4313      	orrs	r3, r2
 8003218:	600b      	str	r3, [r1, #0]
 800321a:	e018      	b.n	800324e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800321c:	4b27      	ldr	r3, [pc, #156]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a26      	ldr	r2, [pc, #152]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003222:	f023 0301 	bic.w	r3, r3, #1
 8003226:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003228:	f7fd fec4 	bl	8000fb4 <HAL_GetTick>
 800322c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003230:	f7fd fec0 	bl	8000fb4 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	693b      	ldr	r3, [r7, #16]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e1a3      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003242:	4b1e      	ldr	r3, [pc, #120]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d1f0      	bne.n	8003230 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0308 	and.w	r3, r3, #8
 8003256:	2b00      	cmp	r3, #0
 8003258:	d038      	beq.n	80032cc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	695b      	ldr	r3, [r3, #20]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d019      	beq.n	8003296 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003266:	4a15      	ldr	r2, [pc, #84]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003268:	f043 0301 	orr.w	r3, r3, #1
 800326c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800326e:	f7fd fea1 	bl	8000fb4 <HAL_GetTick>
 8003272:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003274:	e008      	b.n	8003288 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003276:	f7fd fe9d 	bl	8000fb4 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	2b02      	cmp	r3, #2
 8003282:	d901      	bls.n	8003288 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	e180      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003288:	4b0c      	ldr	r3, [pc, #48]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800328a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0f0      	beq.n	8003276 <HAL_RCC_OscConfig+0x23a>
 8003294:	e01a      	b.n	80032cc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003296:	4b09      	ldr	r3, [pc, #36]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 8003298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329a:	4a08      	ldr	r2, [pc, #32]	; (80032bc <HAL_RCC_OscConfig+0x280>)
 800329c:	f023 0301 	bic.w	r3, r3, #1
 80032a0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032a2:	f7fd fe87 	bl	8000fb4 <HAL_GetTick>
 80032a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032a8:	e00a      	b.n	80032c0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80032aa:	f7fd fe83 	bl	8000fb4 <HAL_GetTick>
 80032ae:	4602      	mov	r2, r0
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	2b02      	cmp	r3, #2
 80032b6:	d903      	bls.n	80032c0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80032b8:	2303      	movs	r3, #3
 80032ba:	e166      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
 80032bc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80032c0:	4b92      	ldr	r3, [pc, #584]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80032c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1ee      	bne.n	80032aa <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	f000 80a4 	beq.w	8003422 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032da:	4b8c      	ldr	r3, [pc, #560]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80032dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d10d      	bne.n	8003302 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e6:	4b89      	ldr	r3, [pc, #548]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80032e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ea:	4a88      	ldr	r2, [pc, #544]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80032ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032f0:	6413      	str	r3, [r2, #64]	; 0x40
 80032f2:	4b86      	ldr	r3, [pc, #536]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032fa:	60bb      	str	r3, [r7, #8]
 80032fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032fe:	2301      	movs	r3, #1
 8003300:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003302:	4b83      	ldr	r3, [pc, #524]	; (8003510 <HAL_RCC_OscConfig+0x4d4>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330a:	2b00      	cmp	r3, #0
 800330c:	d118      	bne.n	8003340 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800330e:	4b80      	ldr	r3, [pc, #512]	; (8003510 <HAL_RCC_OscConfig+0x4d4>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a7f      	ldr	r2, [pc, #508]	; (8003510 <HAL_RCC_OscConfig+0x4d4>)
 8003314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800331a:	f7fd fe4b 	bl	8000fb4 <HAL_GetTick>
 800331e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003320:	e008      	b.n	8003334 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003322:	f7fd fe47 	bl	8000fb4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	693b      	ldr	r3, [r7, #16]
 800332a:	1ad3      	subs	r3, r2, r3
 800332c:	2b64      	cmp	r3, #100	; 0x64
 800332e:	d901      	bls.n	8003334 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003330:	2303      	movs	r3, #3
 8003332:	e12a      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003334:	4b76      	ldr	r3, [pc, #472]	; (8003510 <HAL_RCC_OscConfig+0x4d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800333c:	2b00      	cmp	r3, #0
 800333e:	d0f0      	beq.n	8003322 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	2b01      	cmp	r3, #1
 8003346:	d106      	bne.n	8003356 <HAL_RCC_OscConfig+0x31a>
 8003348:	4b70      	ldr	r3, [pc, #448]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800334a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800334c:	4a6f      	ldr	r2, [pc, #444]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6713      	str	r3, [r2, #112]	; 0x70
 8003354:	e02d      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10c      	bne.n	8003378 <HAL_RCC_OscConfig+0x33c>
 800335e:	4b6b      	ldr	r3, [pc, #428]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003362:	4a6a      	ldr	r2, [pc, #424]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003364:	f023 0301 	bic.w	r3, r3, #1
 8003368:	6713      	str	r3, [r2, #112]	; 0x70
 800336a:	4b68      	ldr	r3, [pc, #416]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a67      	ldr	r2, [pc, #412]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003370:	f023 0304 	bic.w	r3, r3, #4
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	e01c      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	2b05      	cmp	r3, #5
 800337e:	d10c      	bne.n	800339a <HAL_RCC_OscConfig+0x35e>
 8003380:	4b62      	ldr	r3, [pc, #392]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	4a61      	ldr	r2, [pc, #388]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003386:	f043 0304 	orr.w	r3, r3, #4
 800338a:	6713      	str	r3, [r2, #112]	; 0x70
 800338c:	4b5f      	ldr	r3, [pc, #380]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800338e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003390:	4a5e      	ldr	r2, [pc, #376]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003392:	f043 0301 	orr.w	r3, r3, #1
 8003396:	6713      	str	r3, [r2, #112]	; 0x70
 8003398:	e00b      	b.n	80033b2 <HAL_RCC_OscConfig+0x376>
 800339a:	4b5c      	ldr	r3, [pc, #368]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a5b      	ldr	r2, [pc, #364]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80033a0:	f023 0301 	bic.w	r3, r3, #1
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70
 80033a6:	4b59      	ldr	r3, [pc, #356]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80033a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033aa:	4a58      	ldr	r2, [pc, #352]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80033ac:	f023 0304 	bic.w	r3, r3, #4
 80033b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d015      	beq.n	80033e6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ba:	f7fd fdfb 	bl	8000fb4 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c0:	e00a      	b.n	80033d8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c2:	f7fd fdf7 	bl	8000fb4 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d901      	bls.n	80033d8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80033d4:	2303      	movs	r3, #3
 80033d6:	e0d8      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	4b4c      	ldr	r3, [pc, #304]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80033da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033dc:	f003 0302 	and.w	r3, r3, #2
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d0ee      	beq.n	80033c2 <HAL_RCC_OscConfig+0x386>
 80033e4:	e014      	b.n	8003410 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e6:	f7fd fde5 	bl	8000fb4 <HAL_GetTick>
 80033ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fd fde1 	bl	8000fb4 <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	693b      	ldr	r3, [r7, #16]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e0c2      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003404:	4b41      	ldr	r3, [pc, #260]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1ee      	bne.n	80033ee <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003410:	7dfb      	ldrb	r3, [r7, #23]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003416:	4b3d      	ldr	r3, [pc, #244]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	4a3c      	ldr	r2, [pc, #240]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800341c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	2b00      	cmp	r3, #0
 8003428:	f000 80ae 	beq.w	8003588 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800342c:	4b37      	ldr	r3, [pc, #220]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 800342e:	689b      	ldr	r3, [r3, #8]
 8003430:	f003 030c 	and.w	r3, r3, #12
 8003434:	2b08      	cmp	r3, #8
 8003436:	d06d      	beq.n	8003514 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	699b      	ldr	r3, [r3, #24]
 800343c:	2b02      	cmp	r3, #2
 800343e:	d14b      	bne.n	80034d8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003440:	4b32      	ldr	r3, [pc, #200]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	4a31      	ldr	r2, [pc, #196]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800344c:	f7fd fdb2 	bl	8000fb4 <HAL_GetTick>
 8003450:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003452:	e008      	b.n	8003466 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003454:	f7fd fdae 	bl	8000fb4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	2b02      	cmp	r3, #2
 8003460:	d901      	bls.n	8003466 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003462:	2303      	movs	r3, #3
 8003464:	e091      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003466:	4b29      	ldr	r3, [pc, #164]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d1f0      	bne.n	8003454 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	69da      	ldr	r2, [r3, #28]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6a1b      	ldr	r3, [r3, #32]
 800347a:	431a      	orrs	r2, r3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003480:	019b      	lsls	r3, r3, #6
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003488:	085b      	lsrs	r3, r3, #1
 800348a:	3b01      	subs	r3, #1
 800348c:	041b      	lsls	r3, r3, #16
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003494:	061b      	lsls	r3, r3, #24
 8003496:	431a      	orrs	r2, r3
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800349c:	071b      	lsls	r3, r3, #28
 800349e:	491b      	ldr	r1, [pc, #108]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80034a4:	4b19      	ldr	r3, [pc, #100]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80034aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fd fd80 	bl	8000fb4 <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034b8:	f7fd fd7c 	bl	8000fb4 <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e05f      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	4b10      	ldr	r3, [pc, #64]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x47c>
 80034d6:	e057      	b.n	8003588 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034d8:	4b0c      	ldr	r3, [pc, #48]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	4a0b      	ldr	r2, [pc, #44]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 80034de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034e4:	f7fd fd66 	bl	8000fb4 <HAL_GetTick>
 80034e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ea:	e008      	b.n	80034fe <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80034ec:	f7fd fd62 	bl	8000fb4 <HAL_GetTick>
 80034f0:	4602      	mov	r2, r0
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	2b02      	cmp	r3, #2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e045      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034fe:	4b03      	ldr	r3, [pc, #12]	; (800350c <HAL_RCC_OscConfig+0x4d0>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d1f0      	bne.n	80034ec <HAL_RCC_OscConfig+0x4b0>
 800350a:	e03d      	b.n	8003588 <HAL_RCC_OscConfig+0x54c>
 800350c:	40023800 	.word	0x40023800
 8003510:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003514:	4b1f      	ldr	r3, [pc, #124]	; (8003594 <HAL_RCC_OscConfig+0x558>)
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d030      	beq.n	8003584 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800352c:	429a      	cmp	r2, r3
 800352e:	d129      	bne.n	8003584 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800353a:	429a      	cmp	r2, r3
 800353c:	d122      	bne.n	8003584 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003544:	4013      	ands	r3, r2
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800354a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800354c:	4293      	cmp	r3, r2
 800354e:	d119      	bne.n	8003584 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800355a:	085b      	lsrs	r3, r3, #1
 800355c:	3b01      	subs	r3, #1
 800355e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003560:	429a      	cmp	r2, r3
 8003562:	d10f      	bne.n	8003584 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800356e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003570:	429a      	cmp	r2, r3
 8003572:	d107      	bne.n	8003584 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800357e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003580:	429a      	cmp	r2, r3
 8003582:	d001      	beq.n	8003588 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e000      	b.n	800358a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800

08003598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d101      	bne.n	80035b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80035ac:	2301      	movs	r3, #1
 80035ae:	e0d0      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80035b0:	4b6a      	ldr	r3, [pc, #424]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	429a      	cmp	r2, r3
 80035bc:	d910      	bls.n	80035e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035be:	4b67      	ldr	r3, [pc, #412]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f023 020f 	bic.w	r2, r3, #15
 80035c6:	4965      	ldr	r1, [pc, #404]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	4313      	orrs	r3, r2
 80035cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b63      	ldr	r3, [pc, #396]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d001      	beq.n	80035e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e0b8      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0302 	and.w	r3, r3, #2
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d020      	beq.n	800362e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f003 0304 	and.w	r3, r3, #4
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d005      	beq.n	8003604 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80035f8:	4b59      	ldr	r3, [pc, #356]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	4a58      	ldr	r2, [pc, #352]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 80035fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f003 0308 	and.w	r3, r3, #8
 800360c:	2b00      	cmp	r3, #0
 800360e:	d005      	beq.n	800361c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003610:	4b53      	ldr	r3, [pc, #332]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	4a52      	ldr	r2, [pc, #328]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800361a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800361c:	4b50      	ldr	r3, [pc, #320]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	494d      	ldr	r1, [pc, #308]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 800362a:	4313      	orrs	r3, r2
 800362c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b00      	cmp	r3, #0
 8003638:	d040      	beq.n	80036bc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b01      	cmp	r3, #1
 8003640:	d107      	bne.n	8003652 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003642:	4b47      	ldr	r3, [pc, #284]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d115      	bne.n	800367a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800364e:	2301      	movs	r3, #1
 8003650:	e07f      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	2b02      	cmp	r3, #2
 8003658:	d107      	bne.n	800366a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800365a:	4b41      	ldr	r3, [pc, #260]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d109      	bne.n	800367a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e073      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366a:	4b3d      	ldr	r3, [pc, #244]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0302 	and.w	r3, r3, #2
 8003672:	2b00      	cmp	r3, #0
 8003674:	d101      	bne.n	800367a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e06b      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800367a:	4b39      	ldr	r3, [pc, #228]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 0203 	bic.w	r2, r3, #3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	685b      	ldr	r3, [r3, #4]
 8003686:	4936      	ldr	r1, [pc, #216]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003688:	4313      	orrs	r3, r2
 800368a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800368c:	f7fd fc92 	bl	8000fb4 <HAL_GetTick>
 8003690:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003692:	e00a      	b.n	80036aa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003694:	f7fd fc8e 	bl	8000fb4 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d901      	bls.n	80036aa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80036a6:	2303      	movs	r3, #3
 80036a8:	e053      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036aa:	4b2d      	ldr	r3, [pc, #180]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f003 020c 	and.w	r2, r3, #12
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d1eb      	bne.n	8003694 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80036bc:	4b27      	ldr	r3, [pc, #156]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f003 030f 	and.w	r3, r3, #15
 80036c4:	683a      	ldr	r2, [r7, #0]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	d210      	bcs.n	80036ec <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ca:	4b24      	ldr	r3, [pc, #144]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f023 020f 	bic.w	r2, r3, #15
 80036d2:	4922      	ldr	r1, [pc, #136]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036da:	4b20      	ldr	r3, [pc, #128]	; (800375c <HAL_RCC_ClockConfig+0x1c4>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	683a      	ldr	r2, [r7, #0]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	d001      	beq.n	80036ec <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80036e8:	2301      	movs	r3, #1
 80036ea:	e032      	b.n	8003752 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d008      	beq.n	800370a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80036f8:	4b19      	ldr	r3, [pc, #100]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	4916      	ldr	r1, [pc, #88]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003706:	4313      	orrs	r3, r2
 8003708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0308 	and.w	r3, r3, #8
 8003712:	2b00      	cmp	r3, #0
 8003714:	d009      	beq.n	800372a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	00db      	lsls	r3, r3, #3
 8003724:	490e      	ldr	r1, [pc, #56]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800372a:	f000 f821 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 800372e:	4601      	mov	r1, r0
 8003730:	4b0b      	ldr	r3, [pc, #44]	; (8003760 <HAL_RCC_ClockConfig+0x1c8>)
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	f003 030f 	and.w	r3, r3, #15
 800373a:	4a0a      	ldr	r2, [pc, #40]	; (8003764 <HAL_RCC_ClockConfig+0x1cc>)
 800373c:	5cd3      	ldrb	r3, [r2, r3]
 800373e:	fa21 f303 	lsr.w	r3, r1, r3
 8003742:	4a09      	ldr	r2, [pc, #36]	; (8003768 <HAL_RCC_ClockConfig+0x1d0>)
 8003744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003746:	4b09      	ldr	r3, [pc, #36]	; (800376c <HAL_RCC_ClockConfig+0x1d4>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	4618      	mov	r0, r3
 800374c:	f7fd fbee 	bl	8000f2c <HAL_InitTick>

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3710      	adds	r7, #16
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	40023c00 	.word	0x40023c00
 8003760:	40023800 	.word	0x40023800
 8003764:	0800c644 	.word	0x0800c644
 8003768:	20000000 	.word	0x20000000
 800376c:	20000004 	.word	0x20000004

08003770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003772:	b085      	sub	sp, #20
 8003774:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003776:	2300      	movs	r3, #0
 8003778:	607b      	str	r3, [r7, #4]
 800377a:	2300      	movs	r3, #0
 800377c:	60fb      	str	r3, [r7, #12]
 800377e:	2300      	movs	r3, #0
 8003780:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8003782:	2300      	movs	r3, #0
 8003784:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003786:	4b63      	ldr	r3, [pc, #396]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f003 030c 	and.w	r3, r3, #12
 800378e:	2b04      	cmp	r3, #4
 8003790:	d007      	beq.n	80037a2 <HAL_RCC_GetSysClockFreq+0x32>
 8003792:	2b08      	cmp	r3, #8
 8003794:	d008      	beq.n	80037a8 <HAL_RCC_GetSysClockFreq+0x38>
 8003796:	2b00      	cmp	r3, #0
 8003798:	f040 80b4 	bne.w	8003904 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800379c:	4b5e      	ldr	r3, [pc, #376]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800379e:	60bb      	str	r3, [r7, #8]
      break;
 80037a0:	e0b3      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80037a2:	4b5e      	ldr	r3, [pc, #376]	; (800391c <HAL_RCC_GetSysClockFreq+0x1ac>)
 80037a4:	60bb      	str	r3, [r7, #8]
      break;
 80037a6:	e0b0      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80037a8:	4b5a      	ldr	r3, [pc, #360]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037b0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80037b2:	4b58      	ldr	r3, [pc, #352]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d04a      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037be:	4b55      	ldr	r3, [pc, #340]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	099b      	lsrs	r3, r3, #6
 80037c4:	f04f 0400 	mov.w	r4, #0
 80037c8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80037cc:	f04f 0200 	mov.w	r2, #0
 80037d0:	ea03 0501 	and.w	r5, r3, r1
 80037d4:	ea04 0602 	and.w	r6, r4, r2
 80037d8:	4629      	mov	r1, r5
 80037da:	4632      	mov	r2, r6
 80037dc:	f04f 0300 	mov.w	r3, #0
 80037e0:	f04f 0400 	mov.w	r4, #0
 80037e4:	0154      	lsls	r4, r2, #5
 80037e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80037ea:	014b      	lsls	r3, r1, #5
 80037ec:	4619      	mov	r1, r3
 80037ee:	4622      	mov	r2, r4
 80037f0:	1b49      	subs	r1, r1, r5
 80037f2:	eb62 0206 	sbc.w	r2, r2, r6
 80037f6:	f04f 0300 	mov.w	r3, #0
 80037fa:	f04f 0400 	mov.w	r4, #0
 80037fe:	0194      	lsls	r4, r2, #6
 8003800:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003804:	018b      	lsls	r3, r1, #6
 8003806:	1a5b      	subs	r3, r3, r1
 8003808:	eb64 0402 	sbc.w	r4, r4, r2
 800380c:	f04f 0100 	mov.w	r1, #0
 8003810:	f04f 0200 	mov.w	r2, #0
 8003814:	00e2      	lsls	r2, r4, #3
 8003816:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800381a:	00d9      	lsls	r1, r3, #3
 800381c:	460b      	mov	r3, r1
 800381e:	4614      	mov	r4, r2
 8003820:	195b      	adds	r3, r3, r5
 8003822:	eb44 0406 	adc.w	r4, r4, r6
 8003826:	f04f 0100 	mov.w	r1, #0
 800382a:	f04f 0200 	mov.w	r2, #0
 800382e:	0262      	lsls	r2, r4, #9
 8003830:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003834:	0259      	lsls	r1, r3, #9
 8003836:	460b      	mov	r3, r1
 8003838:	4614      	mov	r4, r2
 800383a:	4618      	mov	r0, r3
 800383c:	4621      	mov	r1, r4
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f04f 0400 	mov.w	r4, #0
 8003844:	461a      	mov	r2, r3
 8003846:	4623      	mov	r3, r4
 8003848:	f7fc fd52 	bl	80002f0 <__aeabi_uldivmod>
 800384c:	4603      	mov	r3, r0
 800384e:	460c      	mov	r4, r1
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	e049      	b.n	80038e8 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003854:	4b2f      	ldr	r3, [pc, #188]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	099b      	lsrs	r3, r3, #6
 800385a:	f04f 0400 	mov.w	r4, #0
 800385e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	ea03 0501 	and.w	r5, r3, r1
 800386a:	ea04 0602 	and.w	r6, r4, r2
 800386e:	4629      	mov	r1, r5
 8003870:	4632      	mov	r2, r6
 8003872:	f04f 0300 	mov.w	r3, #0
 8003876:	f04f 0400 	mov.w	r4, #0
 800387a:	0154      	lsls	r4, r2, #5
 800387c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003880:	014b      	lsls	r3, r1, #5
 8003882:	4619      	mov	r1, r3
 8003884:	4622      	mov	r2, r4
 8003886:	1b49      	subs	r1, r1, r5
 8003888:	eb62 0206 	sbc.w	r2, r2, r6
 800388c:	f04f 0300 	mov.w	r3, #0
 8003890:	f04f 0400 	mov.w	r4, #0
 8003894:	0194      	lsls	r4, r2, #6
 8003896:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800389a:	018b      	lsls	r3, r1, #6
 800389c:	1a5b      	subs	r3, r3, r1
 800389e:	eb64 0402 	sbc.w	r4, r4, r2
 80038a2:	f04f 0100 	mov.w	r1, #0
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	00e2      	lsls	r2, r4, #3
 80038ac:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80038b0:	00d9      	lsls	r1, r3, #3
 80038b2:	460b      	mov	r3, r1
 80038b4:	4614      	mov	r4, r2
 80038b6:	195b      	adds	r3, r3, r5
 80038b8:	eb44 0406 	adc.w	r4, r4, r6
 80038bc:	f04f 0100 	mov.w	r1, #0
 80038c0:	f04f 0200 	mov.w	r2, #0
 80038c4:	02a2      	lsls	r2, r4, #10
 80038c6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80038ca:	0299      	lsls	r1, r3, #10
 80038cc:	460b      	mov	r3, r1
 80038ce:	4614      	mov	r4, r2
 80038d0:	4618      	mov	r0, r3
 80038d2:	4621      	mov	r1, r4
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	f04f 0400 	mov.w	r4, #0
 80038da:	461a      	mov	r2, r3
 80038dc:	4623      	mov	r3, r4
 80038de:	f7fc fd07 	bl	80002f0 <__aeabi_uldivmod>
 80038e2:	4603      	mov	r3, r0
 80038e4:	460c      	mov	r4, r1
 80038e6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80038e8:	4b0a      	ldr	r3, [pc, #40]	; (8003914 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	0c1b      	lsrs	r3, r3, #16
 80038ee:	f003 0303 	and.w	r3, r3, #3
 80038f2:	3301      	adds	r3, #1
 80038f4:	005b      	lsls	r3, r3, #1
 80038f6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80038f8:	68fa      	ldr	r2, [r7, #12]
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003900:	60bb      	str	r3, [r7, #8]
      break;
 8003902:	e002      	b.n	800390a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003906:	60bb      	str	r3, [r7, #8]
      break;
 8003908:	bf00      	nop
    }
  }
  return sysclockfreq;
 800390a:	68bb      	ldr	r3, [r7, #8]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3714      	adds	r7, #20
 8003910:	46bd      	mov	sp, r7
 8003912:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003914:	40023800 	.word	0x40023800
 8003918:	00f42400 	.word	0x00f42400
 800391c:	007a1200 	.word	0x007a1200

08003920 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003924:	4b03      	ldr	r3, [pc, #12]	; (8003934 <HAL_RCC_GetHCLKFreq+0x14>)
 8003926:	681b      	ldr	r3, [r3, #0]
}
 8003928:	4618      	mov	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000000 	.word	0x20000000

08003938 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800393c:	f7ff fff0 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003940:	4601      	mov	r1, r0
 8003942:	4b05      	ldr	r3, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003944:	689b      	ldr	r3, [r3, #8]
 8003946:	0a9b      	lsrs	r3, r3, #10
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x24>)
 800394e:	5cd3      	ldrb	r3, [r2, r3]
 8003950:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003954:	4618      	mov	r0, r3
 8003956:	bd80      	pop	{r7, pc}
 8003958:	40023800 	.word	0x40023800
 800395c:	0800c654 	.word	0x0800c654

08003960 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003960:	b580      	push	{r7, lr}
 8003962:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003964:	f7ff ffdc 	bl	8003920 <HAL_RCC_GetHCLKFreq>
 8003968:	4601      	mov	r1, r0
 800396a:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetPCLK2Freq+0x20>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	0b5b      	lsrs	r3, r3, #13
 8003970:	f003 0307 	and.w	r3, r3, #7
 8003974:	4a03      	ldr	r2, [pc, #12]	; (8003984 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003976:	5cd3      	ldrb	r3, [r2, r3]
 8003978:	fa21 f303 	lsr.w	r3, r1, r3
}
 800397c:	4618      	mov	r0, r3
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40023800 	.word	0x40023800
 8003984:	0800c654 	.word	0x0800c654

08003988 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003990:	2300      	movs	r3, #0
 8003992:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003994:	2300      	movs	r3, #0
 8003996:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003998:	2300      	movs	r3, #0
 800399a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800399c:	2300      	movs	r3, #0
 800399e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80039a0:	2300      	movs	r3, #0
 80039a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	f003 0301 	and.w	r3, r3, #1
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d012      	beq.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80039b0:	4b69      	ldr	r3, [pc, #420]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b2:	689b      	ldr	r3, [r3, #8]
 80039b4:	4a68      	ldr	r2, [pc, #416]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80039ba:	6093      	str	r3, [r2, #8]
 80039bc:	4b66      	ldr	r3, [pc, #408]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039c4:	4964      	ldr	r1, [pc, #400]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80039d2:	2301      	movs	r3, #1
 80039d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d017      	beq.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80039e2:	4b5d      	ldr	r3, [pc, #372]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f0:	4959      	ldr	r1, [pc, #356]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80039f2:	4313      	orrs	r3, r2
 80039f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003a00:	d101      	bne.n	8003a06 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d101      	bne.n	8003a12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d017      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003a1e:	4b4e      	ldr	r3, [pc, #312]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2c:	494a      	ldr	r1, [pc, #296]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a38:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a3c:	d101      	bne.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d101      	bne.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0320 	and.w	r3, r3, #32
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	f000 808b 	beq.w	8003b82 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003a6c:	4b3a      	ldr	r3, [pc, #232]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a70:	4a39      	ldr	r2, [pc, #228]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a76:	6413      	str	r3, [r2, #64]	; 0x40
 8003a78:	4b37      	ldr	r3, [pc, #220]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003a7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a80:	60bb      	str	r3, [r7, #8]
 8003a82:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003a84:	4b35      	ldr	r3, [pc, #212]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a34      	ldr	r2, [pc, #208]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003a8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a90:	f7fd fa90 	bl	8000fb4 <HAL_GetTick>
 8003a94:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003a96:	e008      	b.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a98:	f7fd fa8c 	bl	8000fb4 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	1ad3      	subs	r3, r2, r3
 8003aa2:	2b64      	cmp	r3, #100	; 0x64
 8003aa4:	d901      	bls.n	8003aaa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003aa6:	2303      	movs	r3, #3
 8003aa8:	e38d      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003aaa:	4b2c      	ldr	r3, [pc, #176]	; (8003b5c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d0f0      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003ab6:	4b28      	ldr	r3, [pc, #160]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ab8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003abe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003ac0:	693b      	ldr	r3, [r7, #16]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d035      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d02e      	beq.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ad4:	4b20      	ldr	r3, [pc, #128]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ad6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ad8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003adc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ade:	4b1e      	ldr	r3, [pc, #120]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae2:	4a1d      	ldr	r2, [pc, #116]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ae8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003aea:	4b1b      	ldr	r3, [pc, #108]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003aee:	4a1a      	ldr	r2, [pc, #104]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003af4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003af6:	4a18      	ldr	r2, [pc, #96]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003afc:	4b16      	ldr	r3, [pc, #88]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003afe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b00:	f003 0301 	and.w	r3, r3, #1
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	d114      	bne.n	8003b32 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b08:	f7fd fa54 	bl	8000fb4 <HAL_GetTick>
 8003b0c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b0e:	e00a      	b.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b10:	f7fd fa50 	bl	8000fb4 <HAL_GetTick>
 8003b14:	4602      	mov	r2, r0
 8003b16:	697b      	ldr	r3, [r7, #20]
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d901      	bls.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e34f      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b26:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b2a:	f003 0302 	and.w	r3, r3, #2
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d0ee      	beq.n	8003b10 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b3e:	d111      	bne.n	8003b64 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003b4c:	4b04      	ldr	r3, [pc, #16]	; (8003b60 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003b4e:	400b      	ands	r3, r1
 8003b50:	4901      	ldr	r1, [pc, #4]	; (8003b58 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003b52:	4313      	orrs	r3, r2
 8003b54:	608b      	str	r3, [r1, #8]
 8003b56:	e00b      	b.n	8003b70 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40007000 	.word	0x40007000
 8003b60:	0ffffcff 	.word	0x0ffffcff
 8003b64:	4bb3      	ldr	r3, [pc, #716]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	4ab2      	ldr	r2, [pc, #712]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b6a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003b6e:	6093      	str	r3, [r2, #8]
 8003b70:	4bb0      	ldr	r3, [pc, #704]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b72:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003b7c:	49ad      	ldr	r1, [pc, #692]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0310 	and.w	r3, r3, #16
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d010      	beq.n	8003bb0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003b8e:	4ba9      	ldr	r3, [pc, #676]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b94:	4aa7      	ldr	r2, [pc, #668]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003b96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003b9e:	4ba5      	ldr	r3, [pc, #660]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003ba0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba8:	49a2      	ldr	r1, [pc, #648]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d00a      	beq.n	8003bd2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003bc2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003bca:	499a      	ldr	r1, [pc, #616]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d00a      	beq.n	8003bf4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003bde:	4b95      	ldr	r3, [pc, #596]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003be0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003be4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003bec:	4991      	ldr	r1, [pc, #580]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d00a      	beq.n	8003c16 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003c00:	4b8c      	ldr	r3, [pc, #560]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c06:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c0e:	4989      	ldr	r1, [pc, #548]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c10:	4313      	orrs	r3, r2
 8003c12:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00a      	beq.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003c22:	4b84      	ldr	r3, [pc, #528]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c28:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c30:	4980      	ldr	r1, [pc, #512]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c32:	4313      	orrs	r3, r2
 8003c34:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00a      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003c44:	4b7b      	ldr	r3, [pc, #492]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c4a:	f023 0203 	bic.w	r2, r3, #3
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c52:	4978      	ldr	r1, [pc, #480]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003c66:	4b73      	ldr	r3, [pc, #460]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	f023 020c 	bic.w	r2, r3, #12
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c74:	496f      	ldr	r1, [pc, #444]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c76:	4313      	orrs	r3, r2
 8003c78:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00a      	beq.n	8003c9e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003c88:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c8e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c96:	4967      	ldr	r1, [pc, #412]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00a      	beq.n	8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003caa:	4b62      	ldr	r3, [pc, #392]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb8:	495e      	ldr	r1, [pc, #376]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d00a      	beq.n	8003ce2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ccc:	4b59      	ldr	r3, [pc, #356]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cd2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	4956      	ldr	r1, [pc, #344]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cdc:	4313      	orrs	r3, r2
 8003cde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d00a      	beq.n	8003d04 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003cee:	4b51      	ldr	r3, [pc, #324]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cfc:	494d      	ldr	r1, [pc, #308]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00a      	beq.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003d10:	4b48      	ldr	r3, [pc, #288]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	4945      	ldr	r1, [pc, #276]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d20:	4313      	orrs	r3, r2
 8003d22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d00a      	beq.n	8003d48 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003d32:	4b40      	ldr	r3, [pc, #256]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d38:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d40:	493c      	ldr	r1, [pc, #240]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d42:	4313      	orrs	r3, r2
 8003d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00a      	beq.n	8003d6a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d54:	4b37      	ldr	r3, [pc, #220]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d5a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003d62:	4934      	ldr	r1, [pc, #208]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d64:	4313      	orrs	r3, r2
 8003d66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d011      	beq.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003d76:	4b2f      	ldr	r3, [pc, #188]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d7c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d84:	492b      	ldr	r1, [pc, #172]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003d94:	d101      	bne.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f003 0308 	and.w	r3, r3, #8
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003da6:	2301      	movs	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003db6:	4b1f      	ldr	r3, [pc, #124]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dc4:	491b      	ldr	r1, [pc, #108]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d00b      	beq.n	8003df0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003dd8:	4b16      	ldr	r3, [pc, #88]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dde:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003de8:	4912      	ldr	r1, [pc, #72]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dea:	4313      	orrs	r3, r2
 8003dec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00b      	beq.n	8003e14 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003dfc:	4b0d      	ldr	r3, [pc, #52]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003dfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e02:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003e0c:	4909      	ldr	r1, [pc, #36]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d00f      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003e20:	4b04      	ldr	r3, [pc, #16]	; (8003e34 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8003e22:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e26:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e30:	e002      	b.n	8003e38 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8003e32:	bf00      	nop
 8003e34:	40023800 	.word	0x40023800
 8003e38:	4985      	ldr	r1, [pc, #532]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00b      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003e4c:	4b80      	ldr	r3, [pc, #512]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e52:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e5c:	497c      	ldr	r1, [pc, #496]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d005      	beq.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x4ee>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e72:	f040 80d6 	bne.w	8004022 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003e76:	4b76      	ldr	r3, [pc, #472]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a75      	ldr	r2, [pc, #468]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003e80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e82:	f7fd f897 	bl	8000fb4 <HAL_GetTick>
 8003e86:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e88:	e008      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003e8a:	f7fd f893 	bl	8000fb4 <HAL_GetTick>
 8003e8e:	4602      	mov	r2, r0
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	1ad3      	subs	r3, r2, r3
 8003e94:	2b64      	cmp	r3, #100	; 0x64
 8003e96:	d901      	bls.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003e98:	2303      	movs	r3, #3
 8003e9a:	e194      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003e9c:	4b6c      	ldr	r3, [pc, #432]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1f0      	bne.n	8003e8a <HAL_RCCEx_PeriphCLKConfig+0x502>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0301 	and.w	r3, r3, #1
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d021      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x570>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d11d      	bne.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0x570>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003ebc:	4b64      	ldr	r3, [pc, #400]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ebe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ec2:	0c1b      	lsrs	r3, r3, #16
 8003ec4:	f003 0303 	and.w	r3, r3, #3
 8003ec8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003eca:	4b61      	ldr	r3, [pc, #388]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ecc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003ed0:	0e1b      	lsrs	r3, r3, #24
 8003ed2:	f003 030f 	and.w	r3, r3, #15
 8003ed6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	019a      	lsls	r2, r3, #6
 8003ede:	693b      	ldr	r3, [r7, #16]
 8003ee0:	041b      	lsls	r3, r3, #16
 8003ee2:	431a      	orrs	r2, r3
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	061b      	lsls	r3, r3, #24
 8003ee8:	431a      	orrs	r2, r3
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	071b      	lsls	r3, r3, #28
 8003ef0:	4957      	ldr	r1, [pc, #348]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d004      	beq.n	8003f0e <HAL_RCCEx_PeriphCLKConfig+0x586>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d00a      	beq.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0x59c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d02e      	beq.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f22:	d129      	bne.n	8003f78 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003f24:	4b4a      	ldr	r3, [pc, #296]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f2a:	0c1b      	lsrs	r3, r3, #16
 8003f2c:	f003 0303 	and.w	r3, r3, #3
 8003f30:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f32:	4b47      	ldr	r3, [pc, #284]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f38:	0f1b      	lsrs	r3, r3, #28
 8003f3a:	f003 0307 	and.w	r3, r3, #7
 8003f3e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	019a      	lsls	r2, r3, #6
 8003f46:	693b      	ldr	r3, [r7, #16]
 8003f48:	041b      	lsls	r3, r3, #16
 8003f4a:	431a      	orrs	r2, r3
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	68db      	ldr	r3, [r3, #12]
 8003f50:	061b      	lsls	r3, r3, #24
 8003f52:	431a      	orrs	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	071b      	lsls	r3, r3, #28
 8003f58:	493d      	ldr	r1, [pc, #244]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003f60:	4b3b      	ldr	r3, [pc, #236]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f66:	f023 021f 	bic.w	r2, r3, #31
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6e:	3b01      	subs	r3, #1
 8003f70:	4937      	ldr	r1, [pc, #220]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d01d      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003f84:	4b32      	ldr	r3, [pc, #200]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f8a:	0e1b      	lsrs	r3, r3, #24
 8003f8c:	f003 030f 	and.w	r3, r3, #15
 8003f90:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003f92:	4b2f      	ldr	r3, [pc, #188]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003f98:	0f1b      	lsrs	r3, r3, #28
 8003f9a:	f003 0307 	and.w	r3, r3, #7
 8003f9e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	019a      	lsls	r2, r3, #6
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	041b      	lsls	r3, r3, #16
 8003fac:	431a      	orrs	r2, r3
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	061b      	lsls	r3, r3, #24
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	071b      	lsls	r3, r3, #28
 8003fb8:	4925      	ldr	r1, [pc, #148]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d011      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x668>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	685b      	ldr	r3, [r3, #4]
 8003fd0:	019a      	lsls	r2, r3, #6
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	041b      	lsls	r3, r3, #16
 8003fd8:	431a      	orrs	r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	061b      	lsls	r3, r3, #24
 8003fe0:	431a      	orrs	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	689b      	ldr	r3, [r3, #8]
 8003fe6:	071b      	lsls	r3, r3, #28
 8003fe8:	4919      	ldr	r1, [pc, #100]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003fea:	4313      	orrs	r3, r2
 8003fec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003ff0:	4b17      	ldr	r3, [pc, #92]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a16      	ldr	r2, [pc, #88]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8003ff6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ffc:	f7fc ffda 	bl	8000fb4 <HAL_GetTick>
 8004000:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004002:	e008      	b.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x68e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004004:	f7fc ffd6 	bl	8000fb4 <HAL_GetTick>
 8004008:	4602      	mov	r2, r0
 800400a:	697b      	ldr	r3, [r7, #20]
 800400c:	1ad3      	subs	r3, r2, r3
 800400e:	2b64      	cmp	r3, #100	; 0x64
 8004010:	d901      	bls.n	8004016 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004012:	2303      	movs	r3, #3
 8004014:	e0d7      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004016:	4b0e      	ldr	r3, [pc, #56]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800401e:	2b00      	cmp	r3, #0
 8004020:	d0f0      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	2b01      	cmp	r3, #1
 8004026:	f040 80cd 	bne.w	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800402a:	4b09      	ldr	r3, [pc, #36]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a08      	ldr	r2, [pc, #32]	; (8004050 <HAL_RCCEx_PeriphCLKConfig+0x6c8>)
 8004030:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004034:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004036:	f7fc ffbd 	bl	8000fb4 <HAL_GetTick>
 800403a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800403c:	e00a      	b.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800403e:	f7fc ffb9 	bl	8000fb4 <HAL_GetTick>
 8004042:	4602      	mov	r2, r0
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	1ad3      	subs	r3, r2, r3
 8004048:	2b64      	cmp	r3, #100	; 0x64
 800404a:	d903      	bls.n	8004054 <HAL_RCCEx_PeriphCLKConfig+0x6cc>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e0ba      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
 8004050:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004054:	4b5e      	ldr	r3, [pc, #376]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800405c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004060:	d0ed      	beq.n	800403e <HAL_RCCEx_PeriphCLKConfig+0x6b6>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d003      	beq.n	8004076 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004072:	2b00      	cmp	r3, #0
 8004074:	d009      	beq.n	800408a <HAL_RCCEx_PeriphCLKConfig+0x702>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800407e:	2b00      	cmp	r3, #0
 8004080:	d02e      	beq.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d12a      	bne.n	80040e0 <HAL_RCCEx_PeriphCLKConfig+0x758>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800408a:	4b51      	ldr	r3, [pc, #324]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800408c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004090:	0c1b      	lsrs	r3, r3, #16
 8004092:	f003 0303 	and.w	r3, r3, #3
 8004096:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004098:	4b4d      	ldr	r3, [pc, #308]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800409a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409e:	0f1b      	lsrs	r3, r3, #28
 80040a0:	f003 0307 	and.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	019a      	lsls	r2, r3, #6
 80040ac:	693b      	ldr	r3, [r7, #16]
 80040ae:	041b      	lsls	r3, r3, #16
 80040b0:	431a      	orrs	r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	061b      	lsls	r3, r3, #24
 80040b8:	431a      	orrs	r2, r3
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	071b      	lsls	r3, r3, #28
 80040be:	4944      	ldr	r1, [pc, #272]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040c0:	4313      	orrs	r3, r2
 80040c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80040c6:	4b42      	ldr	r3, [pc, #264]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80040cc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040d4:	3b01      	subs	r3, #1
 80040d6:	021b      	lsls	r3, r3, #8
 80040d8:	493d      	ldr	r1, [pc, #244]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040da:	4313      	orrs	r3, r2
 80040dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d022      	beq.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f4:	d11d      	bne.n	8004132 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80040f6:	4b36      	ldr	r3, [pc, #216]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80040f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040fc:	0e1b      	lsrs	r3, r3, #24
 80040fe:	f003 030f 	and.w	r3, r3, #15
 8004102:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004104:	4b32      	ldr	r3, [pc, #200]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800410a:	0f1b      	lsrs	r3, r3, #28
 800410c:	f003 0307 	and.w	r3, r3, #7
 8004110:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	019a      	lsls	r2, r3, #6
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	041b      	lsls	r3, r3, #16
 800411e:	431a      	orrs	r2, r3
 8004120:	693b      	ldr	r3, [r7, #16]
 8004122:	061b      	lsls	r3, r3, #24
 8004124:	431a      	orrs	r2, r3
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	071b      	lsls	r3, r3, #28
 800412a:	4929      	ldr	r1, [pc, #164]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	f003 0308 	and.w	r3, r3, #8
 800413a:	2b00      	cmp	r3, #0
 800413c:	d028      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x808>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800413e:	4b24      	ldr	r3, [pc, #144]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004144:	0e1b      	lsrs	r3, r3, #24
 8004146:	f003 030f 	and.w	r3, r3, #15
 800414a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800414c:	4b20      	ldr	r3, [pc, #128]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800414e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004152:	0c1b      	lsrs	r3, r3, #16
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	695b      	ldr	r3, [r3, #20]
 800415e:	019a      	lsls	r2, r3, #6
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	041b      	lsls	r3, r3, #16
 8004164:	431a      	orrs	r2, r3
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	061b      	lsls	r3, r3, #24
 800416a:	431a      	orrs	r2, r3
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	69db      	ldr	r3, [r3, #28]
 8004170:	071b      	lsls	r3, r3, #28
 8004172:	4917      	ldr	r1, [pc, #92]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004174:	4313      	orrs	r3, r2
 8004176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800417a:	4b15      	ldr	r3, [pc, #84]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800417c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004188:	4911      	ldr	r1, [pc, #68]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004190:	4b0f      	ldr	r3, [pc, #60]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a0e      	ldr	r2, [pc, #56]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 8004196:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800419a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800419c:	f7fc ff0a 	bl	8000fb4 <HAL_GetTick>
 80041a0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041a2:	e008      	b.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80041a4:	f7fc ff06 	bl	8000fb4 <HAL_GetTick>
 80041a8:	4602      	mov	r2, r0
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	1ad3      	subs	r3, r2, r3
 80041ae:	2b64      	cmp	r3, #100	; 0x64
 80041b0:	d901      	bls.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x82e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e007      	b.n	80041c6 <HAL_RCCEx_PeriphCLKConfig+0x83e>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80041b6:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_RCCEx_PeriphCLKConfig+0x848>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041c2:	d1ef      	bne.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x81c>
      }
    }
  }
  return HAL_OK;
 80041c4:	2300      	movs	r3, #0
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3720      	adds	r7, #32
 80041ca:	46bd      	mov	sp, r7
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	bf00      	nop
 80041d0:	40023800 	.word	0x40023800

080041d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e040      	b.n	8004268 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d106      	bne.n	80041fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f7fc fda4 	bl	8000d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2224      	movs	r2, #36	; 0x24
 8004200:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0201 	bic.w	r2, r2, #1
 8004210:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004212:	6878      	ldr	r0, [r7, #4]
 8004214:	f000 f8be 	bl	8004394 <UART_SetConfig>
 8004218:	4603      	mov	r3, r0
 800421a:	2b01      	cmp	r3, #1
 800421c:	d101      	bne.n	8004222 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e022      	b.n	8004268 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d002      	beq.n	8004230 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fb5c 	bl	80048e8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	685a      	ldr	r2, [r3, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800423e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	689a      	ldr	r2, [r3, #8]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800424e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004260:	6878      	ldr	r0, [r7, #4]
 8004262:	f000 fbe3 	bl	8004a2c <UART_CheckIdleState>
 8004266:	4603      	mov	r3, r0
}
 8004268:	4618      	mov	r0, r3
 800426a:	3708      	adds	r7, #8
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	60f8      	str	r0, [r7, #12]
 8004278:	60b9      	str	r1, [r7, #8]
 800427a:	603b      	str	r3, [r7, #0]
 800427c:	4613      	mov	r3, r2
 800427e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004284:	2b20      	cmp	r3, #32
 8004286:	d17f      	bne.n	8004388 <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	2b00      	cmp	r3, #0
 800428c:	d002      	beq.n	8004294 <HAL_UART_Transmit+0x24>
 800428e:	88fb      	ldrh	r3, [r7, #6]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d101      	bne.n	8004298 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e078      	b.n	800438a <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800429e:	2b01      	cmp	r3, #1
 80042a0:	d101      	bne.n	80042a6 <HAL_UART_Transmit+0x36>
 80042a2:	2302      	movs	r3, #2
 80042a4:	e071      	b.n	800438a <HAL_UART_Transmit+0x11a>
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2201      	movs	r2, #1
 80042aa:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2221      	movs	r2, #33	; 0x21
 80042b8:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80042ba:	f7fc fe7b 	bl	8000fb4 <HAL_GetTick>
 80042be:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d8:	d108      	bne.n	80042ec <HAL_UART_Transmit+0x7c>
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	691b      	ldr	r3, [r3, #16]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d104      	bne.n	80042ec <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 80042e2:	2300      	movs	r3, #0
 80042e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	61bb      	str	r3, [r7, #24]
 80042ea:	e003      	b.n	80042f4 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f0:	2300      	movs	r3, #0
 80042f2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 80042fc:	e02c      	b.n	8004358 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	2200      	movs	r2, #0
 8004306:	2180      	movs	r1, #128	; 0x80
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 fbd4 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8004314:	2303      	movs	r3, #3
 8004316:	e038      	b.n	800438a <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	881b      	ldrh	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800432c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	3302      	adds	r3, #2
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	e007      	b.n	8004346 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004336:	69fb      	ldr	r3, [r7, #28]
 8004338:	781a      	ldrb	r2, [r3, #0]
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004340:	69fb      	ldr	r3, [r7, #28]
 8004342:	3301      	adds	r3, #1
 8004344:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800434c:	b29b      	uxth	r3, r3
 800434e:	3b01      	subs	r3, #1
 8004350:	b29a      	uxth	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800435e:	b29b      	uxth	r3, r3
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1cc      	bne.n	80042fe <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	2200      	movs	r2, #0
 800436c:	2140      	movs	r1, #64	; 0x40
 800436e:	68f8      	ldr	r0, [r7, #12]
 8004370:	f000 fba1 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004374:	4603      	mov	r3, r0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d001      	beq.n	800437e <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e005      	b.n	800438a <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2220      	movs	r2, #32
 8004382:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}
	...

08004394 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b088      	sub	sp, #32
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800439c:	2300      	movs	r3, #0
 800439e:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 80043a0:	2300      	movs	r3, #0
 80043a2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689a      	ldr	r2, [r3, #8]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	431a      	orrs	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	695b      	ldr	r3, [r3, #20]
 80043b2:	431a      	orrs	r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	69db      	ldr	r3, [r3, #28]
 80043b8:	4313      	orrs	r3, r2
 80043ba:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	4bb1      	ldr	r3, [pc, #708]	; (8004688 <UART_SetConfig+0x2f4>)
 80043c4:	4013      	ands	r3, r2
 80043c6:	687a      	ldr	r2, [r7, #4]
 80043c8:	6812      	ldr	r2, [r2, #0]
 80043ca:	6939      	ldr	r1, [r7, #16]
 80043cc:	430b      	orrs	r3, r1
 80043ce:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	68da      	ldr	r2, [r3, #12]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	430a      	orrs	r2, r1
 80043e4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	693a      	ldr	r2, [r7, #16]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	689b      	ldr	r3, [r3, #8]
 80043fc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	693a      	ldr	r2, [r7, #16]
 8004406:	430a      	orrs	r2, r1
 8004408:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a9f      	ldr	r2, [pc, #636]	; (800468c <UART_SetConfig+0x2f8>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d121      	bne.n	8004458 <UART_SetConfig+0xc4>
 8004414:	4b9e      	ldr	r3, [pc, #632]	; (8004690 <UART_SetConfig+0x2fc>)
 8004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800441a:	f003 0303 	and.w	r3, r3, #3
 800441e:	2b03      	cmp	r3, #3
 8004420:	d816      	bhi.n	8004450 <UART_SetConfig+0xbc>
 8004422:	a201      	add	r2, pc, #4	; (adr r2, 8004428 <UART_SetConfig+0x94>)
 8004424:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004428:	08004439 	.word	0x08004439
 800442c:	08004445 	.word	0x08004445
 8004430:	0800443f 	.word	0x0800443f
 8004434:	0800444b 	.word	0x0800444b
 8004438:	2301      	movs	r3, #1
 800443a:	77fb      	strb	r3, [r7, #31]
 800443c:	e151      	b.n	80046e2 <UART_SetConfig+0x34e>
 800443e:	2302      	movs	r3, #2
 8004440:	77fb      	strb	r3, [r7, #31]
 8004442:	e14e      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004444:	2304      	movs	r3, #4
 8004446:	77fb      	strb	r3, [r7, #31]
 8004448:	e14b      	b.n	80046e2 <UART_SetConfig+0x34e>
 800444a:	2308      	movs	r3, #8
 800444c:	77fb      	strb	r3, [r7, #31]
 800444e:	e148      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004450:	2310      	movs	r3, #16
 8004452:	77fb      	strb	r3, [r7, #31]
 8004454:	bf00      	nop
 8004456:	e144      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	4a8d      	ldr	r2, [pc, #564]	; (8004694 <UART_SetConfig+0x300>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d134      	bne.n	80044cc <UART_SetConfig+0x138>
 8004462:	4b8b      	ldr	r3, [pc, #556]	; (8004690 <UART_SetConfig+0x2fc>)
 8004464:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004468:	f003 030c 	and.w	r3, r3, #12
 800446c:	2b0c      	cmp	r3, #12
 800446e:	d829      	bhi.n	80044c4 <UART_SetConfig+0x130>
 8004470:	a201      	add	r2, pc, #4	; (adr r2, 8004478 <UART_SetConfig+0xe4>)
 8004472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004476:	bf00      	nop
 8004478:	080044ad 	.word	0x080044ad
 800447c:	080044c5 	.word	0x080044c5
 8004480:	080044c5 	.word	0x080044c5
 8004484:	080044c5 	.word	0x080044c5
 8004488:	080044b9 	.word	0x080044b9
 800448c:	080044c5 	.word	0x080044c5
 8004490:	080044c5 	.word	0x080044c5
 8004494:	080044c5 	.word	0x080044c5
 8004498:	080044b3 	.word	0x080044b3
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044c5 	.word	0x080044c5
 80044a4:	080044c5 	.word	0x080044c5
 80044a8:	080044bf 	.word	0x080044bf
 80044ac:	2300      	movs	r3, #0
 80044ae:	77fb      	strb	r3, [r7, #31]
 80044b0:	e117      	b.n	80046e2 <UART_SetConfig+0x34e>
 80044b2:	2302      	movs	r3, #2
 80044b4:	77fb      	strb	r3, [r7, #31]
 80044b6:	e114      	b.n	80046e2 <UART_SetConfig+0x34e>
 80044b8:	2304      	movs	r3, #4
 80044ba:	77fb      	strb	r3, [r7, #31]
 80044bc:	e111      	b.n	80046e2 <UART_SetConfig+0x34e>
 80044be:	2308      	movs	r3, #8
 80044c0:	77fb      	strb	r3, [r7, #31]
 80044c2:	e10e      	b.n	80046e2 <UART_SetConfig+0x34e>
 80044c4:	2310      	movs	r3, #16
 80044c6:	77fb      	strb	r3, [r7, #31]
 80044c8:	bf00      	nop
 80044ca:	e10a      	b.n	80046e2 <UART_SetConfig+0x34e>
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a71      	ldr	r2, [pc, #452]	; (8004698 <UART_SetConfig+0x304>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d120      	bne.n	8004518 <UART_SetConfig+0x184>
 80044d6:	4b6e      	ldr	r3, [pc, #440]	; (8004690 <UART_SetConfig+0x2fc>)
 80044d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80044dc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80044e0:	2b10      	cmp	r3, #16
 80044e2:	d00f      	beq.n	8004504 <UART_SetConfig+0x170>
 80044e4:	2b10      	cmp	r3, #16
 80044e6:	d802      	bhi.n	80044ee <UART_SetConfig+0x15a>
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d005      	beq.n	80044f8 <UART_SetConfig+0x164>
 80044ec:	e010      	b.n	8004510 <UART_SetConfig+0x17c>
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d005      	beq.n	80044fe <UART_SetConfig+0x16a>
 80044f2:	2b30      	cmp	r3, #48	; 0x30
 80044f4:	d009      	beq.n	800450a <UART_SetConfig+0x176>
 80044f6:	e00b      	b.n	8004510 <UART_SetConfig+0x17c>
 80044f8:	2300      	movs	r3, #0
 80044fa:	77fb      	strb	r3, [r7, #31]
 80044fc:	e0f1      	b.n	80046e2 <UART_SetConfig+0x34e>
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e0ee      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004504:	2304      	movs	r3, #4
 8004506:	77fb      	strb	r3, [r7, #31]
 8004508:	e0eb      	b.n	80046e2 <UART_SetConfig+0x34e>
 800450a:	2308      	movs	r3, #8
 800450c:	77fb      	strb	r3, [r7, #31]
 800450e:	e0e8      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004510:	2310      	movs	r3, #16
 8004512:	77fb      	strb	r3, [r7, #31]
 8004514:	bf00      	nop
 8004516:	e0e4      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	4a5f      	ldr	r2, [pc, #380]	; (800469c <UART_SetConfig+0x308>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d120      	bne.n	8004564 <UART_SetConfig+0x1d0>
 8004522:	4b5b      	ldr	r3, [pc, #364]	; (8004690 <UART_SetConfig+0x2fc>)
 8004524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004528:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800452c:	2b40      	cmp	r3, #64	; 0x40
 800452e:	d00f      	beq.n	8004550 <UART_SetConfig+0x1bc>
 8004530:	2b40      	cmp	r3, #64	; 0x40
 8004532:	d802      	bhi.n	800453a <UART_SetConfig+0x1a6>
 8004534:	2b00      	cmp	r3, #0
 8004536:	d005      	beq.n	8004544 <UART_SetConfig+0x1b0>
 8004538:	e010      	b.n	800455c <UART_SetConfig+0x1c8>
 800453a:	2b80      	cmp	r3, #128	; 0x80
 800453c:	d005      	beq.n	800454a <UART_SetConfig+0x1b6>
 800453e:	2bc0      	cmp	r3, #192	; 0xc0
 8004540:	d009      	beq.n	8004556 <UART_SetConfig+0x1c2>
 8004542:	e00b      	b.n	800455c <UART_SetConfig+0x1c8>
 8004544:	2300      	movs	r3, #0
 8004546:	77fb      	strb	r3, [r7, #31]
 8004548:	e0cb      	b.n	80046e2 <UART_SetConfig+0x34e>
 800454a:	2302      	movs	r3, #2
 800454c:	77fb      	strb	r3, [r7, #31]
 800454e:	e0c8      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004550:	2304      	movs	r3, #4
 8004552:	77fb      	strb	r3, [r7, #31]
 8004554:	e0c5      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004556:	2308      	movs	r3, #8
 8004558:	77fb      	strb	r3, [r7, #31]
 800455a:	e0c2      	b.n	80046e2 <UART_SetConfig+0x34e>
 800455c:	2310      	movs	r3, #16
 800455e:	77fb      	strb	r3, [r7, #31]
 8004560:	bf00      	nop
 8004562:	e0be      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4a4d      	ldr	r2, [pc, #308]	; (80046a0 <UART_SetConfig+0x30c>)
 800456a:	4293      	cmp	r3, r2
 800456c:	d124      	bne.n	80045b8 <UART_SetConfig+0x224>
 800456e:	4b48      	ldr	r3, [pc, #288]	; (8004690 <UART_SetConfig+0x2fc>)
 8004570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004574:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004578:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457c:	d012      	beq.n	80045a4 <UART_SetConfig+0x210>
 800457e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004582:	d802      	bhi.n	800458a <UART_SetConfig+0x1f6>
 8004584:	2b00      	cmp	r3, #0
 8004586:	d007      	beq.n	8004598 <UART_SetConfig+0x204>
 8004588:	e012      	b.n	80045b0 <UART_SetConfig+0x21c>
 800458a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800458e:	d006      	beq.n	800459e <UART_SetConfig+0x20a>
 8004590:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004594:	d009      	beq.n	80045aa <UART_SetConfig+0x216>
 8004596:	e00b      	b.n	80045b0 <UART_SetConfig+0x21c>
 8004598:	2300      	movs	r3, #0
 800459a:	77fb      	strb	r3, [r7, #31]
 800459c:	e0a1      	b.n	80046e2 <UART_SetConfig+0x34e>
 800459e:	2302      	movs	r3, #2
 80045a0:	77fb      	strb	r3, [r7, #31]
 80045a2:	e09e      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045a4:	2304      	movs	r3, #4
 80045a6:	77fb      	strb	r3, [r7, #31]
 80045a8:	e09b      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045aa:	2308      	movs	r3, #8
 80045ac:	77fb      	strb	r3, [r7, #31]
 80045ae:	e098      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045b0:	2310      	movs	r3, #16
 80045b2:	77fb      	strb	r3, [r7, #31]
 80045b4:	bf00      	nop
 80045b6:	e094      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	4a39      	ldr	r2, [pc, #228]	; (80046a4 <UART_SetConfig+0x310>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d124      	bne.n	800460c <UART_SetConfig+0x278>
 80045c2:	4b33      	ldr	r3, [pc, #204]	; (8004690 <UART_SetConfig+0x2fc>)
 80045c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80045cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d0:	d012      	beq.n	80045f8 <UART_SetConfig+0x264>
 80045d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80045d6:	d802      	bhi.n	80045de <UART_SetConfig+0x24a>
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d007      	beq.n	80045ec <UART_SetConfig+0x258>
 80045dc:	e012      	b.n	8004604 <UART_SetConfig+0x270>
 80045de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045e2:	d006      	beq.n	80045f2 <UART_SetConfig+0x25e>
 80045e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80045e8:	d009      	beq.n	80045fe <UART_SetConfig+0x26a>
 80045ea:	e00b      	b.n	8004604 <UART_SetConfig+0x270>
 80045ec:	2301      	movs	r3, #1
 80045ee:	77fb      	strb	r3, [r7, #31]
 80045f0:	e077      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045f2:	2302      	movs	r3, #2
 80045f4:	77fb      	strb	r3, [r7, #31]
 80045f6:	e074      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045f8:	2304      	movs	r3, #4
 80045fa:	77fb      	strb	r3, [r7, #31]
 80045fc:	e071      	b.n	80046e2 <UART_SetConfig+0x34e>
 80045fe:	2308      	movs	r3, #8
 8004600:	77fb      	strb	r3, [r7, #31]
 8004602:	e06e      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004604:	2310      	movs	r3, #16
 8004606:	77fb      	strb	r3, [r7, #31]
 8004608:	bf00      	nop
 800460a:	e06a      	b.n	80046e2 <UART_SetConfig+0x34e>
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a25      	ldr	r2, [pc, #148]	; (80046a8 <UART_SetConfig+0x314>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d124      	bne.n	8004660 <UART_SetConfig+0x2cc>
 8004616:	4b1e      	ldr	r3, [pc, #120]	; (8004690 <UART_SetConfig+0x2fc>)
 8004618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800461c:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004620:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004624:	d012      	beq.n	800464c <UART_SetConfig+0x2b8>
 8004626:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800462a:	d802      	bhi.n	8004632 <UART_SetConfig+0x29e>
 800462c:	2b00      	cmp	r3, #0
 800462e:	d007      	beq.n	8004640 <UART_SetConfig+0x2ac>
 8004630:	e012      	b.n	8004658 <UART_SetConfig+0x2c4>
 8004632:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004636:	d006      	beq.n	8004646 <UART_SetConfig+0x2b2>
 8004638:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800463c:	d009      	beq.n	8004652 <UART_SetConfig+0x2be>
 800463e:	e00b      	b.n	8004658 <UART_SetConfig+0x2c4>
 8004640:	2300      	movs	r3, #0
 8004642:	77fb      	strb	r3, [r7, #31]
 8004644:	e04d      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004646:	2302      	movs	r3, #2
 8004648:	77fb      	strb	r3, [r7, #31]
 800464a:	e04a      	b.n	80046e2 <UART_SetConfig+0x34e>
 800464c:	2304      	movs	r3, #4
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e047      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004652:	2308      	movs	r3, #8
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e044      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004658:	2310      	movs	r3, #16
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	bf00      	nop
 800465e:	e040      	b.n	80046e2 <UART_SetConfig+0x34e>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a11      	ldr	r2, [pc, #68]	; (80046ac <UART_SetConfig+0x318>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d139      	bne.n	80046de <UART_SetConfig+0x34a>
 800466a:	4b09      	ldr	r3, [pc, #36]	; (8004690 <UART_SetConfig+0x2fc>)
 800466c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004670:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004674:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004678:	d027      	beq.n	80046ca <UART_SetConfig+0x336>
 800467a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800467e:	d817      	bhi.n	80046b0 <UART_SetConfig+0x31c>
 8004680:	2b00      	cmp	r3, #0
 8004682:	d01c      	beq.n	80046be <UART_SetConfig+0x32a>
 8004684:	e027      	b.n	80046d6 <UART_SetConfig+0x342>
 8004686:	bf00      	nop
 8004688:	efff69f3 	.word	0xefff69f3
 800468c:	40011000 	.word	0x40011000
 8004690:	40023800 	.word	0x40023800
 8004694:	40004400 	.word	0x40004400
 8004698:	40004800 	.word	0x40004800
 800469c:	40004c00 	.word	0x40004c00
 80046a0:	40005000 	.word	0x40005000
 80046a4:	40011400 	.word	0x40011400
 80046a8:	40007800 	.word	0x40007800
 80046ac:	40007c00 	.word	0x40007c00
 80046b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046b4:	d006      	beq.n	80046c4 <UART_SetConfig+0x330>
 80046b6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80046ba:	d009      	beq.n	80046d0 <UART_SetConfig+0x33c>
 80046bc:	e00b      	b.n	80046d6 <UART_SetConfig+0x342>
 80046be:	2300      	movs	r3, #0
 80046c0:	77fb      	strb	r3, [r7, #31]
 80046c2:	e00e      	b.n	80046e2 <UART_SetConfig+0x34e>
 80046c4:	2302      	movs	r3, #2
 80046c6:	77fb      	strb	r3, [r7, #31]
 80046c8:	e00b      	b.n	80046e2 <UART_SetConfig+0x34e>
 80046ca:	2304      	movs	r3, #4
 80046cc:	77fb      	strb	r3, [r7, #31]
 80046ce:	e008      	b.n	80046e2 <UART_SetConfig+0x34e>
 80046d0:	2308      	movs	r3, #8
 80046d2:	77fb      	strb	r3, [r7, #31]
 80046d4:	e005      	b.n	80046e2 <UART_SetConfig+0x34e>
 80046d6:	2310      	movs	r3, #16
 80046d8:	77fb      	strb	r3, [r7, #31]
 80046da:	bf00      	nop
 80046dc:	e001      	b.n	80046e2 <UART_SetConfig+0x34e>
 80046de:	2310      	movs	r3, #16
 80046e0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	69db      	ldr	r3, [r3, #28]
 80046e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046ea:	d17f      	bne.n	80047ec <UART_SetConfig+0x458>
  {
    switch (clocksource)
 80046ec:	7ffb      	ldrb	r3, [r7, #31]
 80046ee:	2b08      	cmp	r3, #8
 80046f0:	d85c      	bhi.n	80047ac <UART_SetConfig+0x418>
 80046f2:	a201      	add	r2, pc, #4	; (adr r2, 80046f8 <UART_SetConfig+0x364>)
 80046f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f8:	0800471d 	.word	0x0800471d
 80046fc:	0800473d 	.word	0x0800473d
 8004700:	0800475d 	.word	0x0800475d
 8004704:	080047ad 	.word	0x080047ad
 8004708:	08004775 	.word	0x08004775
 800470c:	080047ad 	.word	0x080047ad
 8004710:	080047ad 	.word	0x080047ad
 8004714:	080047ad 	.word	0x080047ad
 8004718:	08004795 	.word	0x08004795
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800471c:	f7ff f90c 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8004720:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	005a      	lsls	r2, r3, #1
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	085b      	lsrs	r3, r3, #1
 800472c:	441a      	add	r2, r3
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	fbb2 f3f3 	udiv	r3, r2, r3
 8004736:	b29b      	uxth	r3, r3
 8004738:	61bb      	str	r3, [r7, #24]
        break;
 800473a:	e03a      	b.n	80047b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800473c:	f7ff f910 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 8004740:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	005a      	lsls	r2, r3, #1
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	085b      	lsrs	r3, r3, #1
 800474c:	441a      	add	r2, r3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	fbb2 f3f3 	udiv	r3, r2, r3
 8004756:	b29b      	uxth	r3, r3
 8004758:	61bb      	str	r3, [r7, #24]
        break;
 800475a:	e02a      	b.n	80047b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	085a      	lsrs	r2, r3, #1
 8004762:	4b5f      	ldr	r3, [pc, #380]	; (80048e0 <UART_SetConfig+0x54c>)
 8004764:	4413      	add	r3, r2
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	6852      	ldr	r2, [r2, #4]
 800476a:	fbb3 f3f2 	udiv	r3, r3, r2
 800476e:	b29b      	uxth	r3, r3
 8004770:	61bb      	str	r3, [r7, #24]
        break;
 8004772:	e01e      	b.n	80047b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004774:	f7fe fffc 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8004778:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	005a      	lsls	r2, r3, #1
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	085b      	lsrs	r3, r3, #1
 8004784:	441a      	add	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	fbb2 f3f3 	udiv	r3, r2, r3
 800478e:	b29b      	uxth	r3, r3
 8004790:	61bb      	str	r3, [r7, #24]
        break;
 8004792:	e00e      	b.n	80047b2 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	61bb      	str	r3, [r7, #24]
        break;
 80047aa:	e002      	b.n	80047b2 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	75fb      	strb	r3, [r7, #23]
        break;
 80047b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80047b2:	69bb      	ldr	r3, [r7, #24]
 80047b4:	2b0f      	cmp	r3, #15
 80047b6:	d916      	bls.n	80047e6 <UART_SetConfig+0x452>
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047be:	d212      	bcs.n	80047e6 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047c0:	69bb      	ldr	r3, [r7, #24]
 80047c2:	b29b      	uxth	r3, r3
 80047c4:	f023 030f 	bic.w	r3, r3, #15
 80047c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ca:	69bb      	ldr	r3, [r7, #24]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	897b      	ldrh	r3, [r7, #10]
 80047d8:	4313      	orrs	r3, r2
 80047da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	897a      	ldrh	r2, [r7, #10]
 80047e2:	60da      	str	r2, [r3, #12]
 80047e4:	e070      	b.n	80048c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	75fb      	strb	r3, [r7, #23]
 80047ea:	e06d      	b.n	80048c8 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 80047ec:	7ffb      	ldrb	r3, [r7, #31]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d859      	bhi.n	80048a6 <UART_SetConfig+0x512>
 80047f2:	a201      	add	r2, pc, #4	; (adr r2, 80047f8 <UART_SetConfig+0x464>)
 80047f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f8:	0800481d 	.word	0x0800481d
 80047fc:	0800483b 	.word	0x0800483b
 8004800:	08004859 	.word	0x08004859
 8004804:	080048a7 	.word	0x080048a7
 8004808:	08004871 	.word	0x08004871
 800480c:	080048a7 	.word	0x080048a7
 8004810:	080048a7 	.word	0x080048a7
 8004814:	080048a7 	.word	0x080048a7
 8004818:	0800488f 	.word	0x0800488f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800481c:	f7ff f88c 	bl	8003938 <HAL_RCC_GetPCLK1Freq>
 8004820:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	085a      	lsrs	r2, r3, #1
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	441a      	add	r2, r3
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	fbb2 f3f3 	udiv	r3, r2, r3
 8004834:	b29b      	uxth	r3, r3
 8004836:	61bb      	str	r3, [r7, #24]
        break;
 8004838:	e038      	b.n	80048ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800483a:	f7ff f891 	bl	8003960 <HAL_RCC_GetPCLK2Freq>
 800483e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	085a      	lsrs	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	441a      	add	r2, r3
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004852:	b29b      	uxth	r3, r3
 8004854:	61bb      	str	r3, [r7, #24]
        break;
 8004856:	e029      	b.n	80048ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	085a      	lsrs	r2, r3, #1
 800485e:	4b21      	ldr	r3, [pc, #132]	; (80048e4 <UART_SetConfig+0x550>)
 8004860:	4413      	add	r3, r2
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	6852      	ldr	r2, [r2, #4]
 8004866:	fbb3 f3f2 	udiv	r3, r3, r2
 800486a:	b29b      	uxth	r3, r3
 800486c:	61bb      	str	r3, [r7, #24]
        break;
 800486e:	e01d      	b.n	80048ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004870:	f7fe ff7e 	bl	8003770 <HAL_RCC_GetSysClockFreq>
 8004874:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	685b      	ldr	r3, [r3, #4]
 800487a:	085a      	lsrs	r2, r3, #1
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	441a      	add	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	685b      	ldr	r3, [r3, #4]
 8004884:	fbb2 f3f3 	udiv	r3, r2, r3
 8004888:	b29b      	uxth	r3, r3
 800488a:	61bb      	str	r3, [r7, #24]
        break;
 800488c:	e00e      	b.n	80048ac <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	085b      	lsrs	r3, r3, #1
 8004894:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	685b      	ldr	r3, [r3, #4]
 800489c:	fbb2 f3f3 	udiv	r3, r2, r3
 80048a0:	b29b      	uxth	r3, r3
 80048a2:	61bb      	str	r3, [r7, #24]
        break;
 80048a4:	e002      	b.n	80048ac <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	75fb      	strb	r3, [r7, #23]
        break;
 80048aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048ac:	69bb      	ldr	r3, [r7, #24]
 80048ae:	2b0f      	cmp	r3, #15
 80048b0:	d908      	bls.n	80048c4 <UART_SetConfig+0x530>
 80048b2:	69bb      	ldr	r3, [r7, #24]
 80048b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048b8:	d204      	bcs.n	80048c4 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	69ba      	ldr	r2, [r7, #24]
 80048c0:	60da      	str	r2, [r3, #12]
 80048c2:	e001      	b.n	80048c8 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 80048c4:	2301      	movs	r3, #1
 80048c6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2200      	movs	r2, #0
 80048cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80048d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80048d6:	4618      	mov	r0, r3
 80048d8:	3720      	adds	r7, #32
 80048da:	46bd      	mov	sp, r7
 80048dc:	bd80      	pop	{r7, pc}
 80048de:	bf00      	nop
 80048e0:	01e84800 	.word	0x01e84800
 80048e4:	00f42400 	.word	0x00f42400

080048e8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d00a      	beq.n	8004912 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	430a      	orrs	r2, r1
 8004910:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004916:	f003 0302 	and.w	r3, r3, #2
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00a      	beq.n	8004934 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004938:	f003 0304 	and.w	r3, r3, #4
 800493c:	2b00      	cmp	r3, #0
 800493e:	d00a      	beq.n	8004956 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	685b      	ldr	r3, [r3, #4]
 8004946:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	430a      	orrs	r2, r1
 8004954:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	f003 0308 	and.w	r3, r3, #8
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00a      	beq.n	8004978 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	430a      	orrs	r2, r1
 8004976:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800497c:	f003 0310 	and.w	r3, r3, #16
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00a      	beq.n	800499a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f003 0320 	and.w	r3, r3, #32
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00a      	beq.n	80049bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	430a      	orrs	r2, r1
 80049ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d01a      	beq.n	80049fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049e6:	d10a      	bne.n	80049fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	430a      	orrs	r2, r1
 80049fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]
  }
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b086      	sub	sp, #24
 8004a30:	af02      	add	r7, sp, #8
 8004a32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2200      	movs	r2, #0
 8004a38:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8004a3a:	f7fc fabb 	bl	8000fb4 <HAL_GetTick>
 8004a3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	f003 0308 	and.w	r3, r3, #8
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d10e      	bne.n	8004a6c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a52:	9300      	str	r3, [sp, #0]
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	2200      	movs	r2, #0
 8004a58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f82a 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a62:	4603      	mov	r3, r0
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d001      	beq.n	8004a6c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a68:	2303      	movs	r3, #3
 8004a6a:	e020      	b.n	8004aae <UART_CheckIdleState+0x82>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0304 	and.w	r3, r3, #4
 8004a76:	2b04      	cmp	r3, #4
 8004a78:	d10e      	bne.n	8004a98 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	2200      	movs	r2, #0
 8004a84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f814 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d001      	beq.n	8004a98 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a94:	2303      	movs	r3, #3
 8004a96:	e00a      	b.n	8004aae <UART_CheckIdleState+0x82>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2220      	movs	r2, #32
 8004aa2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8004aac:	2300      	movs	r3, #0
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3710      	adds	r7, #16
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b084      	sub	sp, #16
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac6:	e05d      	b.n	8004b84 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	69bb      	ldr	r3, [r7, #24]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d059      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fc fa70 	bl	8000fb4 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae0:	69bb      	ldr	r3, [r7, #24]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d11b      	bne.n	8004b1e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004af4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	689a      	ldr	r2, [r3, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0201 	bic.w	r2, r2, #1
 8004b04:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2220      	movs	r2, #32
 8004b0a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2220      	movs	r2, #32
 8004b10:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2200      	movs	r2, #0
 8004b16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e042      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0304 	and.w	r3, r3, #4
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d02b      	beq.n	8004b84 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	69db      	ldr	r3, [r3, #28]
 8004b32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	d123      	bne.n	8004b84 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b44:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b54:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	689a      	ldr	r2, [r3, #8]
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f022 0201 	bic.w	r2, r2, #1
 8004b64:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	2220      	movs	r2, #32
 8004b6a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2220      	movs	r2, #32
 8004b70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2220      	movs	r2, #32
 8004b76:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e00f      	b.n	8004ba4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	69da      	ldr	r2, [r3, #28]
 8004b8a:	68bb      	ldr	r3, [r7, #8]
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	429a      	cmp	r2, r3
 8004b92:	bf0c      	ite	eq
 8004b94:	2301      	moveq	r3, #1
 8004b96:	2300      	movne	r3, #0
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	429a      	cmp	r2, r3
 8004ba0:	d092      	beq.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ba2:	2300      	movs	r3, #0
}
 8004ba4:	4618      	mov	r0, r3
 8004ba6:	3710      	adds	r7, #16
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004bac:	b084      	sub	sp, #16
 8004bae:	b580      	push	{r7, lr}
 8004bb0:	b084      	sub	sp, #16
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	6078      	str	r0, [r7, #4]
 8004bb6:	f107 001c 	add.w	r0, r7, #28
 8004bba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d120      	bne.n	8004c06 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bc8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	68da      	ldr	r2, [r3, #12]
 8004bd4:	4b20      	ldr	r3, [pc, #128]	; (8004c58 <USB_CoreInit+0xac>)
 8004bd6:	4013      	ands	r3, r2
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004be8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d105      	bne.n	8004bfa <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 f942 	bl	8004e84 <USB_CoreReset>
 8004c00:	4603      	mov	r3, r0
 8004c02:	73fb      	strb	r3, [r7, #15]
 8004c04:	e010      	b.n	8004c28 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 f936 	bl	8004e84 <USB_CoreReset>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c20:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c2a:	2b01      	cmp	r3, #1
 8004c2c:	d10b      	bne.n	8004c46 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f043 0206 	orr.w	r2, r3, #6
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c52:	b004      	add	sp, #16
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	ffbdffbf 	.word	0xffbdffbf

08004c5c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	f043 0201 	orr.w	r2, r3, #1
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	370c      	adds	r7, #12
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr

08004c7e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004c7e:	b480      	push	{r7}
 8004c80:	b083      	sub	sp, #12
 8004c82:	af00      	add	r7, sp, #0
 8004c84:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	f023 0201 	bic.w	r2, r3, #1
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004c92:	2300      	movs	r3, #0
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	370c      	adds	r7, #12
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9e:	4770      	bx	lr

08004ca0 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004ca0:	b580      	push	{r7, lr}
 8004ca2:	b082      	sub	sp, #8
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	460b      	mov	r3, r1
 8004caa:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	68db      	ldr	r3, [r3, #12]
 8004cb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004cb8:	78fb      	ldrb	r3, [r7, #3]
 8004cba:	2b01      	cmp	r3, #1
 8004cbc:	d106      	bne.n	8004ccc <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	60da      	str	r2, [r3, #12]
 8004cca:	e00b      	b.n	8004ce4 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004ccc:	78fb      	ldrb	r3, [r7, #3]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d106      	bne.n	8004ce0 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	60da      	str	r2, [r3, #12]
 8004cde:	e001      	b.n	8004ce4 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e003      	b.n	8004cec <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004ce4:	2032      	movs	r0, #50	; 0x32
 8004ce6:	f7fc f971 	bl	8000fcc <HAL_Delay>

  return HAL_OK;
 8004cea:	2300      	movs	r3, #0
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3708      	adds	r7, #8
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
 8004cfc:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004d02:	683b      	ldr	r3, [r7, #0]
 8004d04:	019b      	lsls	r3, r3, #6
 8004d06:	f043 0220 	orr.w	r2, r3, #32
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	3301      	adds	r3, #1
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	4a09      	ldr	r2, [pc, #36]	; (8004d3c <USB_FlushTxFifo+0x48>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d901      	bls.n	8004d20 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e006      	b.n	8004d2e <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f003 0320 	and.w	r3, r3, #32
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d0f0      	beq.n	8004d0e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004d2c:	2300      	movs	r3, #0
}
 8004d2e:	4618      	mov	r0, r3
 8004d30:	3714      	adds	r7, #20
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	00030d40 	.word	0x00030d40

08004d40 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2210      	movs	r2, #16
 8004d50:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <USB_FlushRxFifo+0x40>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0310 	and.w	r3, r3, #16
 8004d6c:	2b10      	cmp	r3, #16
 8004d6e:	d0f0      	beq.n	8004d52 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	00030d40 	.word	0x00030d40

08004d84 <USB_WritePacket>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src, uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004d84:	b480      	push	{r7}
 8004d86:	b089      	sub	sp, #36	; 0x24
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	60f8      	str	r0, [r7, #12]
 8004d8c:	60b9      	str	r1, [r7, #8]
 8004d8e:	4611      	mov	r1, r2
 8004d90:	461a      	mov	r2, r3
 8004d92:	460b      	mov	r3, r1
 8004d94:	71fb      	strb	r3, [r7, #7]
 8004d96:	4613      	mov	r3, r2
 8004d98:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	617b      	str	r3, [r7, #20]
  uint32_t *pSrc = (uint32_t *)src;
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b, i;

  if (dma == 0U)
 8004da2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d11a      	bne.n	8004de0 <USB_WritePacket+0x5c>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004daa:	88bb      	ldrh	r3, [r7, #4]
 8004dac:	3303      	adds	r3, #3
 8004dae:	089b      	lsrs	r3, r3, #2
 8004db0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004db2:	2300      	movs	r3, #0
 8004db4:	61bb      	str	r3, [r7, #24]
 8004db6:	e00f      	b.n	8004dd8 <USB_WritePacket+0x54>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004db8:	79fb      	ldrb	r3, [r7, #7]
 8004dba:	031a      	lsls	r2, r3, #12
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004dc4:	461a      	mov	r2, r3
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	3304      	adds	r3, #4
 8004dd0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004dd2:	69bb      	ldr	r3, [r7, #24]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	61bb      	str	r3, [r7, #24]
 8004dd8:	69ba      	ldr	r2, [r7, #24]
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	d3eb      	bcc.n	8004db8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004de0:	2300      	movs	r3, #0
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3724      	adds	r7, #36	; 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr

08004dee <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b089      	sub	sp, #36	; 0x24
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	60f8      	str	r0, [r7, #12]
 8004df6:	60b9      	str	r1, [r7, #8]
 8004df8:	4613      	mov	r3, r2
 8004dfa:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	617b      	str	r3, [r7, #20]
  uint32_t *pDest = (uint32_t *)dest;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t count32b = ((uint32_t)len + 3U) / 4U;
 8004e04:	88fb      	ldrh	r3, [r7, #6]
 8004e06:	3303      	adds	r3, #3
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	613b      	str	r3, [r7, #16]

  for (i = 0U; i < count32b; i++)
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	61bb      	str	r3, [r7, #24]
 8004e10:	e00b      	b.n	8004e2a <USB_ReadPacket+0x3c>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	601a      	str	r2, [r3, #0]
    pDest++;
 8004e1e:	69fb      	ldr	r3, [r7, #28]
 8004e20:	3304      	adds	r3, #4
 8004e22:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	3301      	adds	r3, #1
 8004e28:	61bb      	str	r3, [r7, #24]
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	429a      	cmp	r2, r3
 8004e30:	d3ef      	bcc.n	8004e12 <USB_ReadPacket+0x24>
  }

  return ((void *)pDest);
 8004e32:	69fb      	ldr	r3, [r7, #28]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3724      	adds	r7, #36	; 0x24
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	f003 0301 	and.w	r3, r3, #1
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	370c      	adds	r7, #12
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e80:	4770      	bx	lr
	...

08004e84 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e84:	b480      	push	{r7}
 8004e86:	b085      	sub	sp, #20
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	3301      	adds	r3, #1
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	4a13      	ldr	r2, [pc, #76]	; (8004ee8 <USB_CoreReset+0x64>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d901      	bls.n	8004ea2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e9e:	2303      	movs	r3, #3
 8004ea0:	e01b      	b.n	8004eda <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	691b      	ldr	r3, [r3, #16]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	daf2      	bge.n	8004e90 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	f043 0201 	orr.w	r2, r3, #1
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	60fb      	str	r3, [r7, #12]
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a09      	ldr	r2, [pc, #36]	; (8004ee8 <USB_CoreReset+0x64>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d901      	bls.n	8004ecc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004ec8:	2303      	movs	r3, #3
 8004eca:	e006      	b.n	8004eda <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	691b      	ldr	r3, [r3, #16]
 8004ed0:	f003 0301 	and.w	r3, r3, #1
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d0f0      	beq.n	8004eba <USB_CoreReset+0x36>

  return HAL_OK;
 8004ed8:	2300      	movs	r3, #0
}
 8004eda:	4618      	mov	r0, r3
 8004edc:	3714      	adds	r7, #20
 8004ede:	46bd      	mov	sp, r7
 8004ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee4:	4770      	bx	lr
 8004ee6:	bf00      	nop
 8004ee8:	00030d40 	.word	0x00030d40

08004eec <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004eec:	b084      	sub	sp, #16
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
 8004ef6:	f107 001c 	add.w	r0, r7, #28
 8004efa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004f08:	461a      	mov	r2, r3
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f12:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	639a      	str	r2, [r3, #56]	; 0x38

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d018      	beq.n	8004f58 <USB_HostInit+0x6c>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d10a      	bne.n	8004f42 <USB_HostInit+0x56>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f3a:	f043 0304 	orr.w	r3, r3, #4
 8004f3e:	6013      	str	r3, [r2, #0]
 8004f40:	e014      	b.n	8004f6c <USB_HostInit+0x80>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	68ba      	ldr	r2, [r7, #8]
 8004f4c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f50:	f023 0304 	bic.w	r3, r3, #4
 8004f54:	6013      	str	r3, [r2, #0]
 8004f56:	e009      	b.n	8004f6c <USB_HostInit+0x80>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68ba      	ldr	r2, [r7, #8]
 8004f62:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f66:	f023 0304 	bic.w	r3, r3, #4
 8004f6a:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004f6c:	2110      	movs	r1, #16
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7ff fec0 	bl	8004cf4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004f74:	6878      	ldr	r0, [r7, #4]
 8004f76:	f7ff fee3 	bl	8004d40 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	60fb      	str	r3, [r7, #12]
 8004f7e:	e015      	b.n	8004fac <USB_HostInit+0xc0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	015a      	lsls	r2, r3, #5
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4413      	add	r3, r2
 8004f88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f8c:	461a      	mov	r2, r3
 8004f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8004f92:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	60fb      	str	r3, [r7, #12]
 8004fac:	6a3b      	ldr	r3, [r7, #32]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	d3e5      	bcc.n	8004f80 <USB_HostInit+0x94>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004fb4:	2101      	movs	r1, #1
 8004fb6:	6878      	ldr	r0, [r7, #4]
 8004fb8:	f000 f8ac 	bl	8005114 <USB_DriveVbus>

  HAL_Delay(200U);
 8004fbc:	20c8      	movs	r0, #200	; 0xc8
 8004fbe:	f7fc f805 	bl	8000fcc <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f04f 32ff 	mov.w	r2, #4294967295
 8004fce:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d00b      	beq.n	8004ff4 <USB_HostInit+0x108>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fe2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a14      	ldr	r2, [pc, #80]	; (8005038 <USB_HostInit+0x14c>)
 8004fe8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	4a13      	ldr	r2, [pc, #76]	; (800503c <USB_HostInit+0x150>)
 8004fee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004ff2:	e009      	b.n	8005008 <USB_HostInit+0x11c>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2280      	movs	r2, #128	; 0x80
 8004ff8:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	4a10      	ldr	r2, [pc, #64]	; (8005040 <USB_HostInit+0x154>)
 8004ffe:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	4a10      	ldr	r2, [pc, #64]	; (8005044 <USB_HostInit+0x158>)
 8005004:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	2b00      	cmp	r3, #0
 800500c:	d105      	bne.n	800501a <USB_HostInit+0x12e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	699b      	ldr	r3, [r3, #24]
 8005012:	f043 0210 	orr.w	r2, r3, #16
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	699a      	ldr	r2, [r3, #24]
 800501e:	4b0a      	ldr	r3, [pc, #40]	; (8005048 <USB_HostInit+0x15c>)
 8005020:	4313      	orrs	r3, r2
 8005022:	687a      	ldr	r2, [r7, #4]
 8005024:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	3710      	adds	r7, #16
 800502c:	46bd      	mov	sp, r7
 800502e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005032:	b004      	add	sp, #16
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	01000200 	.word	0x01000200
 800503c:	00e00300 	.word	0x00e00300
 8005040:	00600080 	.word	0x00600080
 8005044:	004000e0 	.word	0x004000e0
 8005048:	a3200008 	.word	0xa3200008

0800504c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800504c:	b480      	push	{r7}
 800504e:	b085      	sub	sp, #20
 8005050:	af00      	add	r7, sp, #0
 8005052:	6078      	str	r0, [r7, #4]
 8005054:	460b      	mov	r3, r1
 8005056:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800506a:	f023 0303 	bic.w	r3, r3, #3
 800506e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	681a      	ldr	r2, [r3, #0]
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	f003 0303 	and.w	r3, r3, #3
 800507e:	68f9      	ldr	r1, [r7, #12]
 8005080:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005084:	4313      	orrs	r3, r2
 8005086:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005088:	78fb      	ldrb	r3, [r7, #3]
 800508a:	2b01      	cmp	r3, #1
 800508c:	d107      	bne.n	800509e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005094:	461a      	mov	r2, r3
 8005096:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800509a:	6053      	str	r3, [r2, #4]
 800509c:	e009      	b.n	80050b2 <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800509e:	78fb      	ldrb	r3, [r7, #3]
 80050a0:	2b02      	cmp	r3, #2
 80050a2:	d106      	bne.n	80050b2 <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80050aa:	461a      	mov	r2, r3
 80050ac:	f241 7370 	movw	r3, #6000	; 0x1770
 80050b0:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr

080050c0 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80050cc:	2300      	movs	r3, #0
 80050ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050ee:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80050f0:	2064      	movs	r0, #100	; 0x64
 80050f2:	f7fb ff6b 	bl	8000fcc <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050fe:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005102:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8005104:	200a      	movs	r0, #10
 8005106:	f7fb ff61 	bl	8000fcc <HAL_Delay>

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3710      	adds	r7, #16
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <USB_DriveVbus>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	460b      	mov	r3, r1
 800511e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005124:	2300      	movs	r3, #0
 8005126:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005138:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d109      	bne.n	8005158 <USB_DriveVbus+0x44>
 8005144:	78fb      	ldrb	r3, [r7, #3]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d106      	bne.n	8005158 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005152:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005156:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800515e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005162:	d109      	bne.n	8005178 <USB_DriveVbus+0x64>
 8005164:	78fb      	ldrb	r3, [r7, #3]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	68fa      	ldr	r2, [r7, #12]
 800516e:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005172:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005176:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3714      	adds	r7, #20
 800517e:	46bd      	mov	sp, r7
 8005180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005184:	4770      	bx	lr

08005186 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005186:	b480      	push	{r7}
 8005188:	b085      	sub	sp, #20
 800518a:	af00      	add	r7, sp, #0
 800518c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005192:	2300      	movs	r3, #0
 8005194:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	0c5b      	lsrs	r3, r3, #17
 80051a4:	f003 0303 	and.w	r3, r3, #3
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
*/
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b085      	sub	sp, #20
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	b29b      	uxth	r3, r3
}
 80051ca:	4618      	mov	r0, r3
 80051cc:	3714      	adds	r7, #20
 80051ce:	46bd      	mov	sp, r7
 80051d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d4:	4770      	bx	lr
	...

080051d8 <USB_HC_Init>:
                              uint8_t epnum,
                              uint8_t dev_address,
                              uint8_t speed,
                              uint8_t ep_type,
                              uint16_t mps)
{
 80051d8:	b480      	push	{r7}
 80051da:	b087      	sub	sp, #28
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	4608      	mov	r0, r1
 80051e2:	4611      	mov	r1, r2
 80051e4:	461a      	mov	r2, r3
 80051e6:	4603      	mov	r3, r0
 80051e8:	70fb      	strb	r3, [r7, #3]
 80051ea:	460b      	mov	r3, r1
 80051ec:	70bb      	strb	r3, [r7, #2]
 80051ee:	4613      	mov	r3, r2
 80051f0:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80051f2:	2300      	movs	r3, #0
 80051f4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	60bb      	str	r3, [r7, #8]
  uint32_t HCcharEpDir, HCcharLowSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80051fa:	78fb      	ldrb	r3, [r7, #3]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	4413      	add	r3, r2
 8005202:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005206:	461a      	mov	r2, r3
 8005208:	f04f 33ff 	mov.w	r3, #4294967295
 800520c:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800520e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8005212:	2b03      	cmp	r3, #3
 8005214:	d87e      	bhi.n	8005314 <USB_HC_Init+0x13c>
 8005216:	a201      	add	r2, pc, #4	; (adr r2, 800521c <USB_HC_Init+0x44>)
 8005218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800521c:	0800522d 	.word	0x0800522d
 8005220:	080052d7 	.word	0x080052d7
 8005224:	0800522d 	.word	0x0800522d
 8005228:	08005299 	.word	0x08005299
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	461a      	mov	r2, r3
 800523a:	f240 439d 	movw	r3, #1181	; 0x49d
 800523e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005240:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005244:	2b00      	cmp	r3, #0
 8005246:	da10      	bge.n	800526a <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005248:	78fb      	ldrb	r3, [r7, #3]
 800524a:	015a      	lsls	r2, r3, #5
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	4413      	add	r3, r2
 8005250:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	78fa      	ldrb	r2, [r7, #3]
 8005258:	0151      	lsls	r1, r2, #5
 800525a:	68ba      	ldr	r2, [r7, #8]
 800525c:	440a      	add	r2, r1
 800525e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005266:	60d3      	str	r3, [r2, #12]
        if ((USBx->CID & (0x1U << 8)) != 0U)
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
        }
      }
      break;
 8005268:	e057      	b.n	800531a <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800526e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005272:	2b00      	cmp	r3, #0
 8005274:	d051      	beq.n	800531a <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005276:	78fb      	ldrb	r3, [r7, #3]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	4413      	add	r3, r2
 800527e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	68ba      	ldr	r2, [r7, #8]
 800528a:	440a      	add	r2, r1
 800528c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005290:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8005294:	60d3      	str	r3, [r2, #12]
      break;
 8005296:	e040      	b.n	800531a <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005298:	78fb      	ldrb	r3, [r7, #3]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a4:	461a      	mov	r2, r3
 80052a6:	f240 639d 	movw	r3, #1693	; 0x69d
 80052aa:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80052ac:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da34      	bge.n	800531e <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80052b4:	78fb      	ldrb	r3, [r7, #3]
 80052b6:	015a      	lsls	r2, r3, #5
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	4413      	add	r3, r2
 80052bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	78fa      	ldrb	r2, [r7, #3]
 80052c4:	0151      	lsls	r1, r2, #5
 80052c6:	68ba      	ldr	r2, [r7, #8]
 80052c8:	440a      	add	r2, r1
 80052ca:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052d2:	60d3      	str	r3, [r2, #12]
      }

      break;
 80052d4:	e023      	b.n	800531e <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80052d6:	78fb      	ldrb	r3, [r7, #3]
 80052d8:	015a      	lsls	r2, r3, #5
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	4413      	add	r3, r2
 80052de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052e2:	461a      	mov	r2, r3
 80052e4:	f240 2325 	movw	r3, #549	; 0x225
 80052e8:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80052ea:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	da17      	bge.n	8005322 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80052f2:	78fb      	ldrb	r3, [r7, #3]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052fe:	68db      	ldr	r3, [r3, #12]
 8005300:	78fa      	ldrb	r2, [r7, #3]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	68ba      	ldr	r2, [r7, #8]
 8005306:	440a      	add	r2, r1
 8005308:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800530c:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005310:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005312:	e006      	b.n	8005322 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	75fb      	strb	r3, [r7, #23]
      break;
 8005318:	e004      	b.n	8005324 <USB_HC_Init+0x14c>
      break;
 800531a:	bf00      	nop
 800531c:	e002      	b.n	8005324 <USB_HC_Init+0x14c>
      break;
 800531e:	bf00      	nop
 8005320:	e000      	b.n	8005324 <USB_HC_Init+0x14c>
      break;
 8005322:	bf00      	nop
  }

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005324:	68bb      	ldr	r3, [r7, #8]
 8005326:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800532a:	699a      	ldr	r2, [r3, #24]
 800532c:	78fb      	ldrb	r3, [r7, #3]
 800532e:	f003 030f 	and.w	r3, r3, #15
 8005332:	2101      	movs	r1, #1
 8005334:	fa01 f303 	lsl.w	r3, r1, r3
 8005338:	68b9      	ldr	r1, [r7, #8]
 800533a:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800533e:	4313      	orrs	r3, r2
 8005340:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800534e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005352:	2b00      	cmp	r3, #0
 8005354:	da03      	bge.n	800535e <USB_HC_Init+0x186>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8005356:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	e001      	b.n	8005362 <USB_HC_Init+0x18a>
  }
  else
  {
    HCcharEpDir = 0U;
 800535e:	2300      	movs	r3, #0
 8005360:	613b      	str	r3, [r7, #16]
  }

  if (speed == HPRT0_PRTSPD_LOW_SPEED)
 8005362:	f897 3020 	ldrb.w	r3, [r7, #32]
 8005366:	2b02      	cmp	r3, #2
 8005368:	d103      	bne.n	8005372 <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800536a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800536e:	60fb      	str	r3, [r7, #12]
 8005370:	e001      	b.n	8005376 <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005372:	2300      	movs	r3, #0
 8005374:	60fb      	str	r3, [r7, #12]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005376:	787b      	ldrb	r3, [r7, #1]
 8005378:	059b      	lsls	r3, r3, #22
 800537a:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800537e:	78bb      	ldrb	r3, [r7, #2]
 8005380:	02db      	lsls	r3, r3, #11
 8005382:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005386:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005388:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800538c:	049b      	lsls	r3, r3, #18
 800538e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005392:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005394:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8005396:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800539a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053a0:	78fb      	ldrb	r3, [r7, #3]
 80053a2:	0159      	lsls	r1, r3, #5
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	440b      	add	r3, r1
 80053a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053ac:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80053b2:	600b      	str	r3, [r1, #0]

  if (ep_type == EP_TYPE_INTR)
 80053b4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80053b8:	2b03      	cmp	r3, #3
 80053ba:	d10f      	bne.n	80053dc <USB_HC_Init+0x204>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM ;
 80053bc:	78fb      	ldrb	r3, [r7, #3]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	78fa      	ldrb	r2, [r7, #3]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	68ba      	ldr	r2, [r7, #8]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053da:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80053dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80053de:	4618      	mov	r0, r3
 80053e0:	371c      	adds	r7, #28
 80053e2:	46bd      	mov	sp, r7
 80053e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e8:	4770      	bx	lr
 80053ea:	bf00      	nop

080053ec <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b08c      	sub	sp, #48	; 0x30
 80053f0:	af02      	add	r7, sp, #8
 80053f2:	60f8      	str	r0, [r7, #12]
 80053f4:	60b9      	str	r1, [r7, #8]
 80053f6:	4613      	mov	r3, r2
 80053f8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	785b      	ldrb	r3, [r3, #1]
 8005402:	61fb      	str	r3, [r7, #28]
  static __IO uint32_t tmpreg = 0U;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005404:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005408:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800540e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005412:	2b00      	cmp	r3, #0
 8005414:	d028      	beq.n	8005468 <USB_HC_StartXfer+0x7c>
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	791b      	ldrb	r3, [r3, #4]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d124      	bne.n	8005468 <USB_HC_StartXfer+0x7c>
  {
    if ((dma == 0U) && (hc->do_ping == 1U))
 800541e:	79fb      	ldrb	r3, [r7, #7]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <USB_HC_StartXfer+0x50>
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	795b      	ldrb	r3, [r3, #5]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d107      	bne.n	800543c <USB_HC_StartXfer+0x50>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	785b      	ldrb	r3, [r3, #1]
 8005430:	4619      	mov	r1, r3
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 fa2e 	bl	8005894 <USB_DoPing>
      return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e112      	b.n	8005662 <USB_HC_StartXfer+0x276>
    }
    else if (dma == 1U)
 800543c:	79fb      	ldrb	r3, [r7, #7]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d112      	bne.n	8005468 <USB_HC_StartXfer+0x7c>
    {
      USBx_HC(ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET | USB_OTG_HCINTMSK_ACKM);
 8005442:	69fb      	ldr	r3, [r7, #28]
 8005444:	015a      	lsls	r2, r3, #5
 8005446:	6a3b      	ldr	r3, [r7, #32]
 8005448:	4413      	add	r3, r2
 800544a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800544e:	68db      	ldr	r3, [r3, #12]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	0151      	lsls	r1, r2, #5
 8005454:	6a3a      	ldr	r2, [r7, #32]
 8005456:	440a      	add	r2, r1
 8005458:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800545c:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8005460:	60d3      	str	r3, [r2, #12]
      hc->do_ping = 0U;
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	2200      	movs	r2, #0
 8005466:	715a      	strb	r2, [r3, #5]
      /* ... */
    }
  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d018      	beq.n	80054a2 <USB_HC_StartXfer+0xb6>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	691b      	ldr	r3, [r3, #16]
 8005474:	68ba      	ldr	r2, [r7, #8]
 8005476:	8912      	ldrh	r2, [r2, #8]
 8005478:	4413      	add	r3, r2
 800547a:	3b01      	subs	r3, #1
 800547c:	68ba      	ldr	r2, [r7, #8]
 800547e:	8912      	ldrh	r2, [r2, #8]
 8005480:	fbb3 f3f2 	udiv	r3, r3, r2
 8005484:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005486:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005488:	8b7b      	ldrh	r3, [r7, #26]
 800548a:	429a      	cmp	r2, r3
 800548c:	d90b      	bls.n	80054a6 <USB_HC_StartXfer+0xba>
    {
      num_packets = max_hc_pkt_count;
 800548e:	8b7b      	ldrh	r3, [r7, #26]
 8005490:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 8005492:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005494:	68ba      	ldr	r2, [r7, #8]
 8005496:	8912      	ldrh	r2, [r2, #8]
 8005498:	fb02 f203 	mul.w	r2, r2, r3
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	611a      	str	r2, [r3, #16]
 80054a0:	e001      	b.n	80054a6 <USB_HC_StartXfer+0xba>
    }
  }
  else
  {
    num_packets = 1U;
 80054a2:	2301      	movs	r3, #1
 80054a4:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  if (hc->ep_is_in != 0U)
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	78db      	ldrb	r3, [r3, #3]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d006      	beq.n	80054bc <USB_HC_StartXfer+0xd0>
  {
    hc->xfer_len = (uint32_t)num_packets * hc->max_packet;
 80054ae:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	8912      	ldrh	r2, [r2, #8]
 80054b4:	fb02 f203 	mul.w	r2, r2, r3
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	691b      	ldr	r3, [r3, #16]
 80054c0:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054c4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80054c6:	04d9      	lsls	r1, r3, #19
 80054c8:	4b68      	ldr	r3, [pc, #416]	; (800566c <USB_HC_StartXfer+0x280>)
 80054ca:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054cc:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	7a9b      	ldrb	r3, [r3, #10]
 80054d2:	075b      	lsls	r3, r3, #29
 80054d4:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054d8:	69f9      	ldr	r1, [r7, #28]
 80054da:	0148      	lsls	r0, r1, #5
 80054dc:	6a39      	ldr	r1, [r7, #32]
 80054de:	4401      	add	r1, r0
 80054e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054e4:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->xfer_len & USB_OTG_HCTSIZ_XFRSIZ) |
 80054e6:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054e8:	79fb      	ldrb	r3, [r7, #7]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <USB_HC_StartXfer+0x116>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	68d9      	ldr	r1, [r3, #12]
 80054f2:	69fb      	ldr	r3, [r7, #28]
 80054f4:	015a      	lsls	r2, r3, #5
 80054f6:	6a3b      	ldr	r3, [r7, #32]
 80054f8:	4413      	add	r3, r2
 80054fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054fe:	460a      	mov	r2, r1
 8005500:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005502:	6a3b      	ldr	r3, [r7, #32]
 8005504:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	2b00      	cmp	r3, #0
 8005510:	bf0c      	ite	eq
 8005512:	2301      	moveq	r3, #1
 8005514:	2300      	movne	r3, #0
 8005516:	b2db      	uxtb	r3, r3
 8005518:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800551a:	69fb      	ldr	r3, [r7, #28]
 800551c:	015a      	lsls	r2, r3, #5
 800551e:	6a3b      	ldr	r3, [r7, #32]
 8005520:	4413      	add	r3, r2
 8005522:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	69fa      	ldr	r2, [r7, #28]
 800552a:	0151      	lsls	r1, r2, #5
 800552c:	6a3a      	ldr	r2, [r7, #32]
 800552e:	440a      	add	r2, r1
 8005530:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005534:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005538:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800553a:	69fb      	ldr	r3, [r7, #28]
 800553c:	015a      	lsls	r2, r3, #5
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	4413      	add	r3, r2
 8005542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	7e7b      	ldrb	r3, [r7, #25]
 800554a:	075b      	lsls	r3, r3, #29
 800554c:	69f9      	ldr	r1, [r7, #28]
 800554e:	0148      	lsls	r0, r1, #5
 8005550:	6a39      	ldr	r1, [r7, #32]
 8005552:	4401      	add	r1, r0
 8005554:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005558:	4313      	orrs	r3, r2
 800555a:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800555c:	69fb      	ldr	r3, [r7, #28]
 800555e:	015a      	lsls	r2, r3, #5
 8005560:	6a3b      	ldr	r3, [r7, #32]
 8005562:	4413      	add	r3, r2
 8005564:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	4a41      	ldr	r2, [pc, #260]	; (8005670 <USB_HC_StartXfer+0x284>)
 800556c:	6013      	str	r3, [r2, #0]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800556e:	4b40      	ldr	r3, [pc, #256]	; (8005670 <USB_HC_StartXfer+0x284>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005576:	4a3e      	ldr	r2, [pc, #248]	; (8005670 <USB_HC_StartXfer+0x284>)
 8005578:	6013      	str	r3, [r2, #0]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	78db      	ldrb	r3, [r3, #3]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d006      	beq.n	8005590 <USB_HC_StartXfer+0x1a4>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005582:	4b3b      	ldr	r3, [pc, #236]	; (8005670 <USB_HC_StartXfer+0x284>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800558a:	4a39      	ldr	r2, [pc, #228]	; (8005670 <USB_HC_StartXfer+0x284>)
 800558c:	6013      	str	r3, [r2, #0]
 800558e:	e005      	b.n	800559c <USB_HC_StartXfer+0x1b0>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005590:	4b37      	ldr	r3, [pc, #220]	; (8005670 <USB_HC_StartXfer+0x284>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005598:	4a35      	ldr	r2, [pc, #212]	; (8005670 <USB_HC_StartXfer+0x284>)
 800559a:	6013      	str	r3, [r2, #0]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800559c:	4b34      	ldr	r3, [pc, #208]	; (8005670 <USB_HC_StartXfer+0x284>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80055a4:	4a32      	ldr	r2, [pc, #200]	; (8005670 <USB_HC_StartXfer+0x284>)
 80055a6:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80055a8:	69fb      	ldr	r3, [r7, #28]
 80055aa:	015a      	lsls	r2, r3, #5
 80055ac:	6a3b      	ldr	r3, [r7, #32]
 80055ae:	4413      	add	r3, r2
 80055b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80055b4:	461a      	mov	r2, r3
 80055b6:	4b2e      	ldr	r3, [pc, #184]	; (8005670 <USB_HC_StartXfer+0x284>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	6013      	str	r3, [r2, #0]

  if (dma == 0U) /* Slave mode */
 80055bc:	79fb      	ldrb	r3, [r7, #7]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d14e      	bne.n	8005660 <USB_HC_StartXfer+0x274>
  {
    if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	78db      	ldrb	r3, [r3, #3]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d14a      	bne.n	8005660 <USB_HC_StartXfer+0x274>
 80055ca:	68bb      	ldr	r3, [r7, #8]
 80055cc:	691b      	ldr	r3, [r3, #16]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d046      	beq.n	8005660 <USB_HC_StartXfer+0x274>
    {
      switch (hc->ep_type)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	79db      	ldrb	r3, [r3, #7]
 80055d6:	2b03      	cmp	r3, #3
 80055d8:	d830      	bhi.n	800563c <USB_HC_StartXfer+0x250>
 80055da:	a201      	add	r2, pc, #4	; (adr r2, 80055e0 <USB_HC_StartXfer+0x1f4>)
 80055dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055e0:	080055f1 	.word	0x080055f1
 80055e4:	08005615 	.word	0x08005615
 80055e8:	080055f1 	.word	0x080055f1
 80055ec:	08005615 	.word	0x08005615
      {
        /* Non periodic transfer */
        case EP_TYPE_CTRL:
        case EP_TYPE_BULK:

          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	691b      	ldr	r3, [r3, #16]
 80055f4:	3303      	adds	r3, #3
 80055f6:	089b      	lsrs	r3, r3, #2
 80055f8:	82fb      	strh	r3, [r7, #22]

          /* check if there is enough space in FIFO space */
          if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055fa:	8afa      	ldrh	r2, [r7, #22]
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	b29b      	uxth	r3, r3
 8005602:	429a      	cmp	r2, r3
 8005604:	d91c      	bls.n	8005640 <USB_HC_StartXfer+0x254>
          {
            /* need to process data in nptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	699b      	ldr	r3, [r3, #24]
 800560a:	f043 0220 	orr.w	r2, r3, #32
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	619a      	str	r2, [r3, #24]
          }
          break;
 8005612:	e015      	b.n	8005640 <USB_HC_StartXfer+0x254>

        /* Periodic transfer */
        case EP_TYPE_INTR:
        case EP_TYPE_ISOC:
          len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	691b      	ldr	r3, [r3, #16]
 8005618:	3303      	adds	r3, #3
 800561a:	089b      	lsrs	r3, r3, #2
 800561c:	82fb      	strh	r3, [r7, #22]
          /* check if there is enough space in FIFO space */
          if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800561e:	8afa      	ldrh	r2, [r7, #22]
 8005620:	6a3b      	ldr	r3, [r7, #32]
 8005622:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	b29b      	uxth	r3, r3
 800562a:	429a      	cmp	r2, r3
 800562c:	d90a      	bls.n	8005644 <USB_HC_StartXfer+0x258>
          {
            /* need to process data in ptxfempty interrupt */
            USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	699b      	ldr	r3, [r3, #24]
 8005632:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	619a      	str	r2, [r3, #24]
          }
          break;
 800563a:	e003      	b.n	8005644 <USB_HC_StartXfer+0x258>

        default:
          break;
 800563c:	bf00      	nop
 800563e:	e002      	b.n	8005646 <USB_HC_StartXfer+0x25a>
          break;
 8005640:	bf00      	nop
 8005642:	e000      	b.n	8005646 <USB_HC_StartXfer+0x25a>
          break;
 8005644:	bf00      	nop
      }

      /* Write packet into the Tx FIFO. */
      (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	68d9      	ldr	r1, [r3, #12]
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	785a      	ldrb	r2, [r3, #1]
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	b298      	uxth	r0, r3
 8005654:	2300      	movs	r3, #0
 8005656:	9300      	str	r3, [sp, #0]
 8005658:	4603      	mov	r3, r0
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f7ff fb92 	bl	8004d84 <USB_WritePacket>
    }
  }

  return HAL_OK;
 8005660:	2300      	movs	r3, #0
}
 8005662:	4618      	mov	r0, r3
 8005664:	3728      	adds	r7, #40	; 0x28
 8005666:	46bd      	mov	sp, r7
 8005668:	bd80      	pop	{r7, pc}
 800566a:	bf00      	nop
 800566c:	1ff80000 	.word	0x1ff80000
 8005670:	200000b0 	.word	0x200000b0

08005674 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005686:	695b      	ldr	r3, [r3, #20]
 8005688:	b29b      	uxth	r3, r3
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr

08005696 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005696:	b480      	push	{r7}
 8005698:	b087      	sub	sp, #28
 800569a:	af00      	add	r7, sp, #0
 800569c:	6078      	str	r0, [r7, #4]
 800569e:	460b      	mov	r3, r1
 80056a0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	613b      	str	r3, [r7, #16]
  uint32_t hcnum = (uint32_t)hc_num;
 80056a6:	78fb      	ldrb	r3, [r7, #3]
 80056a8:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 80056aa:	2300      	movs	r3, #0
 80056ac:	617b      	str	r3, [r7, #20]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	015a      	lsls	r2, r3, #5
 80056b2:	693b      	ldr	r3, [r7, #16]
 80056b4:	4413      	add	r3, r2
 80056b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	0c9b      	lsrs	r3, r3, #18
 80056be:	f003 0303 	and.w	r3, r3, #3
 80056c2:	60bb      	str	r3, [r7, #8]

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d002      	beq.n	80056d0 <USB_HC_Halt+0x3a>
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d16c      	bne.n	80057aa <USB_HC_Halt+0x114>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	015a      	lsls	r2, r3, #5
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	4413      	add	r3, r2
 80056d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68fa      	ldr	r2, [r7, #12]
 80056e0:	0151      	lsls	r1, r2, #5
 80056e2:	693a      	ldr	r2, [r7, #16]
 80056e4:	440a      	add	r2, r1
 80056e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056ee:	6013      	str	r3, [r2, #0]

    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056f4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d143      	bne.n	8005784 <USB_HC_Halt+0xee>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	015a      	lsls	r2, r3, #5
 8005700:	693b      	ldr	r3, [r7, #16]
 8005702:	4413      	add	r3, r2
 8005704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	68fa      	ldr	r2, [r7, #12]
 800570c:	0151      	lsls	r1, r2, #5
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	440a      	add	r2, r1
 8005712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005716:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800571a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	015a      	lsls	r2, r3, #5
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	4413      	add	r3, r2
 8005724:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	68fa      	ldr	r2, [r7, #12]
 800572c:	0151      	lsls	r1, r2, #5
 800572e:	693a      	ldr	r2, [r7, #16]
 8005730:	440a      	add	r2, r1
 8005732:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005736:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800573a:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	015a      	lsls	r2, r3, #5
 8005740:	693b      	ldr	r3, [r7, #16]
 8005742:	4413      	add	r3, r2
 8005744:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68fa      	ldr	r2, [r7, #12]
 800574c:	0151      	lsls	r1, r2, #5
 800574e:	693a      	ldr	r2, [r7, #16]
 8005750:	440a      	add	r2, r1
 8005752:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005756:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800575a:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	3301      	adds	r3, #1
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	697b      	ldr	r3, [r7, #20]
 8005764:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005768:	d81d      	bhi.n	80057a6 <USB_HC_Halt+0x110>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	015a      	lsls	r2, r3, #5
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	4413      	add	r3, r2
 8005772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800577c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005780:	d0ec      	beq.n	800575c <USB_HC_Halt+0xc6>
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005782:	e080      	b.n	8005886 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	015a      	lsls	r2, r3, #5
 8005788:	693b      	ldr	r3, [r7, #16]
 800578a:	4413      	add	r3, r2
 800578c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	68fa      	ldr	r2, [r7, #12]
 8005794:	0151      	lsls	r1, r2, #5
 8005796:	693a      	ldr	r2, [r7, #16]
 8005798:	440a      	add	r2, r1
 800579a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800579e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057a2:	6013      	str	r3, [r2, #0]
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057a4:	e06f      	b.n	8005886 <USB_HC_Halt+0x1f0>
          break;
 80057a6:	bf00      	nop
    if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80057a8:	e06d      	b.n	8005886 <USB_HC_Halt+0x1f0>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	015a      	lsls	r2, r3, #5
 80057ae:	693b      	ldr	r3, [r7, #16]
 80057b0:	4413      	add	r3, r2
 80057b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	0151      	lsls	r1, r2, #5
 80057bc:	693a      	ldr	r2, [r7, #16]
 80057be:	440a      	add	r2, r1
 80057c0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80057c8:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d143      	bne.n	8005862 <USB_HC_Halt+0x1cc>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	015a      	lsls	r2, r3, #5
 80057de:	693b      	ldr	r3, [r7, #16]
 80057e0:	4413      	add	r3, r2
 80057e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	0151      	lsls	r1, r2, #5
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	440a      	add	r2, r1
 80057f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057f8:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	015a      	lsls	r2, r3, #5
 80057fe:	693b      	ldr	r3, [r7, #16]
 8005800:	4413      	add	r3, r2
 8005802:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68fa      	ldr	r2, [r7, #12]
 800580a:	0151      	lsls	r1, r2, #5
 800580c:	693a      	ldr	r2, [r7, #16]
 800580e:	440a      	add	r2, r1
 8005810:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005814:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005818:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_EPDIR;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	015a      	lsls	r2, r3, #5
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	4413      	add	r3, r2
 8005822:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	68fa      	ldr	r2, [r7, #12]
 800582a:	0151      	lsls	r1, r2, #5
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	440a      	add	r2, r1
 8005830:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005834:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005838:	6013      	str	r3, [r2, #0]
      do
      {
        if (++count > 1000U)
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	3301      	adds	r3, #1
 800583e:	617b      	str	r3, [r7, #20]
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005846:	d81d      	bhi.n	8005884 <USB_HC_Halt+0x1ee>
        {
          break;
        }
      }
      while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	015a      	lsls	r2, r3, #5
 800584c:	693b      	ldr	r3, [r7, #16]
 800584e:	4413      	add	r3, r2
 8005850:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800585a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800585e:	d0ec      	beq.n	800583a <USB_HC_Halt+0x1a4>
 8005860:	e011      	b.n	8005886 <USB_HC_Halt+0x1f0>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	4413      	add	r3, r2
 800586a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	0151      	lsls	r1, r2, #5
 8005874:	693a      	ldr	r2, [r7, #16]
 8005876:	440a      	add	r2, r1
 8005878:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800587c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005880:	6013      	str	r3, [r2, #0]
 8005882:	e000      	b.n	8005886 <USB_HC_Halt+0x1f0>
          break;
 8005884:	bf00      	nop
    }
  }

  return HAL_OK;
 8005886:	2300      	movs	r3, #0
}
 8005888:	4618      	mov	r0, r3
 800588a:	371c      	adds	r7, #28
 800588c:	46bd      	mov	sp, r7
 800588e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005892:	4770      	bx	lr

08005894 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005894:	b480      	push	{r7}
 8005896:	b087      	sub	sp, #28
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
 800589c:	460b      	mov	r3, r1
 800589e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80058a4:	78fb      	ldrb	r3, [r7, #3]
 80058a6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80058a8:	2301      	movs	r3, #1
 80058aa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	04da      	lsls	r2, r3, #19
 80058b0:	4b15      	ldr	r3, [pc, #84]	; (8005908 <USB_DoPing+0x74>)
 80058b2:	4013      	ands	r3, r2
 80058b4:	693a      	ldr	r2, [r7, #16]
 80058b6:	0151      	lsls	r1, r2, #5
 80058b8:	697a      	ldr	r2, [r7, #20]
 80058ba:	440a      	add	r2, r1
 80058bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058c0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058c4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80058c6:	693b      	ldr	r3, [r7, #16]
 80058c8:	015a      	lsls	r2, r3, #5
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	4413      	add	r3, r2
 80058ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058dc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80058e4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	015a      	lsls	r2, r3, #5
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	4413      	add	r3, r2
 80058ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058f2:	461a      	mov	r2, r3
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	371c      	adds	r7, #28
 80058fe:	46bd      	mov	sp, r7
 8005900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005904:	4770      	bx	lr
 8005906:	bf00      	nop
 8005908:	1ff80000 	.word	0x1ff80000

0800590c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	60fb      	str	r3, [r7, #12]
  uint32_t count = 0U;
 8005918:	2300      	movs	r3, #0
 800591a:	617b      	str	r3, [r7, #20]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800591c:	6878      	ldr	r0, [r7, #4]
 800591e:	f7ff f9ae 	bl	8004c7e <USB_DisableGlobalInt>

  /* Flush FIFO */
  (void)USB_FlushTxFifo(USBx, 0x10U);
 8005922:	2110      	movs	r1, #16
 8005924:	6878      	ldr	r0, [r7, #4]
 8005926:	f7ff f9e5 	bl	8004cf4 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 800592a:	6878      	ldr	r0, [r7, #4]
 800592c:	f7ff fa08 	bl	8004d40 <USB_FlushRxFifo>

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005930:	2300      	movs	r3, #0
 8005932:	613b      	str	r3, [r7, #16]
 8005934:	e01f      	b.n	8005976 <USB_StopHost+0x6a>
  {
    value = USBx_HC(i)->HCCHAR;
 8005936:	693b      	ldr	r3, [r7, #16]
 8005938:	015a      	lsls	r2, r3, #5
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	4413      	add	r3, r2
 800593e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	60bb      	str	r3, [r7, #8]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005946:	68bb      	ldr	r3, [r7, #8]
 8005948:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800594c:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005954:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800595c:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	015a      	lsls	r2, r3, #5
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4413      	add	r3, r2
 8005966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596a:	461a      	mov	r2, r3
 800596c:	68bb      	ldr	r3, [r7, #8]
 800596e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	3301      	adds	r3, #1
 8005974:	613b      	str	r3, [r7, #16]
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	2b0f      	cmp	r3, #15
 800597a:	d9dc      	bls.n	8005936 <USB_StopHost+0x2a>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800597c:	2300      	movs	r3, #0
 800597e:	613b      	str	r3, [r7, #16]
 8005980:	e034      	b.n	80059ec <USB_StopHost+0xe0>
  {
    value = USBx_HC(i)->HCCHAR;
 8005982:	693b      	ldr	r3, [r7, #16]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005998:	60bb      	str	r3, [r7, #8]
    value |= USB_OTG_HCCHAR_CHENA;
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80059a0:	60bb      	str	r3, [r7, #8]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80059a8:	60bb      	str	r3, [r7, #8]
    USBx_HC(i)->HCCHAR = value;
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	015a      	lsls	r2, r3, #5
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	4413      	add	r3, r2
 80059b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b6:	461a      	mov	r2, r3
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	6013      	str	r3, [r2, #0]

    do
    {
      if (++count > 1000U)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	3301      	adds	r3, #1
 80059c0:	617b      	str	r3, [r7, #20]
 80059c2:	697b      	ldr	r3, [r7, #20]
 80059c4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80059c8:	d80c      	bhi.n	80059e4 <USB_StopHost+0xd8>
      {
        break;
      }
    }
    while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e0:	d0ec      	beq.n	80059bc <USB_StopHost+0xb0>
 80059e2:	e000      	b.n	80059e6 <USB_StopHost+0xda>
        break;
 80059e4:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	3301      	adds	r3, #1
 80059ea:	613b      	str	r3, [r7, #16]
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	2b0f      	cmp	r3, #15
 80059f0:	d9c7      	bls.n	8005982 <USB_StopHost+0x76>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059f8:	461a      	mov	r2, r3
 80059fa:	f04f 33ff 	mov.w	r3, #4294967295
 80059fe:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	f04f 32ff 	mov.w	r2, #4294967295
 8005a06:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005a08:	6878      	ldr	r0, [r7, #4]
 8005a0a:	f7ff f927 	bl	8004c5c <USB_EnableGlobalInt>

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3718      	adds	r7, #24
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8005a1c:	4904      	ldr	r1, [pc, #16]	; (8005a30 <MX_FATFS_Init+0x18>)
 8005a1e:	4805      	ldr	r0, [pc, #20]	; (8005a34 <MX_FATFS_Init+0x1c>)
 8005a20:	f005 fbdc 	bl	800b1dc <FATFS_LinkDriver>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	4b03      	ldr	r3, [pc, #12]	; (8005a38 <MX_FATFS_Init+0x20>)
 8005a2a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 8005a2c:	bf00      	nop
 8005a2e:	bd80      	pop	{r7, pc}
 8005a30:	200001b4 	.word	0x200001b4
 8005a34:	0800c65c 	.word	0x0800c65c
 8005a38:	2000221c 	.word	0x2000221c

08005a3c <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005a40:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 8005a42:	4618      	mov	r0, r3
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b083      	sub	sp, #12
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	4603      	mov	r3, r0
 8005a54:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8005a56:	2300      	movs	r3, #0
}
 8005a58:	4618      	mov	r0, r3
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8005a64:	b580      	push	{r7, lr}
 8005a66:	b084      	sub	sp, #16
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	4603      	mov	r3, r0
 8005a6c:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8005a72:	79fb      	ldrb	r3, [r7, #7]
 8005a74:	4619      	mov	r1, r3
 8005a76:	4808      	ldr	r0, [pc, #32]	; (8005a98 <USBH_status+0x34>)
 8005a78:	f000 fe11 	bl	800669e <USBH_MSC_UnitIsReady>
 8005a7c:	4603      	mov	r3, r0
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d002      	beq.n	8005a88 <USBH_status+0x24>
  {
    res = RES_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
 8005a86:	e001      	b.n	8005a8c <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	20002220 	.word	0x20002220

08005a9c <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b094      	sub	sp, #80	; 0x50
 8005aa0:	af02      	add	r7, sp, #8
 8005aa2:	60b9      	str	r1, [r7, #8]
 8005aa4:	607a      	str	r2, [r7, #4]
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	4603      	mov	r3, r0
 8005aaa:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8005ab2:	7bf9      	ldrb	r1, [r7, #15]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	687a      	ldr	r2, [r7, #4]
 8005abc:	4812      	ldr	r0, [pc, #72]	; (8005b08 <USBH_read+0x6c>)
 8005abe:	f000 fe38 	bl	8006732 <USBH_MSC_Read>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d103      	bne.n	8005ad0 <USBH_read+0x34>
  {
    res = RES_OK;
 8005ac8:	2300      	movs	r3, #0
 8005aca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005ace:	e015      	b.n	8005afc <USBH_read+0x60>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005ad0:	f107 0210 	add.w	r2, r7, #16
 8005ad4:	7bfb      	ldrb	r3, [r7, #15]
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	480b      	ldr	r0, [pc, #44]	; (8005b08 <USBH_read+0x6c>)
 8005ada:	f000 fe06 	bl	80066ea <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005ade:	7f7b      	ldrb	r3, [r7, #29]
 8005ae0:	2b28      	cmp	r3, #40	; 0x28
 8005ae2:	d003      	beq.n	8005aec <USBH_read+0x50>
 8005ae4:	2b3a      	cmp	r3, #58	; 0x3a
 8005ae6:	d001      	beq.n	8005aec <USBH_read+0x50>
 8005ae8:	2b04      	cmp	r3, #4
 8005aea:	d103      	bne.n	8005af4 <USBH_read+0x58>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005aec:	2303      	movs	r3, #3
 8005aee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break; 
 8005af2:	e003      	b.n	8005afc <USBH_read+0x60>

    default:
      res = RES_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005afa:	bf00      	nop
    }
  }

  return res;
 8005afc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3748      	adds	r7, #72	; 0x48
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	20002220 	.word	0x20002220

08005b0c <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b094      	sub	sp, #80	; 0x50
 8005b10:	af02      	add	r7, sp, #8
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005b1c:	2301      	movs	r3, #1
 8005b1e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8005b22:	7bf9      	ldrb	r1, [r7, #15]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	9300      	str	r3, [sp, #0]
 8005b28:	68bb      	ldr	r3, [r7, #8]
 8005b2a:	687a      	ldr	r2, [r7, #4]
 8005b2c:	4817      	ldr	r0, [pc, #92]	; (8005b8c <USBH_write+0x80>)
 8005b2e:	f000 fe69 	bl	8006804 <USBH_MSC_Write>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d103      	bne.n	8005b40 <USBH_write+0x34>
  {
    res = RES_OK;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8005b3e:	e01f      	b.n	8005b80 <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8005b40:	f107 0210 	add.w	r2, r7, #16
 8005b44:	7bfb      	ldrb	r3, [r7, #15]
 8005b46:	4619      	mov	r1, r3
 8005b48:	4810      	ldr	r0, [pc, #64]	; (8005b8c <USBH_write+0x80>)
 8005b4a:	f000 fdce 	bl	80066ea <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8005b4e:	7f7b      	ldrb	r3, [r7, #29]
 8005b50:	2b27      	cmp	r3, #39	; 0x27
 8005b52:	d009      	beq.n	8005b68 <USBH_write+0x5c>
 8005b54:	2b27      	cmp	r3, #39	; 0x27
 8005b56:	dc02      	bgt.n	8005b5e <USBH_write+0x52>
 8005b58:	2b04      	cmp	r3, #4
 8005b5a:	d009      	beq.n	8005b70 <USBH_write+0x64>
 8005b5c:	e00c      	b.n	8005b78 <USBH_write+0x6c>
 8005b5e:	2b28      	cmp	r3, #40	; 0x28
 8005b60:	d006      	beq.n	8005b70 <USBH_write+0x64>
 8005b62:	2b3a      	cmp	r3, #58	; 0x3a
 8005b64:	d004      	beq.n	8005b70 <USBH_write+0x64>
 8005b66:	e007      	b.n	8005b78 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8005b68:	2302      	movs	r3, #2
 8005b6a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b6e:	e007      	b.n	8005b80 <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8005b70:	2303      	movs	r3, #3
 8005b72:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b76:	e003      	b.n	8005b80 <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8005b78:	2301      	movs	r3, #1
 8005b7a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8005b7e:	bf00      	nop
    }
  }

  return res;
 8005b80:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3748      	adds	r7, #72	; 0x48
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	20002220 	.word	0x20002220

08005b90 <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b090      	sub	sp, #64	; 0x40
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	603a      	str	r2, [r7, #0]
 8005b9a:	71fb      	strb	r3, [r7, #7]
 8005b9c:	460b      	mov	r3, r1
 8005b9e:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8005ba6:	79bb      	ldrb	r3, [r7, #6]
 8005ba8:	2b03      	cmp	r3, #3
 8005baa:	d852      	bhi.n	8005c52 <USBH_ioctl+0xc2>
 8005bac:	a201      	add	r2, pc, #4	; (adr r2, 8005bb4 <USBH_ioctl+0x24>)
 8005bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb2:	bf00      	nop
 8005bb4:	08005bc5 	.word	0x08005bc5
 8005bb8:	08005bcd 	.word	0x08005bcd
 8005bbc:	08005bf7 	.word	0x08005bf7
 8005bc0:	08005c23 	.word	0x08005c23
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bca:	e045      	b.n	8005c58 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005bcc:	f107 0208 	add.w	r2, r7, #8
 8005bd0:	79fb      	ldrb	r3, [r7, #7]
 8005bd2:	4619      	mov	r1, r3
 8005bd4:	4823      	ldr	r0, [pc, #140]	; (8005c64 <USBH_ioctl+0xd4>)
 8005bd6:	f000 fd88 	bl	80066ea <USBH_MSC_GetLUNInfo>
 8005bda:	4603      	mov	r3, r0
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d106      	bne.n	8005bee <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8005be0:	68fa      	ldr	r2, [r7, #12]
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005be6:	2300      	movs	r3, #0
 8005be8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005bec:	e034      	b.n	8005c58 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005bf4:	e030      	b.n	8005c58 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005bf6:	f107 0208 	add.w	r2, r7, #8
 8005bfa:	79fb      	ldrb	r3, [r7, #7]
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4819      	ldr	r0, [pc, #100]	; (8005c64 <USBH_ioctl+0xd4>)
 8005c00:	f000 fd73 	bl	80066ea <USBH_MSC_GetLUNInfo>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d107      	bne.n	8005c1a <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8005c0a:	8a3b      	ldrh	r3, [r7, #16]
 8005c0c:	461a      	mov	r2, r3
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c12:	2300      	movs	r3, #0
 8005c14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c18:	e01e      	b.n	8005c58 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c20:	e01a      	b.n	8005c58 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8005c22:	f107 0208 	add.w	r2, r7, #8
 8005c26:	79fb      	ldrb	r3, [r7, #7]
 8005c28:	4619      	mov	r1, r3
 8005c2a:	480e      	ldr	r0, [pc, #56]	; (8005c64 <USBH_ioctl+0xd4>)
 8005c2c:	f000 fd5d 	bl	80066ea <USBH_MSC_GetLUNInfo>
 8005c30:	4603      	mov	r3, r0
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d109      	bne.n	8005c4a <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8005c36:	8a3b      	ldrh	r3, [r7, #16]
 8005c38:	0a5b      	lsrs	r3, r3, #9
 8005c3a:	b29b      	uxth	r3, r3
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8005c42:	2300      	movs	r3, #0
 8005c44:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8005c48:	e006      	b.n	8005c58 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8005c50:	e002      	b.n	8005c58 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8005c52:	2304      	movs	r3, #4
 8005c54:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8005c58:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3740      	adds	r7, #64	; 0x40
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20002220 	.word	0x20002220

08005c68 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005c68:	b590      	push	{r4, r7, lr}
 8005c6a:	b089      	sub	sp, #36	; 0x24
 8005c6c:	af04      	add	r7, sp, #16
 8005c6e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c76:	7919      	ldrb	r1, [r3, #4]
 8005c78:	2350      	movs	r3, #80	; 0x50
 8005c7a:	2206      	movs	r2, #6
 8005c7c:	6878      	ldr	r0, [r7, #4]
 8005c7e:	f001 fc4f 	bl	8007520 <USBH_FindInterface>
 8005c82:	4603      	mov	r3, r0
 8005c84:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8005c86:	7bfb      	ldrb	r3, [r7, #15]
 8005c88:	2bff      	cmp	r3, #255	; 0xff
 8005c8a:	d002      	beq.n	8005c92 <USBH_MSC_InterfaceInit+0x2a>
 8005c8c:	7bfb      	ldrb	r3, [r7, #15]
 8005c8e:	2b01      	cmp	r3, #1
 8005c90:	d901      	bls.n	8005c96 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005c92:	2302      	movs	r3, #2
 8005c94:	e0ef      	b.n	8005e76 <USBH_MSC_InterfaceInit+0x20e>
  }

  status = USBH_SelectInterface(phost, interface);
 8005c96:	7bfb      	ldrb	r3, [r7, #15]
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fc24 	bl	80074e8 <USBH_SelectInterface>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005ca4:	7bbb      	ldrb	r3, [r7, #14]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d001      	beq.n	8005cae <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8005caa:	2302      	movs	r3, #2
 8005cac:	e0e3      	b.n	8005e76 <USBH_MSC_InterfaceInit+0x20e>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005cb4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8005cb8:	f005 fdfc 	bl	800b8b4 <malloc>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005cc6:	69db      	ldr	r3, [r3, #28]
 8005cc8:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8005cca:	68bb      	ldr	r3, [r7, #8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d101      	bne.n	8005cd4 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8005cd0:	2302      	movs	r3, #2
 8005cd2:	e0d0      	b.n	8005e76 <USBH_MSC_InterfaceInit+0x20e>
  }

  /* Initialize msc handler */
  USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8005cd4:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005cd8:	2100      	movs	r1, #0
 8005cda:	68b8      	ldr	r0, [r7, #8]
 8005cdc:	f005 fe05 	bl	800b8ea <memset>

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8005ce0:	7bfb      	ldrb	r3, [r7, #15]
 8005ce2:	687a      	ldr	r2, [r7, #4]
 8005ce4:	211a      	movs	r1, #26
 8005ce6:	fb01 f303 	mul.w	r3, r1, r3
 8005cea:	4413      	add	r3, r2
 8005cec:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	b25b      	sxtb	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	da16      	bge.n	8005d26 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005cf8:	7bfb      	ldrb	r3, [r7, #15]
 8005cfa:	687a      	ldr	r2, [r7, #4]
 8005cfc:	211a      	movs	r1, #26
 8005cfe:	fb01 f303 	mul.w	r3, r1, r3
 8005d02:	4413      	add	r3, r2
 8005d04:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d08:	781a      	ldrb	r2, [r3, #0]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d0e:	7bfb      	ldrb	r3, [r7, #15]
 8005d10:	687a      	ldr	r2, [r7, #4]
 8005d12:	211a      	movs	r1, #26
 8005d14:	fb01 f303 	mul.w	r3, r1, r3
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d1e:	881a      	ldrh	r2, [r3, #0]
 8005d20:	68bb      	ldr	r3, [r7, #8]
 8005d22:	815a      	strh	r2, [r3, #10]
 8005d24:	e015      	b.n	8005d52 <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8005d26:	7bfb      	ldrb	r3, [r7, #15]
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	211a      	movs	r1, #26
 8005d2c:	fb01 f303 	mul.w	r3, r1, r3
 8005d30:	4413      	add	r3, r2
 8005d32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005d36:	781a      	ldrb	r2, [r3, #0]
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005d3c:	7bfb      	ldrb	r3, [r7, #15]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	211a      	movs	r1, #26
 8005d42:	fb01 f303 	mul.w	r3, r1, r3
 8005d46:	4413      	add	r3, r2
 8005d48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005d4c:	881a      	ldrh	r2, [r3, #0]
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	811a      	strh	r2, [r3, #8]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8005d52:	7bfb      	ldrb	r3, [r7, #15]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	211a      	movs	r1, #26
 8005d58:	fb01 f303 	mul.w	r3, r1, r3
 8005d5c:	4413      	add	r3, r2
 8005d5e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b25b      	sxtb	r3, r3
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	da16      	bge.n	8005d98 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005d6a:	7bfb      	ldrb	r3, [r7, #15]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	211a      	movs	r1, #26
 8005d70:	fb01 f303 	mul.w	r3, r1, r3
 8005d74:	4413      	add	r3, r2
 8005d76:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005d7a:	781a      	ldrb	r2, [r3, #0]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005d80:	7bfb      	ldrb	r3, [r7, #15]
 8005d82:	687a      	ldr	r2, [r7, #4]
 8005d84:	211a      	movs	r1, #26
 8005d86:	fb01 f303 	mul.w	r3, r1, r3
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005d90:	881a      	ldrh	r2, [r3, #0]
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	815a      	strh	r2, [r3, #10]
 8005d96:	e015      	b.n	8005dc4 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8005d98:	7bfb      	ldrb	r3, [r7, #15]
 8005d9a:	687a      	ldr	r2, [r7, #4]
 8005d9c:	211a      	movs	r1, #26
 8005d9e:	fb01 f303 	mul.w	r3, r1, r3
 8005da2:	4413      	add	r3, r2
 8005da4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005dae:	7bfb      	ldrb	r3, [r7, #15]
 8005db0:	687a      	ldr	r2, [r7, #4]
 8005db2:	211a      	movs	r1, #26
 8005db4:	fb01 f303 	mul.w	r3, r1, r3
 8005db8:	4413      	add	r3, r2
 8005dba:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005dbe:	881a      	ldrh	r2, [r3, #0]
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8005dca:	68bb      	ldr	r3, [r7, #8]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8005dd6:	68bb      	ldr	r3, [r7, #8]
 8005dd8:	799b      	ldrb	r3, [r3, #6]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f002 fdc2 	bl	8008966 <USBH_AllocPipe>
 8005de2:	4603      	mov	r3, r0
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8005dea:	68bb      	ldr	r3, [r7, #8]
 8005dec:	79db      	ldrb	r3, [r3, #7]
 8005dee:	4619      	mov	r1, r3
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f002 fdb8 	bl	8008966 <USBH_AllocPipe>
 8005df6:	4603      	mov	r3, r0
 8005df8:	461a      	mov	r2, r3
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	711a      	strb	r2, [r3, #4]

  USBH_MSC_BOT_Init(phost);
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f000 fda4 	bl	800694c <USBH_MSC_BOT_Init>

  /* Open the new channels */
  USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	7959      	ldrb	r1, [r3, #5]
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	7998      	ldrb	r0, [r3, #6]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e18:	68ba      	ldr	r2, [r7, #8]
 8005e1a:	8912      	ldrh	r2, [r2, #8]
 8005e1c:	9202      	str	r2, [sp, #8]
 8005e1e:	2202      	movs	r2, #2
 8005e20:	9201      	str	r2, [sp, #4]
 8005e22:	9300      	str	r3, [sp, #0]
 8005e24:	4623      	mov	r3, r4
 8005e26:	4602      	mov	r2, r0
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f002 fd6d 	bl	8008908 <USBH_OpenPipe>
                phost->device.address, phost->device.speed,
                USB_EP_TYPE_BULK, MSC_Handle->OutEpSize);

  USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	7919      	ldrb	r1, [r3, #4]
 8005e32:	68bb      	ldr	r3, [r7, #8]
 8005e34:	79d8      	ldrb	r0, [r3, #7]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	8952      	ldrh	r2, [r2, #10]
 8005e46:	9202      	str	r2, [sp, #8]
 8005e48:	2202      	movs	r2, #2
 8005e4a:	9201      	str	r2, [sp, #4]
 8005e4c:	9300      	str	r3, [sp, #0]
 8005e4e:	4623      	mov	r3, r4
 8005e50:	4602      	mov	r2, r0
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f002 fd58 	bl	8008908 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                MSC_Handle->InEpSize);

  USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8005e58:	68bb      	ldr	r3, [r7, #8]
 8005e5a:	791b      	ldrb	r3, [r3, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f005 fc60 	bl	800b726 <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	795b      	ldrb	r3, [r3, #5]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f005 fc59 	bl	800b726 <USBH_LL_SetToggle>

  return USBH_OK;
 8005e74:	2300      	movs	r3, #0
}
 8005e76:	4618      	mov	r0, r3
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}

08005e7e <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005e7e:	b580      	push	{r7, lr}
 8005e80:	b084      	sub	sp, #16
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	60fb      	str	r3, [r7, #12]

  if (MSC_Handle->OutPipe)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	795b      	ldrb	r3, [r3, #5]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d00e      	beq.n	8005eb6 <USBH_MSC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	795b      	ldrb	r3, [r3, #5]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f002 fd51 	bl	8008946 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	795b      	ldrb	r3, [r3, #5]
 8005ea8:	4619      	mov	r1, r3
 8005eaa:	6878      	ldr	r0, [r7, #4]
 8005eac:	f002 fd7c 	bl	80089a8 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	715a      	strb	r2, [r3, #5]
  }

  if (MSC_Handle->InPipe)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	791b      	ldrb	r3, [r3, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00e      	beq.n	8005edc <USBH_MSC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	791b      	ldrb	r3, [r3, #4]
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f002 fd3e 	bl	8008946 <USBH_ClosePipe>
    USBH_FreePipe(phost, MSC_Handle->InPipe);
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	791b      	ldrb	r3, [r3, #4]
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6878      	ldr	r0, [r7, #4]
 8005ed2:	f002 fd69 	bl	80089a8 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2200      	movs	r2, #0
 8005eda:	711a      	strb	r2, [r3, #4]
  }

  if (phost->pActiveClass->pData)
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005ee2:	69db      	ldr	r3, [r3, #28]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d00b      	beq.n	8005f00 <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005eee:	69db      	ldr	r3, [r3, #28]
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f005 fce7 	bl	800b8c4 <free>
    phost->pActiveClass->pData = 0U;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005efc:	2200      	movs	r2, #0
 8005efe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005f00:	2300      	movs	r3, #0
}
 8005f02:	4618      	mov	r0, r3
 8005f04:	3710      	adds	r7, #16
 8005f06:	46bd      	mov	sp, r7
 8005f08:	bd80      	pop	{r7, pc}

08005f0a <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005f0a:	b580      	push	{r7, lr}
 8005f0c:	b084      	sub	sp, #16
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f18:	69db      	ldr	r3, [r3, #28]
 8005f1a:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005f1c:	2301      	movs	r3, #1
 8005f1e:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8005f20:	68bb      	ldr	r3, [r7, #8]
 8005f22:	7b9b      	ldrb	r3, [r3, #14]
 8005f24:	2b02      	cmp	r3, #2
 8005f26:	d004      	beq.n	8005f32 <USBH_MSC_ClassRequest+0x28>
 8005f28:	2b03      	cmp	r3, #3
 8005f2a:	d03e      	beq.n	8005faa <USBH_MSC_ClassRequest+0xa0>
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d000      	beq.n	8005f32 <USBH_MSC_ClassRequest+0x28>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
      }
      break;

    default:
      break;
 8005f30:	e04a      	b.n	8005fc8 <USBH_MSC_ClassRequest+0xbe>
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	4619      	mov	r1, r3
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 fcea 	bl	8006910 <USBH_MSC_BOT_REQ_GetMaxLUN>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_NOT_SUPPORTED)
 8005f40:	7bfb      	ldrb	r3, [r7, #15]
 8005f42:	2b03      	cmp	r3, #3
 8005f44:	d104      	bne.n	8005f50 <USBH_MSC_ClassRequest+0x46>
        MSC_Handle->max_lun = 0U;
 8005f46:	68bb      	ldr	r3, [r7, #8]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	73fb      	strb	r3, [r7, #15]
      if (status == USBH_OK)
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d135      	bne.n	8005fc2 <USBH_MSC_ClassRequest+0xb8>
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8005f56:	68bb      	ldr	r3, [r7, #8]
 8005f58:	781b      	ldrb	r3, [r3, #0]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d804      	bhi.n	8005f68 <USBH_MSC_ClassRequest+0x5e>
 8005f5e:	68bb      	ldr	r3, [r7, #8]
 8005f60:	781b      	ldrb	r3, [r3, #0]
 8005f62:	3301      	adds	r3, #1
 8005f64:	b2da      	uxtb	r2, r3
 8005f66:	e000      	b.n	8005f6a <USBH_MSC_ClassRequest+0x60>
 8005f68:	2202      	movs	r2, #2
 8005f6a:	68bb      	ldr	r3, [r7, #8]
 8005f6c:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005f6e:	2300      	movs	r3, #0
 8005f70:	73bb      	strb	r3, [r7, #14]
 8005f72:	e014      	b.n	8005f9e <USBH_MSC_ClassRequest+0x94>
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8005f74:	7bbb      	ldrb	r3, [r7, #14]
 8005f76:	68ba      	ldr	r2, [r7, #8]
 8005f78:	2134      	movs	r1, #52	; 0x34
 8005f7a:	fb01 f303 	mul.w	r3, r1, r3
 8005f7e:	4413      	add	r3, r2
 8005f80:	3392      	adds	r3, #146	; 0x92
 8005f82:	2202      	movs	r2, #2
 8005f84:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8005f86:	7bbb      	ldrb	r3, [r7, #14]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	2134      	movs	r1, #52	; 0x34
 8005f8c:	fb01 f303 	mul.w	r3, r1, r3
 8005f90:	4413      	add	r3, r2
 8005f92:	33c1      	adds	r3, #193	; 0xc1
 8005f94:	2200      	movs	r2, #0
 8005f96:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8005f98:	7bbb      	ldrb	r3, [r7, #14]
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	73bb      	strb	r3, [r7, #14]
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	781b      	ldrb	r3, [r3, #0]
 8005fa2:	7bba      	ldrb	r2, [r7, #14]
 8005fa4:	429a      	cmp	r2, r3
 8005fa6:	d3e5      	bcc.n	8005f74 <USBH_MSC_ClassRequest+0x6a>
      break;
 8005fa8:	e00b      	b.n	8005fc2 <USBH_MSC_ClassRequest+0xb8>
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8005faa:	2100      	movs	r1, #0
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f002 f878 	bl	80080a2 <USBH_ClrFeature>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d106      	bne.n	8005fc6 <USBH_MSC_ClassRequest+0xbc>
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	7bda      	ldrb	r2, [r3, #15]
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	739a      	strb	r2, [r3, #14]
      break;
 8005fc0:	e001      	b.n	8005fc6 <USBH_MSC_ClassRequest+0xbc>
      break;
 8005fc2:	bf00      	nop
 8005fc4:	e000      	b.n	8005fc8 <USBH_MSC_ClassRequest+0xbe>
      break;
 8005fc6:	bf00      	nop
  }

  return status;
 8005fc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3710      	adds	r7, #16
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b086      	sub	sp, #24
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fe2:	69db      	ldr	r3, [r3, #28]
 8005fe4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8005fe6:	2301      	movs	r3, #1
 8005fe8:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 8005fea:	2301      	movs	r3, #1
 8005fec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	7b1b      	ldrb	r3, [r3, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d003      	beq.n	8006002 <USBH_MSC_Process+0x2e>
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	f000 8271 	beq.w	80064e2 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8006000:	e272      	b.n	80064e8 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	781b      	ldrb	r3, [r3, #0]
 800600c:	b29b      	uxth	r3, r3
 800600e:	429a      	cmp	r2, r3
 8006010:	f080 824f 	bcs.w	80064b2 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006014:	693b      	ldr	r3, [r7, #16]
 8006016:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800601a:	4619      	mov	r1, r3
 800601c:	693a      	ldr	r2, [r7, #16]
 800601e:	2334      	movs	r3, #52	; 0x34
 8006020:	fb03 f301 	mul.w	r3, r3, r1
 8006024:	4413      	add	r3, r2
 8006026:	3391      	adds	r3, #145	; 0x91
 8006028:	2201      	movs	r2, #1
 800602a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800602c:	693b      	ldr	r3, [r7, #16]
 800602e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006032:	4619      	mov	r1, r3
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	2334      	movs	r3, #52	; 0x34
 8006038:	fb03 f301 	mul.w	r3, r3, r1
 800603c:	4413      	add	r3, r2
 800603e:	3390      	adds	r3, #144	; 0x90
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	2b08      	cmp	r3, #8
 8006044:	f200 8243 	bhi.w	80064ce <USBH_MSC_Process+0x4fa>
 8006048:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <USBH_MSC_Process+0x7c>)
 800604a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604e:	bf00      	nop
 8006050:	08006075 	.word	0x08006075
 8006054:	080064cf 	.word	0x080064cf
 8006058:	0800613d 	.word	0x0800613d
 800605c:	080062c1 	.word	0x080062c1
 8006060:	0800609b 	.word	0x0800609b
 8006064:	0800638d 	.word	0x0800638d
 8006068:	080064cf 	.word	0x080064cf
 800606c:	080064cf 	.word	0x080064cf
 8006070:	080064a1 	.word	0x080064a1
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 8006074:	693b      	ldr	r3, [r7, #16]
 8006076:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800607a:	4619      	mov	r1, r3
 800607c:	693a      	ldr	r2, [r7, #16]
 800607e:	2334      	movs	r3, #52	; 0x34
 8006080:	fb03 f301 	mul.w	r3, r3, r1
 8006084:	4413      	add	r3, r2
 8006086:	3390      	adds	r3, #144	; 0x90
 8006088:	2204      	movs	r2, #4
 800608a:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 8006098:	e222      	b.n	80064e0 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a0:	b2d9      	uxtb	r1, r3
 80060a2:	693b      	ldr	r3, [r7, #16]
 80060a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060a8:	461a      	mov	r2, r3
 80060aa:	2334      	movs	r3, #52	; 0x34
 80060ac:	fb03 f302 	mul.w	r3, r3, r2
 80060b0:	3398      	adds	r3, #152	; 0x98
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4413      	add	r3, r2
 80060b6:	3307      	adds	r3, #7
 80060b8:	461a      	mov	r2, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f000 ff68 	bl	8006f90 <USBH_MSC_SCSI_Inquiry>
 80060c0:	4603      	mov	r3, r0
 80060c2:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d10b      	bne.n	80060e2 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060d0:	4619      	mov	r1, r3
 80060d2:	693a      	ldr	r2, [r7, #16]
 80060d4:	2334      	movs	r3, #52	; 0x34
 80060d6:	fb03 f301 	mul.w	r3, r3, r1
 80060da:	4413      	add	r3, r2
 80060dc:	3390      	adds	r3, #144	; 0x90
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 80060e2:	7bfb      	ldrb	r3, [r7, #15]
 80060e4:	2b02      	cmp	r3, #2
 80060e6:	d10c      	bne.n	8006102 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80060ee:	4619      	mov	r1, r3
 80060f0:	693a      	ldr	r2, [r7, #16]
 80060f2:	2334      	movs	r3, #52	; 0x34
 80060f4:	fb03 f301 	mul.w	r3, r3, r1
 80060f8:	4413      	add	r3, r2
 80060fa:	3390      	adds	r3, #144	; 0x90
 80060fc:	2205      	movs	r2, #5
 80060fe:	701a      	strb	r2, [r3, #0]
            break;
 8006100:	e1e7      	b.n	80064d2 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006102:	7bfb      	ldrb	r3, [r7, #15]
 8006104:	2b04      	cmp	r3, #4
 8006106:	f040 81e4 	bne.w	80064d2 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800610a:	693b      	ldr	r3, [r7, #16]
 800610c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006110:	4619      	mov	r1, r3
 8006112:	693a      	ldr	r2, [r7, #16]
 8006114:	2334      	movs	r3, #52	; 0x34
 8006116:	fb03 f301 	mul.w	r3, r3, r1
 800611a:	4413      	add	r3, r2
 800611c:	3390      	adds	r3, #144	; 0x90
 800611e:	2201      	movs	r2, #1
 8006120:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006128:	4619      	mov	r1, r3
 800612a:	693a      	ldr	r2, [r7, #16]
 800612c:	2334      	movs	r3, #52	; 0x34
 800612e:	fb03 f301 	mul.w	r3, r3, r1
 8006132:	4413      	add	r3, r2
 8006134:	3391      	adds	r3, #145	; 0x91
 8006136:	2202      	movs	r2, #2
 8006138:	701a      	strb	r2, [r3, #0]
            break;
 800613a:	e1ca      	b.n	80064d2 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006142:	b2db      	uxtb	r3, r3
 8006144:	4619      	mov	r1, r3
 8006146:	6878      	ldr	r0, [r7, #4]
 8006148:	f000 fe64 	bl	8006e14 <USBH_MSC_SCSI_TestUnitReady>
 800614c:	4603      	mov	r3, r0
 800614e:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 8006150:	7bbb      	ldrb	r3, [r7, #14]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d149      	bne.n	80061ea <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 8006156:	693b      	ldr	r3, [r7, #16]
 8006158:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800615c:	4619      	mov	r1, r3
 800615e:	693a      	ldr	r2, [r7, #16]
 8006160:	2334      	movs	r3, #52	; 0x34
 8006162:	fb03 f301 	mul.w	r3, r3, r1
 8006166:	4413      	add	r3, r2
 8006168:	3392      	adds	r3, #146	; 0x92
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b00      	cmp	r3, #0
 800616e:	d00c      	beq.n	800618a <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006176:	4619      	mov	r1, r3
 8006178:	693a      	ldr	r2, [r7, #16]
 800617a:	2334      	movs	r3, #52	; 0x34
 800617c:	fb03 f301 	mul.w	r3, r3, r1
 8006180:	4413      	add	r3, r2
 8006182:	33c1      	adds	r3, #193	; 0xc1
 8006184:	2201      	movs	r2, #1
 8006186:	701a      	strb	r2, [r3, #0]
 8006188:	e00b      	b.n	80061a2 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006190:	4619      	mov	r1, r3
 8006192:	693a      	ldr	r2, [r7, #16]
 8006194:	2334      	movs	r3, #52	; 0x34
 8006196:	fb03 f301 	mul.w	r3, r3, r1
 800619a:	4413      	add	r3, r2
 800619c:	33c1      	adds	r3, #193	; 0xc1
 800619e:	2200      	movs	r2, #0
 80061a0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 80061a2:	693b      	ldr	r3, [r7, #16]
 80061a4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061a8:	4619      	mov	r1, r3
 80061aa:	693a      	ldr	r2, [r7, #16]
 80061ac:	2334      	movs	r3, #52	; 0x34
 80061ae:	fb03 f301 	mul.w	r3, r3, r1
 80061b2:	4413      	add	r3, r2
 80061b4:	3390      	adds	r3, #144	; 0x90
 80061b6:	2203      	movs	r2, #3
 80061b8:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061c0:	4619      	mov	r1, r3
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	2334      	movs	r3, #52	; 0x34
 80061c6:	fb03 f301 	mul.w	r3, r3, r1
 80061ca:	4413      	add	r3, r2
 80061cc:	3391      	adds	r3, #145	; 0x91
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 80061d2:	693b      	ldr	r3, [r7, #16]
 80061d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061d8:	4619      	mov	r1, r3
 80061da:	693a      	ldr	r2, [r7, #16]
 80061dc:	2334      	movs	r3, #52	; 0x34
 80061de:	fb03 f301 	mul.w	r3, r3, r1
 80061e2:	4413      	add	r3, r2
 80061e4:	3392      	adds	r3, #146	; 0x92
 80061e6:	2200      	movs	r2, #0
 80061e8:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 80061ea:	7bbb      	ldrb	r3, [r7, #14]
 80061ec:	2b02      	cmp	r3, #2
 80061ee:	d14a      	bne.n	8006286 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80061f6:	4619      	mov	r1, r3
 80061f8:	693a      	ldr	r2, [r7, #16]
 80061fa:	2334      	movs	r3, #52	; 0x34
 80061fc:	fb03 f301 	mul.w	r3, r3, r1
 8006200:	4413      	add	r3, r2
 8006202:	3392      	adds	r3, #146	; 0x92
 8006204:	781b      	ldrb	r3, [r3, #0]
 8006206:	2b02      	cmp	r3, #2
 8006208:	d00c      	beq.n	8006224 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800620a:	693b      	ldr	r3, [r7, #16]
 800620c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006210:	4619      	mov	r1, r3
 8006212:	693a      	ldr	r2, [r7, #16]
 8006214:	2334      	movs	r3, #52	; 0x34
 8006216:	fb03 f301 	mul.w	r3, r3, r1
 800621a:	4413      	add	r3, r2
 800621c:	33c1      	adds	r3, #193	; 0xc1
 800621e:	2201      	movs	r2, #1
 8006220:	701a      	strb	r2, [r3, #0]
 8006222:	e00b      	b.n	800623c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800622a:	4619      	mov	r1, r3
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	2334      	movs	r3, #52	; 0x34
 8006230:	fb03 f301 	mul.w	r3, r3, r1
 8006234:	4413      	add	r3, r2
 8006236:	33c1      	adds	r3, #193	; 0xc1
 8006238:	2200      	movs	r2, #0
 800623a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006242:	4619      	mov	r1, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	2334      	movs	r3, #52	; 0x34
 8006248:	fb03 f301 	mul.w	r3, r3, r1
 800624c:	4413      	add	r3, r2
 800624e:	3390      	adds	r3, #144	; 0x90
 8006250:	2205      	movs	r2, #5
 8006252:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800625a:	4619      	mov	r1, r3
 800625c:	693a      	ldr	r2, [r7, #16]
 800625e:	2334      	movs	r3, #52	; 0x34
 8006260:	fb03 f301 	mul.w	r3, r3, r1
 8006264:	4413      	add	r3, r2
 8006266:	3391      	adds	r3, #145	; 0x91
 8006268:	2201      	movs	r2, #1
 800626a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 800626c:	693b      	ldr	r3, [r7, #16]
 800626e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006272:	4619      	mov	r1, r3
 8006274:	693a      	ldr	r2, [r7, #16]
 8006276:	2334      	movs	r3, #52	; 0x34
 8006278:	fb03 f301 	mul.w	r3, r3, r1
 800627c:	4413      	add	r3, r2
 800627e:	3392      	adds	r3, #146	; 0x92
 8006280:	2202      	movs	r2, #2
 8006282:	701a      	strb	r2, [r3, #0]
            break;
 8006284:	e127      	b.n	80064d6 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 8006286:	7bbb      	ldrb	r3, [r7, #14]
 8006288:	2b04      	cmp	r3, #4
 800628a:	f040 8124 	bne.w	80064d6 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006294:	4619      	mov	r1, r3
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	2334      	movs	r3, #52	; 0x34
 800629a:	fb03 f301 	mul.w	r3, r3, r1
 800629e:	4413      	add	r3, r2
 80062a0:	3390      	adds	r3, #144	; 0x90
 80062a2:	2201      	movs	r2, #1
 80062a4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ac:	4619      	mov	r1, r3
 80062ae:	693a      	ldr	r2, [r7, #16]
 80062b0:	2334      	movs	r3, #52	; 0x34
 80062b2:	fb03 f301 	mul.w	r3, r3, r1
 80062b6:	4413      	add	r3, r2
 80062b8:	3391      	adds	r3, #145	; 0x91
 80062ba:	2202      	movs	r2, #2
 80062bc:	701a      	strb	r2, [r3, #0]
            break;
 80062be:	e10a      	b.n	80064d6 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062c6:	b2d9      	uxtb	r1, r3
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062ce:	461a      	mov	r2, r3
 80062d0:	2334      	movs	r3, #52	; 0x34
 80062d2:	fb03 f302 	mul.w	r3, r3, r2
 80062d6:	3390      	adds	r3, #144	; 0x90
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	3304      	adds	r3, #4
 80062de:	461a      	mov	r2, r3
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f000 fdda 	bl	8006e9a <USBH_MSC_SCSI_ReadCapacity>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d120      	bne.n	8006332 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80062f6:	4619      	mov	r1, r3
 80062f8:	693a      	ldr	r2, [r7, #16]
 80062fa:	2334      	movs	r3, #52	; 0x34
 80062fc:	fb03 f301 	mul.w	r3, r3, r1
 8006300:	4413      	add	r3, r2
 8006302:	3390      	adds	r3, #144	; 0x90
 8006304:	2201      	movs	r2, #1
 8006306:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8006308:	693b      	ldr	r3, [r7, #16]
 800630a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800630e:	4619      	mov	r1, r3
 8006310:	693a      	ldr	r2, [r7, #16]
 8006312:	2334      	movs	r3, #52	; 0x34
 8006314:	fb03 f301 	mul.w	r3, r3, r1
 8006318:	4413      	add	r3, r2
 800631a:	3391      	adds	r3, #145	; 0x91
 800631c:	2200      	movs	r2, #0
 800631e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006326:	3301      	adds	r3, #1
 8006328:	b29a      	uxth	r2, r3
 800632a:	693b      	ldr	r3, [r7, #16]
 800632c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8006330:	e0d3      	b.n	80064da <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8006332:	7bfb      	ldrb	r3, [r7, #15]
 8006334:	2b02      	cmp	r3, #2
 8006336:	d10c      	bne.n	8006352 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8006338:	693b      	ldr	r3, [r7, #16]
 800633a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800633e:	4619      	mov	r1, r3
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	2334      	movs	r3, #52	; 0x34
 8006344:	fb03 f301 	mul.w	r3, r3, r1
 8006348:	4413      	add	r3, r2
 800634a:	3390      	adds	r3, #144	; 0x90
 800634c:	2205      	movs	r2, #5
 800634e:	701a      	strb	r2, [r3, #0]
            break;
 8006350:	e0c3      	b.n	80064da <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006352:	7bfb      	ldrb	r3, [r7, #15]
 8006354:	2b04      	cmp	r3, #4
 8006356:	f040 80c0 	bne.w	80064da <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800635a:	693b      	ldr	r3, [r7, #16]
 800635c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006360:	4619      	mov	r1, r3
 8006362:	693a      	ldr	r2, [r7, #16]
 8006364:	2334      	movs	r3, #52	; 0x34
 8006366:	fb03 f301 	mul.w	r3, r3, r1
 800636a:	4413      	add	r3, r2
 800636c:	3390      	adds	r3, #144	; 0x90
 800636e:	2201      	movs	r2, #1
 8006370:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006378:	4619      	mov	r1, r3
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	2334      	movs	r3, #52	; 0x34
 800637e:	fb03 f301 	mul.w	r3, r3, r1
 8006382:	4413      	add	r3, r2
 8006384:	3391      	adds	r3, #145	; 0x91
 8006386:	2202      	movs	r2, #2
 8006388:	701a      	strb	r2, [r3, #0]
            break;
 800638a:	e0a6      	b.n	80064da <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 800638c:	693b      	ldr	r3, [r7, #16]
 800638e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006392:	b2d9      	uxtb	r1, r3
 8006394:	693b      	ldr	r3, [r7, #16]
 8006396:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800639a:	461a      	mov	r2, r3
 800639c:	2334      	movs	r3, #52	; 0x34
 800639e:	fb03 f302 	mul.w	r3, r3, r2
 80063a2:	3398      	adds	r3, #152	; 0x98
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4413      	add	r3, r2
 80063a8:	3304      	adds	r3, #4
 80063aa:	461a      	mov	r2, r3
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 fe94 	bl	80070da <USBH_MSC_SCSI_RequestSense>
 80063b2:	4603      	mov	r3, r0
 80063b4:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 80063b6:	7bfb      	ldrb	r3, [r7, #15]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d145      	bne.n	8006448 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80063bc:	693b      	ldr	r3, [r7, #16]
 80063be:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063c2:	4619      	mov	r1, r3
 80063c4:	693a      	ldr	r2, [r7, #16]
 80063c6:	2334      	movs	r3, #52	; 0x34
 80063c8:	fb03 f301 	mul.w	r3, r3, r1
 80063cc:	4413      	add	r3, r2
 80063ce:	339c      	adds	r3, #156	; 0x9c
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b06      	cmp	r3, #6
 80063d4:	d00c      	beq.n	80063f0 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80063dc:	4619      	mov	r1, r3
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	2334      	movs	r3, #52	; 0x34
 80063e2:	fb03 f301 	mul.w	r3, r3, r1
 80063e6:	4413      	add	r3, r2
 80063e8:	339c      	adds	r3, #156	; 0x9c
 80063ea:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d117      	bne.n	8006420 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80063f6:	693b      	ldr	r3, [r7, #16]
 80063f8:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	f242 720f 	movw	r2, #9999	; 0x270f
 8006402:	4293      	cmp	r3, r2
 8006404:	d80c      	bhi.n	8006420 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800640c:	4619      	mov	r1, r3
 800640e:	693a      	ldr	r2, [r7, #16]
 8006410:	2334      	movs	r3, #52	; 0x34
 8006412:	fb03 f301 	mul.w	r3, r3, r1
 8006416:	4413      	add	r3, r2
 8006418:	3390      	adds	r3, #144	; 0x90
 800641a:	2202      	movs	r2, #2
 800641c:	701a      	strb	r2, [r3, #0]
                  break;
 800641e:	e05f      	b.n	80064e0 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8006420:	693b      	ldr	r3, [r7, #16]
 8006422:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006426:	4619      	mov	r1, r3
 8006428:	693a      	ldr	r2, [r7, #16]
 800642a:	2334      	movs	r3, #52	; 0x34
 800642c:	fb03 f301 	mul.w	r3, r3, r1
 8006430:	4413      	add	r3, r2
 8006432:	3390      	adds	r3, #144	; 0x90
 8006434:	2201      	movs	r2, #1
 8006436:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8006438:	693b      	ldr	r3, [r7, #16]
 800643a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800643e:	3301      	adds	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 8006448:	7bfb      	ldrb	r3, [r7, #15]
 800644a:	2b02      	cmp	r3, #2
 800644c:	d10c      	bne.n	8006468 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006454:	4619      	mov	r1, r3
 8006456:	693a      	ldr	r2, [r7, #16]
 8006458:	2334      	movs	r3, #52	; 0x34
 800645a:	fb03 f301 	mul.w	r3, r3, r1
 800645e:	4413      	add	r3, r2
 8006460:	3390      	adds	r3, #144	; 0x90
 8006462:	2208      	movs	r2, #8
 8006464:	701a      	strb	r2, [r3, #0]
            break;
 8006466:	e03a      	b.n	80064de <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006468:	7bfb      	ldrb	r3, [r7, #15]
 800646a:	2b04      	cmp	r3, #4
 800646c:	d137      	bne.n	80064de <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8006474:	4619      	mov	r1, r3
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	2334      	movs	r3, #52	; 0x34
 800647a:	fb03 f301 	mul.w	r3, r3, r1
 800647e:	4413      	add	r3, r2
 8006480:	3390      	adds	r3, #144	; 0x90
 8006482:	2201      	movs	r2, #1
 8006484:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8006486:	693b      	ldr	r3, [r7, #16]
 8006488:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800648c:	4619      	mov	r1, r3
 800648e:	693a      	ldr	r2, [r7, #16]
 8006490:	2334      	movs	r3, #52	; 0x34
 8006492:	fb03 f301 	mul.w	r3, r3, r1
 8006496:	4413      	add	r3, r2
 8006498:	3391      	adds	r3, #145	; 0x91
 800649a:	2202      	movs	r2, #2
 800649c:	701a      	strb	r2, [r3, #0]
            break;
 800649e:	e01e      	b.n	80064de <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 80064a0:	693b      	ldr	r3, [r7, #16]
 80064a2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80064a6:	3301      	adds	r3, #1
 80064a8:	b29a      	uxth	r2, r3
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 80064b0:	e016      	b.n	80064e0 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2201      	movs	r2, #1
 80064be:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80064c6:	2102      	movs	r1, #2
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	4798      	blx	r3
      break;
 80064cc:	e00c      	b.n	80064e8 <USBH_MSC_Process+0x514>
            break;
 80064ce:	bf00      	nop
 80064d0:	e00a      	b.n	80064e8 <USBH_MSC_Process+0x514>
            break;
 80064d2:	bf00      	nop
 80064d4:	e008      	b.n	80064e8 <USBH_MSC_Process+0x514>
            break;
 80064d6:	bf00      	nop
 80064d8:	e006      	b.n	80064e8 <USBH_MSC_Process+0x514>
            break;
 80064da:	bf00      	nop
 80064dc:	e004      	b.n	80064e8 <USBH_MSC_Process+0x514>
            break;
 80064de:	bf00      	nop
      break;
 80064e0:	e002      	b.n	80064e8 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	75fb      	strb	r3, [r7, #23]
      break;
 80064e6:	bf00      	nop
  }
  return error;
 80064e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3718      	adds	r7, #24
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
 80064f2:	bf00      	nop

080064f4 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80064fc:	2300      	movs	r3, #0
}
 80064fe:	4618      	mov	r0, r3
 8006500:	370c      	adds	r7, #12
 8006502:	46bd      	mov	sp, r7
 8006504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006508:	4770      	bx	lr

0800650a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	b088      	sub	sp, #32
 800650e:	af02      	add	r7, sp, #8
 8006510:	6078      	str	r0, [r7, #4]
 8006512:	460b      	mov	r3, r1
 8006514:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800651c:	69db      	ldr	r3, [r3, #28]
 800651e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8006520:	2301      	movs	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8006524:	2301      	movs	r3, #1
 8006526:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8006528:	78fb      	ldrb	r3, [r7, #3]
 800652a:	693a      	ldr	r2, [r7, #16]
 800652c:	2134      	movs	r1, #52	; 0x34
 800652e:	fb01 f303 	mul.w	r3, r1, r3
 8006532:	4413      	add	r3, r2
 8006534:	3390      	adds	r3, #144	; 0x90
 8006536:	781b      	ldrb	r3, [r3, #0]
 8006538:	2b06      	cmp	r3, #6
 800653a:	d004      	beq.n	8006546 <USBH_MSC_RdWrProcess+0x3c>
 800653c:	2b07      	cmp	r3, #7
 800653e:	d037      	beq.n	80065b0 <USBH_MSC_RdWrProcess+0xa6>
 8006540:	2b05      	cmp	r3, #5
 8006542:	d06a      	beq.n	800661a <USBH_MSC_RdWrProcess+0x110>
#endif
#endif
      break;

    default:
      break;
 8006544:	e0a6      	b.n	8006694 <USBH_MSC_RdWrProcess+0x18a>
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 8006546:	78f9      	ldrb	r1, [r7, #3]
 8006548:	2300      	movs	r3, #0
 800654a:	9300      	str	r3, [sp, #0]
 800654c:	2300      	movs	r3, #0
 800654e:	2200      	movs	r2, #0
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	f000 fea6 	bl	80072a2 <USBH_MSC_SCSI_Read>
 8006556:	4603      	mov	r3, r0
 8006558:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 800655a:	7bfb      	ldrb	r3, [r7, #15]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d10b      	bne.n	8006578 <USBH_MSC_RdWrProcess+0x6e>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8006560:	78fb      	ldrb	r3, [r7, #3]
 8006562:	693a      	ldr	r2, [r7, #16]
 8006564:	2134      	movs	r1, #52	; 0x34
 8006566:	fb01 f303 	mul.w	r3, r1, r3
 800656a:	4413      	add	r3, r2
 800656c:	3390      	adds	r3, #144	; 0x90
 800656e:	2201      	movs	r2, #1
 8006570:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8006572:	2300      	movs	r3, #0
 8006574:	75fb      	strb	r3, [r7, #23]
      break;
 8006576:	e088      	b.n	800668a <USBH_MSC_RdWrProcess+0x180>
      else if (scsi_status == USBH_FAIL)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b02      	cmp	r3, #2
 800657c:	d109      	bne.n	8006592 <USBH_MSC_RdWrProcess+0x88>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800657e:	78fb      	ldrb	r3, [r7, #3]
 8006580:	693a      	ldr	r2, [r7, #16]
 8006582:	2134      	movs	r1, #52	; 0x34
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	4413      	add	r3, r2
 800658a:	3390      	adds	r3, #144	; 0x90
 800658c:	2205      	movs	r2, #5
 800658e:	701a      	strb	r2, [r3, #0]
      break;
 8006590:	e07b      	b.n	800668a <USBH_MSC_RdWrProcess+0x180>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8006592:	7bfb      	ldrb	r3, [r7, #15]
 8006594:	2b04      	cmp	r3, #4
 8006596:	d178      	bne.n	800668a <USBH_MSC_RdWrProcess+0x180>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006598:	78fb      	ldrb	r3, [r7, #3]
 800659a:	693a      	ldr	r2, [r7, #16]
 800659c:	2134      	movs	r1, #52	; 0x34
 800659e:	fb01 f303 	mul.w	r3, r1, r3
 80065a2:	4413      	add	r3, r2
 80065a4:	3390      	adds	r3, #144	; 0x90
 80065a6:	2208      	movs	r2, #8
 80065a8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80065aa:	2302      	movs	r3, #2
 80065ac:	75fb      	strb	r3, [r7, #23]
      break;
 80065ae:	e06c      	b.n	800668a <USBH_MSC_RdWrProcess+0x180>
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 80065b0:	78f9      	ldrb	r1, [r7, #3]
 80065b2:	2300      	movs	r3, #0
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	2200      	movs	r2, #0
 80065ba:	6878      	ldr	r0, [r7, #4]
 80065bc:	f000 fe06 	bl	80071cc <USBH_MSC_SCSI_Write>
 80065c0:	4603      	mov	r3, r0
 80065c2:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 80065c4:	7bfb      	ldrb	r3, [r7, #15]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <USBH_MSC_RdWrProcess+0xd8>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80065ca:	78fb      	ldrb	r3, [r7, #3]
 80065cc:	693a      	ldr	r2, [r7, #16]
 80065ce:	2134      	movs	r1, #52	; 0x34
 80065d0:	fb01 f303 	mul.w	r3, r1, r3
 80065d4:	4413      	add	r3, r2
 80065d6:	3390      	adds	r3, #144	; 0x90
 80065d8:	2201      	movs	r2, #1
 80065da:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80065dc:	2300      	movs	r3, #0
 80065de:	75fb      	strb	r3, [r7, #23]
      break;
 80065e0:	e055      	b.n	800668e <USBH_MSC_RdWrProcess+0x184>
      else if (scsi_status == USBH_FAIL)
 80065e2:	7bfb      	ldrb	r3, [r7, #15]
 80065e4:	2b02      	cmp	r3, #2
 80065e6:	d109      	bne.n	80065fc <USBH_MSC_RdWrProcess+0xf2>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80065e8:	78fb      	ldrb	r3, [r7, #3]
 80065ea:	693a      	ldr	r2, [r7, #16]
 80065ec:	2134      	movs	r1, #52	; 0x34
 80065ee:	fb01 f303 	mul.w	r3, r1, r3
 80065f2:	4413      	add	r3, r2
 80065f4:	3390      	adds	r3, #144	; 0x90
 80065f6:	2205      	movs	r2, #5
 80065f8:	701a      	strb	r2, [r3, #0]
      break;
 80065fa:	e048      	b.n	800668e <USBH_MSC_RdWrProcess+0x184>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80065fc:	7bfb      	ldrb	r3, [r7, #15]
 80065fe:	2b04      	cmp	r3, #4
 8006600:	d145      	bne.n	800668e <USBH_MSC_RdWrProcess+0x184>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006602:	78fb      	ldrb	r3, [r7, #3]
 8006604:	693a      	ldr	r2, [r7, #16]
 8006606:	2134      	movs	r1, #52	; 0x34
 8006608:	fb01 f303 	mul.w	r3, r1, r3
 800660c:	4413      	add	r3, r2
 800660e:	3390      	adds	r3, #144	; 0x90
 8006610:	2208      	movs	r2, #8
 8006612:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006614:	2302      	movs	r3, #2
 8006616:	75fb      	strb	r3, [r7, #23]
      break;
 8006618:	e039      	b.n	800668e <USBH_MSC_RdWrProcess+0x184>
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 800661a:	78fb      	ldrb	r3, [r7, #3]
 800661c:	2234      	movs	r2, #52	; 0x34
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	3398      	adds	r3, #152	; 0x98
 8006624:	693a      	ldr	r2, [r7, #16]
 8006626:	4413      	add	r3, r2
 8006628:	1d1a      	adds	r2, r3, #4
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	4619      	mov	r1, r3
 800662e:	6878      	ldr	r0, [r7, #4]
 8006630:	f000 fd53 	bl	80070da <USBH_MSC_SCSI_RequestSense>
 8006634:	4603      	mov	r3, r0
 8006636:	73fb      	strb	r3, [r7, #15]
      if (scsi_status == USBH_OK)
 8006638:	7bfb      	ldrb	r3, [r7, #15]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d113      	bne.n	8006666 <USBH_MSC_RdWrProcess+0x15c>
        MSC_Handle->unit[lun].state = MSC_IDLE;
 800663e:	78fb      	ldrb	r3, [r7, #3]
 8006640:	693a      	ldr	r2, [r7, #16]
 8006642:	2134      	movs	r1, #52	; 0x34
 8006644:	fb01 f303 	mul.w	r3, r1, r3
 8006648:	4413      	add	r3, r2
 800664a:	3390      	adds	r3, #144	; 0x90
 800664c:	2201      	movs	r2, #1
 800664e:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 8006650:	78fb      	ldrb	r3, [r7, #3]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	2134      	movs	r1, #52	; 0x34
 8006656:	fb01 f303 	mul.w	r3, r1, r3
 800665a:	4413      	add	r3, r2
 800665c:	3391      	adds	r3, #145	; 0x91
 800665e:	2202      	movs	r2, #2
 8006660:	701a      	strb	r2, [r3, #0]
        error = USBH_FAIL;
 8006662:	2302      	movs	r3, #2
 8006664:	75fb      	strb	r3, [r7, #23]
      if (scsi_status == USBH_FAIL)
 8006666:	7bfb      	ldrb	r3, [r7, #15]
 8006668:	2b02      	cmp	r3, #2
 800666a:	d012      	beq.n	8006692 <USBH_MSC_RdWrProcess+0x188>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 800666c:	7bfb      	ldrb	r3, [r7, #15]
 800666e:	2b04      	cmp	r3, #4
 8006670:	d10f      	bne.n	8006692 <USBH_MSC_RdWrProcess+0x188>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	693a      	ldr	r2, [r7, #16]
 8006676:	2134      	movs	r1, #52	; 0x34
 8006678:	fb01 f303 	mul.w	r3, r1, r3
 800667c:	4413      	add	r3, r2
 800667e:	3390      	adds	r3, #144	; 0x90
 8006680:	2208      	movs	r2, #8
 8006682:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8006684:	2302      	movs	r3, #2
 8006686:	75fb      	strb	r3, [r7, #23]
      break;
 8006688:	e003      	b.n	8006692 <USBH_MSC_RdWrProcess+0x188>
      break;
 800668a:	bf00      	nop
 800668c:	e002      	b.n	8006694 <USBH_MSC_RdWrProcess+0x18a>
      break;
 800668e:	bf00      	nop
 8006690:	e000      	b.n	8006694 <USBH_MSC_RdWrProcess+0x18a>
      break;
 8006692:	bf00      	nop

  }
  return error;
 8006694:	7dfb      	ldrb	r3, [r7, #23]
}
 8006696:	4618      	mov	r0, r3
 8006698:	3718      	adds	r7, #24
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800669e:	b480      	push	{r7}
 80066a0:	b085      	sub	sp, #20
 80066a2:	af00      	add	r7, sp, #0
 80066a4:	6078      	str	r0, [r7, #4]
 80066a6:	460b      	mov	r3, r1
 80066a8:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066b0:	69db      	ldr	r3, [r3, #28]
 80066b2:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	781b      	ldrb	r3, [r3, #0]
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b0b      	cmp	r3, #11
 80066bc:	d10c      	bne.n	80066d8 <USBH_MSC_UnitIsReady+0x3a>
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	68ba      	ldr	r2, [r7, #8]
 80066c2:	2134      	movs	r1, #52	; 0x34
 80066c4:	fb01 f303 	mul.w	r3, r1, r3
 80066c8:	4413      	add	r3, r2
 80066ca:	3391      	adds	r3, #145	; 0x91
 80066cc:	781b      	ldrb	r3, [r3, #0]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d102      	bne.n	80066d8 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 80066d2:	2301      	movs	r3, #1
 80066d4:	73fb      	strb	r3, [r7, #15]
 80066d6:	e001      	b.n	80066dc <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 80066d8:	2300      	movs	r3, #0
 80066da:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 80066dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr

080066ea <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b086      	sub	sp, #24
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	60f8      	str	r0, [r7, #12]
 80066f2:	460b      	mov	r3, r1
 80066f4:	607a      	str	r2, [r7, #4]
 80066f6:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80066fe:	69db      	ldr	r3, [r3, #28]
 8006700:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b0b      	cmp	r3, #11
 800670a:	d10d      	bne.n	8006728 <USBH_MSC_GetLUNInfo+0x3e>
  {
    USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 800670c:	7afb      	ldrb	r3, [r7, #11]
 800670e:	2234      	movs	r2, #52	; 0x34
 8006710:	fb02 f303 	mul.w	r3, r2, r3
 8006714:	3390      	adds	r3, #144	; 0x90
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	4413      	add	r3, r2
 800671a:	2234      	movs	r2, #52	; 0x34
 800671c:	4619      	mov	r1, r3
 800671e:	6878      	ldr	r0, [r7, #4]
 8006720:	f005 f8d8 	bl	800b8d4 <memcpy>
    return USBH_OK;
 8006724:	2300      	movs	r3, #0
 8006726:	e000      	b.n	800672a <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8006728:	2302      	movs	r3, #2
  }
}
 800672a:	4618      	mov	r0, r3
 800672c:	3718      	adds	r7, #24
 800672e:	46bd      	mov	sp, r7
 8006730:	bd80      	pop	{r7, pc}

08006732 <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 8006732:	b580      	push	{r7, lr}
 8006734:	b088      	sub	sp, #32
 8006736:	af02      	add	r7, sp, #8
 8006738:	60f8      	str	r0, [r7, #12]
 800673a:	607a      	str	r2, [r7, #4]
 800673c:	603b      	str	r3, [r7, #0]
 800673e:	460b      	mov	r3, r1
 8006740:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006748:	69db      	ldr	r3, [r3, #28]
 800674a:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b00      	cmp	r3, #0
 8006756:	d00e      	beq.n	8006776 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	781b      	ldrb	r3, [r3, #0]
 800675c:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800675e:	2b0b      	cmp	r3, #11
 8006760:	d109      	bne.n	8006776 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006762:	7afb      	ldrb	r3, [r7, #11]
 8006764:	697a      	ldr	r2, [r7, #20]
 8006766:	2134      	movs	r1, #52	; 0x34
 8006768:	fb01 f303 	mul.w	r3, r1, r3
 800676c:	4413      	add	r3, r2
 800676e:	3390      	adds	r3, #144	; 0x90
 8006770:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006772:	2b01      	cmp	r3, #1
 8006774:	d001      	beq.n	800677a <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 8006776:	2302      	movs	r3, #2
 8006778:	e040      	b.n	80067fc <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	2206      	movs	r2, #6
 800677e:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 8006780:	7afb      	ldrb	r3, [r7, #11]
 8006782:	697a      	ldr	r2, [r7, #20]
 8006784:	2134      	movs	r1, #52	; 0x34
 8006786:	fb01 f303 	mul.w	r3, r1, r3
 800678a:	4413      	add	r3, r2
 800678c:	3390      	adds	r3, #144	; 0x90
 800678e:	2206      	movs	r2, #6
 8006790:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006792:	7afb      	ldrb	r3, [r7, #11]
 8006794:	b29a      	uxth	r2, r3
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 800679c:	7af9      	ldrb	r1, [r7, #11]
 800679e:	6a3b      	ldr	r3, [r7, #32]
 80067a0:	9300      	str	r3, [sp, #0]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	687a      	ldr	r2, [r7, #4]
 80067a6:	68f8      	ldr	r0, [r7, #12]
 80067a8:	f000 fd7b 	bl	80072a2 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80067b2:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067b4:	e016      	b.n	80067e4 <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad2      	subs	r2, r2, r3
 80067c0:	6a3b      	ldr	r3, [r7, #32]
 80067c2:	f242 7110 	movw	r1, #10000	; 0x2710
 80067c6:	fb01 f303 	mul.w	r3, r1, r3
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d805      	bhi.n	80067da <USBH_MSC_Read+0xa8>
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80067d4:	b2db      	uxtb	r3, r3
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d104      	bne.n	80067e4 <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80067da:	697b      	ldr	r3, [r7, #20]
 80067dc:	2201      	movs	r2, #1
 80067de:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80067e0:	2302      	movs	r3, #2
 80067e2:	e00b      	b.n	80067fc <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80067e4:	7afb      	ldrb	r3, [r7, #11]
 80067e6:	4619      	mov	r1, r3
 80067e8:	68f8      	ldr	r0, [r7, #12]
 80067ea:	f7ff fe8e 	bl	800650a <USBH_MSC_RdWrProcess>
 80067ee:	4603      	mov	r3, r0
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d0e0      	beq.n	80067b6 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	2201      	movs	r2, #1
 80067f8:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 80067fa:	2300      	movs	r3, #0
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	3718      	adds	r7, #24
 8006800:	46bd      	mov	sp, r7
 8006802:	bd80      	pop	{r7, pc}

08006804 <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b088      	sub	sp, #32
 8006808:	af02      	add	r7, sp, #8
 800680a:	60f8      	str	r0, [r7, #12]
 800680c:	607a      	str	r2, [r7, #4]
 800680e:	603b      	str	r3, [r7, #0]
 8006810:	460b      	mov	r3, r1
 8006812:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800681a:	69db      	ldr	r3, [r3, #28]
 800681c:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006824:	b2db      	uxtb	r3, r3
 8006826:	2b00      	cmp	r3, #0
 8006828:	d00e      	beq.n	8006848 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	781b      	ldrb	r3, [r3, #0]
 800682e:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 8006830:	2b0b      	cmp	r3, #11
 8006832:	d109      	bne.n	8006848 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 8006834:	7afb      	ldrb	r3, [r7, #11]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	2134      	movs	r1, #52	; 0x34
 800683a:	fb01 f303 	mul.w	r3, r1, r3
 800683e:	4413      	add	r3, r2
 8006840:	3390      	adds	r3, #144	; 0x90
 8006842:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 8006844:	2b01      	cmp	r3, #1
 8006846:	d001      	beq.n	800684c <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 8006848:	2302      	movs	r3, #2
 800684a:	e040      	b.n	80068ce <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	2207      	movs	r2, #7
 8006850:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 8006852:	7afb      	ldrb	r3, [r7, #11]
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	2134      	movs	r1, #52	; 0x34
 8006858:	fb01 f303 	mul.w	r3, r1, r3
 800685c:	4413      	add	r3, r2
 800685e:	3390      	adds	r3, #144	; 0x90
 8006860:	2207      	movs	r2, #7
 8006862:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 8006864:	7afb      	ldrb	r3, [r7, #11]
 8006866:	b29a      	uxth	r2, r3
 8006868:	697b      	ldr	r3, [r7, #20]
 800686a:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 800686e:	7af9      	ldrb	r1, [r7, #11]
 8006870:	6a3b      	ldr	r3, [r7, #32]
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	683b      	ldr	r3, [r7, #0]
 8006876:	687a      	ldr	r2, [r7, #4]
 8006878:	68f8      	ldr	r0, [r7, #12]
 800687a:	f000 fca7 	bl	80071cc <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006884:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8006886:	e016      	b.n	80068b6 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	1ad2      	subs	r2, r2, r3
 8006892:	6a3b      	ldr	r3, [r7, #32]
 8006894:	f242 7110 	movw	r1, #10000	; 0x2710
 8006898:	fb01 f303 	mul.w	r3, r1, r3
 800689c:	429a      	cmp	r2, r3
 800689e:	d805      	bhi.n	80068ac <USBH_MSC_Write+0xa8>
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d104      	bne.n	80068b6 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 80068ac:	697b      	ldr	r3, [r7, #20]
 80068ae:	2201      	movs	r2, #1
 80068b0:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 80068b2:	2302      	movs	r3, #2
 80068b4:	e00b      	b.n	80068ce <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80068b6:	7afb      	ldrb	r3, [r7, #11]
 80068b8:	4619      	mov	r1, r3
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f7ff fe25 	bl	800650a <USBH_MSC_RdWrProcess>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b01      	cmp	r3, #1
 80068c4:	d0e0      	beq.n	8006888 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	2201      	movs	r2, #1
 80068ca:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 80068cc:	2300      	movs	r3, #0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3718      	adds	r7, #24
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}

080068d6 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 80068d6:	b580      	push	{r7, lr}
 80068d8:	b082      	sub	sp, #8
 80068da:	af00      	add	r7, sp, #0
 80068dc:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2221      	movs	r2, #33	; 0x21
 80068e2:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	22ff      	movs	r2, #255	; 0xff
 80068e8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2200      	movs	r2, #0
 80068f4:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	2200      	movs	r2, #0
 80068fa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, 0U, 0U);
 80068fc:	2200      	movs	r2, #0
 80068fe:	2100      	movs	r1, #0
 8006900:	6878      	ldr	r0, [r7, #4]
 8006902:	f001 fdae 	bl	8008462 <USBH_CtlReq>
 8006906:	4603      	mov	r3, r0
}
 8006908:	4618      	mov	r0, r3
 800690a:	3708      	adds	r7, #8
 800690c:	46bd      	mov	sp, r7
 800690e:	bd80      	pop	{r7, pc}

08006910 <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 8006910:	b580      	push	{r7, lr}
 8006912:	b082      	sub	sp, #8
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	22a1      	movs	r2, #161	; 0xa1
 800691e:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	22fe      	movs	r2, #254	; 0xfe
 8006924:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	2200      	movs	r2, #0
 8006930:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2201      	movs	r2, #1
 8006936:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 8006938:	2201      	movs	r2, #1
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f001 fd90 	bl	8008462 <USBH_CtlReq>
 8006942:	4603      	mov	r3, r0
}
 8006944:	4618      	mov	r0, r3
 8006946:	3708      	adds	r7, #8
 8006948:	46bd      	mov	sp, r7
 800694a:	bd80      	pop	{r7, pc}

0800694c <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 800694c:	b480      	push	{r7}
 800694e:	b085      	sub	sp, #20
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695a:	69db      	ldr	r3, [r3, #28]
 800695c:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	4a09      	ldr	r2, [pc, #36]	; (8006988 <USBH_MSC_BOT_Init+0x3c>)
 8006962:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	4a09      	ldr	r2, [pc, #36]	; (800698c <USBH_MSC_BOT_Init+0x40>)
 8006968:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2201      	movs	r2, #1
 800696e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 800697a:	2300      	movs	r3, #0
}
 800697c:	4618      	mov	r0, r3
 800697e:	3714      	adds	r7, #20
 8006980:	46bd      	mov	sp, r7
 8006982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006986:	4770      	bx	lr
 8006988:	43425355 	.word	0x43425355
 800698c:	20304050 	.word	0x20304050

08006990 <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b088      	sub	sp, #32
 8006994:	af02      	add	r7, sp, #8
 8006996:	6078      	str	r0, [r7, #4]
 8006998:	460b      	mov	r3, r1
 800699a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 800699c:	2301      	movs	r3, #1
 800699e:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 80069a0:	2301      	movs	r3, #1
 80069a2:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 80069a4:	2301      	movs	r3, #1
 80069a6:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80069a8:	2300      	movs	r3, #0
 80069aa:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 80069b6:	2300      	movs	r3, #0
 80069b8:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 80069ba:	693b      	ldr	r3, [r7, #16]
 80069bc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80069c0:	3b01      	subs	r3, #1
 80069c2:	2b0a      	cmp	r3, #10
 80069c4:	f200 81a1 	bhi.w	8006d0a <USBH_MSC_BOT_Process+0x37a>
 80069c8:	a201      	add	r2, pc, #4	; (adr r2, 80069d0 <USBH_MSC_BOT_Process+0x40>)
 80069ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069ce:	bf00      	nop
 80069d0:	080069fd 	.word	0x080069fd
 80069d4:	08006a27 	.word	0x08006a27
 80069d8:	08006a91 	.word	0x08006a91
 80069dc:	08006aaf 	.word	0x08006aaf
 80069e0:	08006b33 	.word	0x08006b33
 80069e4:	08006b57 	.word	0x08006b57
 80069e8:	08006bf1 	.word	0x08006bf1
 80069ec:	08006c0d 	.word	0x08006c0d
 80069f0:	08006c5f 	.word	0x08006c5f
 80069f4:	08006c8f 	.word	0x08006c8f
 80069f8:	08006cf1 	.word	0x08006cf1
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	78fa      	ldrb	r2, [r7, #3]
 8006a00:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	795a      	ldrb	r2, [r3, #5]
 8006a16:	2301      	movs	r3, #1
 8006a18:	9300      	str	r3, [sp, #0]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	221f      	movs	r2, #31
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 ff2f 	bl	8008882 <USBH_BulkSendData>
                        BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8006a24:	e180      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006a26:	693b      	ldr	r3, [r7, #16]
 8006a28:	795b      	ldrb	r3, [r3, #5]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f004 fe59 	bl	800b6e4 <USBH_LL_GetURBState>
 8006a32:	4603      	mov	r3, r0
 8006a34:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006a36:	7d3b      	ldrb	r3, [r7, #20]
 8006a38:	2b01      	cmp	r3, #1
 8006a3a:	d118      	bne.n	8006a6e <USBH_MSC_BOT_Process+0xde>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d00f      	beq.n	8006a64 <USBH_MSC_BOT_Process+0xd4>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8006a4a:	b25b      	sxtb	r3, r3
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	da04      	bge.n	8006a5a <USBH_MSC_BOT_Process+0xca>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	2203      	movs	r2, #3
 8006a54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8006a58:	e159      	b.n	8006d0e <USBH_MSC_BOT_Process+0x37e>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	2205      	movs	r2, #5
 8006a5e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a62:	e154      	b.n	8006d0e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006a64:	693b      	ldr	r3, [r7, #16]
 8006a66:	2207      	movs	r2, #7
 8006a68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a6c:	e14f      	b.n	8006d0e <USBH_MSC_BOT_Process+0x37e>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006a6e:	7d3b      	ldrb	r3, [r7, #20]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d104      	bne.n	8006a7e <USBH_MSC_BOT_Process+0xee>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	2201      	movs	r2, #1
 8006a78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a7c:	e147      	b.n	8006d0e <USBH_MSC_BOT_Process+0x37e>
        if (URB_Status == USBH_URB_STALL)
 8006a7e:	7d3b      	ldrb	r3, [r7, #20]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	f040 8144 	bne.w	8006d0e <USBH_MSC_BOT_Process+0x37e>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	220a      	movs	r2, #10
 8006a8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006a8e:	e13e      	b.n	8006d0e <USBH_MSC_BOT_Process+0x37e>

    case BOT_DATA_IN:
      /* Send first packet */
      USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006a90:	693b      	ldr	r3, [r7, #16]
 8006a92:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	895a      	ldrh	r2, [r3, #10]
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	791b      	ldrb	r3, [r3, #4]
 8006a9e:	6878      	ldr	r0, [r7, #4]
 8006aa0:	f001 ff14 	bl	80088cc <USBH_BulkReceiveData>
                           MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	2204      	movs	r2, #4
 8006aa8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8006aac:	e13c      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	791b      	ldrb	r3, [r3, #4]
 8006ab2:	4619      	mov	r1, r3
 8006ab4:	6878      	ldr	r0, [r7, #4]
 8006ab6:	f004 fe15 	bl	800b6e4 <USBH_LL_GetURBState>
 8006aba:	4603      	mov	r3, r0
 8006abc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006abe:	7d3b      	ldrb	r3, [r7, #20]
 8006ac0:	2b01      	cmp	r3, #1
 8006ac2:	d12d      	bne.n	8006b20 <USBH_MSC_BOT_Process+0x190>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ac8:	693a      	ldr	r2, [r7, #16]
 8006aca:	8952      	ldrh	r2, [r2, #10]
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d910      	bls.n	8006af2 <USBH_MSC_BOT_Process+0x162>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	8952      	ldrh	r2, [r2, #10]
 8006ada:	441a      	add	r2, r3
 8006adc:	693b      	ldr	r3, [r7, #16]
 8006ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	8952      	ldrh	r2, [r2, #10]
 8006aea:	1a9a      	subs	r2, r3, r2
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	65da      	str	r2, [r3, #92]	; 0x5c
 8006af0:	e002      	b.n	8006af8 <USBH_MSC_BOT_Process+0x168>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	2200      	movs	r2, #0
 8006af6:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d00a      	beq.n	8006b16 <USBH_MSC_BOT_Process+0x186>
        {
          /* Send next packet */
          USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b06:	693b      	ldr	r3, [r7, #16]
 8006b08:	895a      	ldrh	r2, [r3, #10]
 8006b0a:	693b      	ldr	r3, [r7, #16]
 8006b0c:	791b      	ldrb	r3, [r3, #4]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f001 fedc 	bl	80088cc <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8006b14:	e0fd      	b.n	8006d12 <USBH_MSC_BOT_Process+0x382>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006b16:	693b      	ldr	r3, [r7, #16]
 8006b18:	2207      	movs	r2, #7
 8006b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b1e:	e0f8      	b.n	8006d12 <USBH_MSC_BOT_Process+0x382>
      else if (URB_Status == USBH_URB_STALL)
 8006b20:	7d3b      	ldrb	r3, [r7, #20]
 8006b22:	2b05      	cmp	r3, #5
 8006b24:	f040 80f5 	bne.w	8006d12 <USBH_MSC_BOT_Process+0x382>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	2209      	movs	r2, #9
 8006b2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b30:	e0ef      	b.n	8006d12 <USBH_MSC_BOT_Process+0x382>

    case BOT_DATA_OUT:

      USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006b32:	693b      	ldr	r3, [r7, #16]
 8006b34:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006b38:	693b      	ldr	r3, [r7, #16]
 8006b3a:	891a      	ldrh	r2, [r3, #8]
 8006b3c:	693b      	ldr	r3, [r7, #16]
 8006b3e:	7958      	ldrb	r0, [r3, #5]
 8006b40:	2301      	movs	r3, #1
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	4603      	mov	r3, r0
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fe9b 	bl	8008882 <USBH_BulkSendData>
                        MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8006b4c:	693b      	ldr	r3, [r7, #16]
 8006b4e:	2206      	movs	r2, #6
 8006b50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006b54:	e0e8      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8006b56:	693b      	ldr	r3, [r7, #16]
 8006b58:	795b      	ldrb	r3, [r3, #5]
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	6878      	ldr	r0, [r7, #4]
 8006b5e:	f004 fdc1 	bl	800b6e4 <USBH_LL_GetURBState>
 8006b62:	4603      	mov	r3, r0
 8006b64:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8006b66:	7d3b      	ldrb	r3, [r7, #20]
 8006b68:	2b01      	cmp	r3, #1
 8006b6a:	d130      	bne.n	8006bce <USBH_MSC_BOT_Process+0x23e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8006b6c:	693b      	ldr	r3, [r7, #16]
 8006b6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b70:	693a      	ldr	r2, [r7, #16]
 8006b72:	8912      	ldrh	r2, [r2, #8]
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d910      	bls.n	8006b9a <USBH_MSC_BOT_Process+0x20a>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	8912      	ldrh	r2, [r2, #8]
 8006b82:	441a      	add	r2, r3
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8006b8a:	693b      	ldr	r3, [r7, #16]
 8006b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b8e:	693a      	ldr	r2, [r7, #16]
 8006b90:	8912      	ldrh	r2, [r2, #8]
 8006b92:	1a9a      	subs	r2, r3, r2
 8006b94:	693b      	ldr	r3, [r7, #16]
 8006b96:	65da      	str	r2, [r3, #92]	; 0x5c
 8006b98:	e002      	b.n	8006ba0 <USBH_MSC_BOT_Process+0x210>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8006ba0:	693b      	ldr	r3, [r7, #16]
 8006ba2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d00d      	beq.n	8006bc4 <USBH_MSC_BOT_Process+0x234>
        {
          USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	891a      	ldrh	r2, [r3, #8]
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	7958      	ldrb	r0, [r3, #5]
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	9300      	str	r3, [sp, #0]
 8006bba:	4603      	mov	r3, r0
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f001 fe60 	bl	8008882 <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8006bc2:	e0a8      	b.n	8006d16 <USBH_MSC_BOT_Process+0x386>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	2207      	movs	r2, #7
 8006bc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bcc:	e0a3      	b.n	8006d16 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006bce:	7d3b      	ldrb	r3, [r7, #20]
 8006bd0:	2b02      	cmp	r3, #2
 8006bd2:	d104      	bne.n	8006bde <USBH_MSC_BOT_Process+0x24e>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	2205      	movs	r2, #5
 8006bd8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bdc:	e09b      	b.n	8006d16 <USBH_MSC_BOT_Process+0x386>
      else if (URB_Status == USBH_URB_STALL)
 8006bde:	7d3b      	ldrb	r3, [r7, #20]
 8006be0:	2b05      	cmp	r3, #5
 8006be2:	f040 8098 	bne.w	8006d16 <USBH_MSC_BOT_Process+0x386>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	220a      	movs	r2, #10
 8006bea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006bee:	e092      	b.n	8006d16 <USBH_MSC_BOT_Process+0x386>

    case BOT_RECEIVE_CSW:

      USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	791b      	ldrb	r3, [r3, #4]
 8006bfa:	220d      	movs	r2, #13
 8006bfc:	6878      	ldr	r0, [r7, #4]
 8006bfe:	f001 fe65 	bl	80088cc <USBH_BulkReceiveData>
                           BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	2208      	movs	r2, #8
 8006c06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c0a:	e08d      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	791b      	ldrb	r3, [r3, #4]
 8006c10:	4619      	mov	r1, r3
 8006c12:	6878      	ldr	r0, [r7, #4]
 8006c14:	f004 fd66 	bl	800b6e4 <USBH_LL_GetURBState>
 8006c18:	4603      	mov	r3, r0
 8006c1a:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8006c1c:	7d3b      	ldrb	r3, [r7, #20]
 8006c1e:	2b01      	cmp	r3, #1
 8006c20:	d115      	bne.n	8006c4e <USBH_MSC_BOT_Process+0x2be>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f000 f8aa 	bl	8006d8c <USBH_MSC_DecodeCSW>
 8006c38:	4603      	mov	r3, r0
 8006c3a:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8006c3c:	7d7b      	ldrb	r3, [r7, #21]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <USBH_MSC_BOT_Process+0x2b8>
        {
          status = USBH_OK;
 8006c42:	2300      	movs	r3, #0
 8006c44:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8006c46:	e068      	b.n	8006d1a <USBH_MSC_BOT_Process+0x38a>
          status = USBH_FAIL;
 8006c48:	2302      	movs	r3, #2
 8006c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8006c4c:	e065      	b.n	8006d1a <USBH_MSC_BOT_Process+0x38a>
      else if (URB_Status == USBH_URB_STALL)
 8006c4e:	7d3b      	ldrb	r3, [r7, #20]
 8006c50:	2b05      	cmp	r3, #5
 8006c52:	d162      	bne.n	8006d1a <USBH_MSC_BOT_Process+0x38a>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2209      	movs	r2, #9
 8006c58:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c5c:	e05d      	b.n	8006d1a <USBH_MSC_BOT_Process+0x38a>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8006c5e:	78fb      	ldrb	r3, [r7, #3]
 8006c60:	2200      	movs	r2, #0
 8006c62:	4619      	mov	r1, r3
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 f865 	bl	8006d34 <USBH_MSC_BOT_Abort>
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006c6e:	7dbb      	ldrb	r3, [r7, #22]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d104      	bne.n	8006c7e <USBH_MSC_BOT_Process+0x2ee>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	2207      	movs	r2, #7
 8006c78:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8006c7c:	e04f      	b.n	8006d1e <USBH_MSC_BOT_Process+0x38e>
      else if (error == USBH_UNRECOVERED_ERROR)
 8006c7e:	7dbb      	ldrb	r3, [r7, #22]
 8006c80:	2b04      	cmp	r3, #4
 8006c82:	d14c      	bne.n	8006d1e <USBH_MSC_BOT_Process+0x38e>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	220b      	movs	r2, #11
 8006c88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006c8c:	e047      	b.n	8006d1e <USBH_MSC_BOT_Process+0x38e>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8006c8e:	78fb      	ldrb	r3, [r7, #3]
 8006c90:	2201      	movs	r2, #1
 8006c92:	4619      	mov	r1, r3
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 f84d 	bl	8006d34 <USBH_MSC_BOT_Abort>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8006c9e:	7dbb      	ldrb	r3, [r7, #22]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d11d      	bne.n	8006ce0 <USBH_MSC_BOT_Process+0x350>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	795b      	ldrb	r3, [r3, #5]
 8006ca8:	4619      	mov	r1, r3
 8006caa:	6878      	ldr	r0, [r7, #4]
 8006cac:	f004 fd6e 	bl	800b78c <USBH_LL_GetToggle>
 8006cb0:	4603      	mov	r3, r0
 8006cb2:	73fb      	strb	r3, [r7, #15]
        USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	7959      	ldrb	r1, [r3, #5]
 8006cb8:	7bfb      	ldrb	r3, [r7, #15]
 8006cba:	f1c3 0301 	rsb	r3, r3, #1
 8006cbe:	b2db      	uxtb	r3, r3
 8006cc0:	461a      	mov	r2, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f004 fd2f 	bl	800b726 <USBH_LL_SetToggle>
        USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	791b      	ldrb	r3, [r3, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f004 fd28 	bl	800b726 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8006cd6:	693b      	ldr	r3, [r7, #16]
 8006cd8:	2209      	movs	r2, #9
 8006cda:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8006cde:	e020      	b.n	8006d22 <USBH_MSC_BOT_Process+0x392>
        if (error == USBH_UNRECOVERED_ERROR)
 8006ce0:	7dbb      	ldrb	r3, [r7, #22]
 8006ce2:	2b04      	cmp	r3, #4
 8006ce4:	d11d      	bne.n	8006d22 <USBH_MSC_BOT_Process+0x392>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	220b      	movs	r2, #11
 8006cea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8006cee:	e018      	b.n	8006d22 <USBH_MSC_BOT_Process+0x392>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8006cf0:	6878      	ldr	r0, [r7, #4]
 8006cf2:	f7ff fdf0 	bl	80068d6 <USBH_MSC_BOT_REQ_Reset>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8006cfa:	7dfb      	ldrb	r3, [r7, #23]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d112      	bne.n	8006d26 <USBH_MSC_BOT_Process+0x396>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	2201      	movs	r2, #1
 8006d04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8006d08:	e00d      	b.n	8006d26 <USBH_MSC_BOT_Process+0x396>

    default:
      break;
 8006d0a:	bf00      	nop
 8006d0c:	e00c      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d0e:	bf00      	nop
 8006d10:	e00a      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d12:	bf00      	nop
 8006d14:	e008      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d16:	bf00      	nop
 8006d18:	e006      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d1a:	bf00      	nop
 8006d1c:	e004      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d1e:	bf00      	nop
 8006d20:	e002      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d22:	bf00      	nop
 8006d24:	e000      	b.n	8006d28 <USBH_MSC_BOT_Process+0x398>
      break;
 8006d26:	bf00      	nop
  }
  return status;
 8006d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d2a:	4618      	mov	r0, r3
 8006d2c:	3718      	adds	r7, #24
 8006d2e:	46bd      	mov	sp, r7
 8006d30:	bd80      	pop	{r7, pc}
 8006d32:	bf00      	nop

08006d34 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b084      	sub	sp, #16
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
 8006d3c:	460b      	mov	r3, r1
 8006d3e:	70fb      	strb	r3, [r7, #3]
 8006d40:	4613      	mov	r3, r2
 8006d42:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8006d44:	2302      	movs	r3, #2
 8006d46:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d4e:	69db      	ldr	r3, [r3, #28]
 8006d50:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8006d52:	78bb      	ldrb	r3, [r7, #2]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d002      	beq.n	8006d5e <USBH_MSC_BOT_Abort+0x2a>
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d009      	beq.n	8006d70 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8006d5c:	e011      	b.n	8006d82 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8006d5e:	68bb      	ldr	r3, [r7, #8]
 8006d60:	79db      	ldrb	r3, [r3, #7]
 8006d62:	4619      	mov	r1, r3
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f001 f99c 	bl	80080a2 <USBH_ClrFeature>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]
      break;
 8006d6e:	e008      	b.n	8006d82 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	799b      	ldrb	r3, [r3, #6]
 8006d74:	4619      	mov	r1, r3
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f001 f993 	bl	80080a2 <USBH_ClrFeature>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]
      break;
 8006d80:	bf00      	nop
  }
  return status;
 8006d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d84:	4618      	mov	r0, r3
 8006d86:	3710      	adds	r7, #16
 8006d88:	46bd      	mov	sp, r7
 8006d8a:	bd80      	pop	{r7, pc}

08006d8c <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8006d8c:	b580      	push	{r7, lr}
 8006d8e:	b084      	sub	sp, #16
 8006d90:	af00      	add	r7, sp, #0
 8006d92:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d9a:	69db      	ldr	r3, [r3, #28]
 8006d9c:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8006d9e:	2301      	movs	r3, #1
 8006da0:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	791b      	ldrb	r3, [r3, #4]
 8006da6:	4619      	mov	r1, r3
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f004 fc09 	bl	800b5c0 <USBH_LL_GetLastXferSize>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b0d      	cmp	r3, #13
 8006db2:	d002      	beq.n	8006dba <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8006db4:	2302      	movs	r3, #2
 8006db6:	73fb      	strb	r3, [r7, #15]
 8006db8:	e024      	b.n	8006e04 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006dbe:	4a14      	ldr	r2, [pc, #80]	; (8006e10 <USBH_MSC_DecodeCSW+0x84>)
 8006dc0:	4293      	cmp	r3, r2
 8006dc2:	d11d      	bne.n	8006e00 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d119      	bne.n	8006e04 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d102      	bne.n	8006de0 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	73fb      	strb	r3, [r7, #15]
 8006dde:	e011      	b.n	8006e04 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006de6:	2b01      	cmp	r3, #1
 8006de8:	d102      	bne.n	8006df0 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8006dea:	2301      	movs	r3, #1
 8006dec:	73fb      	strb	r3, [r7, #15]
 8006dee:	e009      	b.n	8006e04 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006df6:	2b02      	cmp	r3, #2
 8006df8:	d104      	bne.n	8006e04 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8006dfa:	2302      	movs	r3, #2
 8006dfc:	73fb      	strb	r3, [r7, #15]
 8006dfe:	e001      	b.n	8006e04 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8006e00:	2302      	movs	r3, #2
 8006e02:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8006e04:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e06:	4618      	mov	r0, r3
 8006e08:	3710      	adds	r7, #16
 8006e0a:	46bd      	mov	sp, r7
 8006e0c:	bd80      	pop	{r7, pc}
 8006e0e:	bf00      	nop
 8006e10:	53425355 	.word	0x53425355

08006e14 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b084      	sub	sp, #16
 8006e18:	af00      	add	r7, sp, #0
 8006e1a:	6078      	str	r0, [r7, #4]
 8006e1c:	460b      	mov	r3, r1
 8006e1e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8006e20:	2302      	movs	r3, #2
 8006e22:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e2a:	69db      	ldr	r3, [r3, #28]
 8006e2c:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006e34:	2b01      	cmp	r3, #1
 8006e36:	d002      	beq.n	8006e3e <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8006e38:	2b02      	cmp	r3, #2
 8006e3a:	d021      	beq.n	8006e80 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8006e3c:	e028      	b.n	8006e90 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	2200      	movs	r2, #0
 8006e42:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	2200      	movs	r2, #0
 8006e48:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	220a      	movs	r2, #10
 8006e50:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	3363      	adds	r3, #99	; 0x63
 8006e58:	2210      	movs	r2, #16
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	f004 fd44 	bl	800b8ea <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	2200      	movs	r2, #0
 8006e66:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006e6a:	68bb      	ldr	r3, [r7, #8]
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	2202      	movs	r2, #2
 8006e76:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e7e:	e007      	b.n	8006e90 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006e80:	78fb      	ldrb	r3, [r7, #3]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f7ff fd83 	bl	8006990 <USBH_MSC_BOT_Process>
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	73fb      	strb	r3, [r7, #15]
      break;
 8006e8e:	bf00      	nop
  }

  return error;
 8006e90:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e92:	4618      	mov	r0, r3
 8006e94:	3710      	adds	r7, #16
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b086      	sub	sp, #24
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	60f8      	str	r0, [r7, #12]
 8006ea2:	460b      	mov	r3, r1
 8006ea4:	607a      	str	r2, [r7, #4]
 8006ea6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006eb6:	693b      	ldr	r3, [r7, #16]
 8006eb8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006ebc:	2b01      	cmp	r3, #1
 8006ebe:	d002      	beq.n	8006ec6 <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8006ec0:	2b02      	cmp	r3, #2
 8006ec2:	d027      	beq.n	8006f14 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8006ec4:	e05f      	b.n	8006f86 <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	2208      	movs	r2, #8
 8006eca:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2280      	movs	r2, #128	; 0x80
 8006ed0:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	220a      	movs	r2, #10
 8006ed8:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8006edc:	693b      	ldr	r3, [r7, #16]
 8006ede:	3363      	adds	r3, #99	; 0x63
 8006ee0:	2210      	movs	r2, #16
 8006ee2:	2100      	movs	r1, #0
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	f004 fd00 	bl	800b8ea <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8006eea:	693b      	ldr	r3, [r7, #16]
 8006eec:	2225      	movs	r2, #37	; 0x25
 8006eee:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	2202      	movs	r2, #2
 8006efe:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8006f02:	693b      	ldr	r3, [r7, #16]
 8006f04:	f103 0210 	add.w	r2, r3, #16
 8006f08:	693b      	ldr	r3, [r7, #16]
 8006f0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8006f0e:	2301      	movs	r3, #1
 8006f10:	75fb      	strb	r3, [r7, #23]
      break;
 8006f12:	e038      	b.n	8006f86 <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8006f14:	7afb      	ldrb	r3, [r7, #11]
 8006f16:	4619      	mov	r1, r3
 8006f18:	68f8      	ldr	r0, [r7, #12]
 8006f1a:	f7ff fd39 	bl	8006990 <USBH_MSC_BOT_Process>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8006f22:	7dfb      	ldrb	r3, [r7, #23]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d12d      	bne.n	8006f84 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f2e:	3303      	adds	r3, #3
 8006f30:	781b      	ldrb	r3, [r3, #0]
 8006f32:	461a      	mov	r2, r3
 8006f34:	693b      	ldr	r3, [r7, #16]
 8006f36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f3a:	3302      	adds	r3, #2
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	021b      	lsls	r3, r3, #8
 8006f40:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f48:	3301      	adds	r3, #1
 8006f4a:	781b      	ldrb	r3, [r3, #0]
 8006f4c:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f4e:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	061b      	lsls	r3, r3, #24
 8006f5a:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f66:	3307      	adds	r3, #7
 8006f68:	781b      	ldrb	r3, [r3, #0]
 8006f6a:	b29a      	uxth	r2, r3
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006f72:	3306      	adds	r3, #6
 8006f74:	781b      	ldrb	r3, [r3, #0]
 8006f76:	b29b      	uxth	r3, r3
 8006f78:	021b      	lsls	r3, r3, #8
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	4313      	orrs	r3, r2
 8006f7e:	b29a      	uxth	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	809a      	strh	r2, [r3, #4]
      break;
 8006f84:	bf00      	nop
  }

  return error;
 8006f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3718      	adds	r7, #24
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}

08006f90 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8006f90:	b580      	push	{r7, lr}
 8006f92:	b086      	sub	sp, #24
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	60f8      	str	r0, [r7, #12]
 8006f98:	460b      	mov	r3, r1
 8006f9a:	607a      	str	r2, [r7, #4]
 8006f9c:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8006f9e:	2302      	movs	r3, #2
 8006fa0:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006fa8:	69db      	ldr	r3, [r3, #28]
 8006faa:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8006fac:	693b      	ldr	r3, [r7, #16]
 8006fae:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8006fb2:	2b01      	cmp	r3, #1
 8006fb4:	d002      	beq.n	8006fbc <USBH_MSC_SCSI_Inquiry+0x2c>
 8006fb6:	2b02      	cmp	r3, #2
 8006fb8:	d03d      	beq.n	8007036 <USBH_MSC_SCSI_Inquiry+0xa6>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 8006fba:	e089      	b.n	80070d0 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	2224      	movs	r2, #36	; 0x24
 8006fc0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2280      	movs	r2, #128	; 0x80
 8006fc6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	220a      	movs	r2, #10
 8006fce:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3363      	adds	r3, #99	; 0x63
 8006fd6:	220a      	movs	r2, #10
 8006fd8:	2100      	movs	r1, #0
 8006fda:	4618      	mov	r0, r3
 8006fdc:	f004 fc85 	bl	800b8ea <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	2212      	movs	r2, #18
 8006fe4:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8006fe8:	7afb      	ldrb	r3, [r7, #11]
 8006fea:	015b      	lsls	r3, r3, #5
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	2224      	movs	r2, #36	; 0x24
 8007008:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	2200      	movs	r2, #0
 8007010:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	2202      	movs	r2, #2
 8007020:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8007024:	693b      	ldr	r3, [r7, #16]
 8007026:	f103 0210 	add.w	r2, r3, #16
 800702a:	693b      	ldr	r3, [r7, #16]
 800702c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007030:	2301      	movs	r3, #1
 8007032:	75fb      	strb	r3, [r7, #23]
      break;
 8007034:	e04c      	b.n	80070d0 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007036:	7afb      	ldrb	r3, [r7, #11]
 8007038:	4619      	mov	r1, r3
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff fca8 	bl	8006990 <USBH_MSC_BOT_Process>
 8007040:	4603      	mov	r3, r0
 8007042:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8007044:	7dfb      	ldrb	r3, [r7, #23]
 8007046:	2b00      	cmp	r3, #0
 8007048:	d141      	bne.n	80070ce <USBH_MSC_SCSI_Inquiry+0x13e>
        USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 800704a:	2222      	movs	r2, #34	; 0x22
 800704c:	2100      	movs	r1, #0
 800704e:	6878      	ldr	r0, [r7, #4]
 8007050:	f004 fc4b 	bl	800b8ea <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800705a:	781b      	ldrb	r3, [r3, #0]
 800705c:	f003 031f 	and.w	r3, r3, #31
 8007060:	b2da      	uxtb	r2, r3
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 8007066:	693b      	ldr	r3, [r7, #16]
 8007068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800706c:	781b      	ldrb	r3, [r3, #0]
 800706e:	095b      	lsrs	r3, r3, #5
 8007070:	b2da      	uxtb	r2, r3
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 8007076:	693b      	ldr	r3, [r7, #16]
 8007078:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800707c:	3301      	adds	r3, #1
 800707e:	781b      	ldrb	r3, [r3, #0]
 8007080:	b25b      	sxtb	r3, r3
 8007082:	2b00      	cmp	r3, #0
 8007084:	da03      	bge.n	800708e <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	2201      	movs	r2, #1
 800708a:	709a      	strb	r2, [r3, #2]
 800708c:	e002      	b.n	8007094 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2200      	movs	r2, #0
 8007092:	709a      	strb	r2, [r3, #2]
        USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	1cd8      	adds	r0, r3, #3
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800709e:	3308      	adds	r3, #8
 80070a0:	2208      	movs	r2, #8
 80070a2:	4619      	mov	r1, r3
 80070a4:	f004 fc16 	bl	800b8d4 <memcpy>
        USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f103 000c 	add.w	r0, r3, #12
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80070b4:	3310      	adds	r3, #16
 80070b6:	2210      	movs	r2, #16
 80070b8:	4619      	mov	r1, r3
 80070ba:	f004 fc0b 	bl	800b8d4 <memcpy>
        USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	331d      	adds	r3, #29
 80070c2:	693a      	ldr	r2, [r7, #16]
 80070c4:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 80070c8:	3220      	adds	r2, #32
 80070ca:	6812      	ldr	r2, [r2, #0]
 80070cc:	601a      	str	r2, [r3, #0]
      break;
 80070ce:	bf00      	nop
  }

  return error;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b086      	sub	sp, #24
 80070de:	af00      	add	r7, sp, #0
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	460b      	mov	r3, r1
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80070e8:	2302      	movs	r3, #2
 80070ea:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80070f2:	69db      	ldr	r3, [r3, #28]
 80070f4:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80070f6:	693b      	ldr	r3, [r7, #16]
 80070f8:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d002      	beq.n	8007106 <USBH_MSC_SCSI_RequestSense+0x2c>
 8007100:	2b02      	cmp	r3, #2
 8007102:	d03d      	beq.n	8007180 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8007104:	e05d      	b.n	80071c2 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	220e      	movs	r2, #14
 800710a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 800710c:	693b      	ldr	r3, [r7, #16]
 800710e:	2280      	movs	r2, #128	; 0x80
 8007110:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007114:	693b      	ldr	r3, [r7, #16]
 8007116:	220a      	movs	r2, #10
 8007118:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800711c:	693b      	ldr	r3, [r7, #16]
 800711e:	3363      	adds	r3, #99	; 0x63
 8007120:	2210      	movs	r2, #16
 8007122:	2100      	movs	r1, #0
 8007124:	4618      	mov	r0, r3
 8007126:	f004 fbe0 	bl	800b8ea <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800712a:	693b      	ldr	r3, [r7, #16]
 800712c:	2203      	movs	r2, #3
 800712e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8007132:	7afb      	ldrb	r3, [r7, #11]
 8007134:	015b      	lsls	r3, r3, #5
 8007136:	b2da      	uxtb	r2, r3
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	2200      	movs	r2, #0
 8007142:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8007146:	693b      	ldr	r3, [r7, #16]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	220e      	movs	r2, #14
 8007152:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	2200      	movs	r2, #0
 800715a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007166:	693b      	ldr	r3, [r7, #16]
 8007168:	2202      	movs	r2, #2
 800716a:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	f103 0210 	add.w	r2, r3, #16
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 800717a:	2301      	movs	r3, #1
 800717c:	75fb      	strb	r3, [r7, #23]
      break;
 800717e:	e020      	b.n	80071c2 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007180:	7afb      	ldrb	r3, [r7, #11]
 8007182:	4619      	mov	r1, r3
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f7ff fc03 	bl	8006990 <USBH_MSC_BOT_Process>
 800718a:	4603      	mov	r3, r0
 800718c:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 800718e:	7dfb      	ldrb	r3, [r7, #23]
 8007190:	2b00      	cmp	r3, #0
 8007192:	d115      	bne.n	80071c0 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719a:	3302      	adds	r3, #2
 800719c:	781b      	ldrb	r3, [r3, #0]
 800719e:	f003 030f 	and.w	r3, r3, #15
 80071a2:	b2da      	uxtb	r2, r3
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 80071a8:	693b      	ldr	r3, [r7, #16]
 80071aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ae:	7b1a      	ldrb	r2, [r3, #12]
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071ba:	7b5a      	ldrb	r2, [r3, #13]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	709a      	strb	r2, [r3, #2]
      break;
 80071c0:	bf00      	nop
  }

  return error;
 80071c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3718      	adds	r7, #24
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	607a      	str	r2, [r7, #4]
 80071d6:	603b      	str	r3, [r7, #0]
 80071d8:	460b      	mov	r3, r1
 80071da:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80071dc:	2302      	movs	r3, #2
 80071de:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e6:	69db      	ldr	r3, [r3, #28]
 80071e8:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d002      	beq.n	80071fa <USBH_MSC_SCSI_Write+0x2e>
 80071f4:	2b02      	cmp	r3, #2
 80071f6:	d047      	beq.n	8007288 <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80071f8:	e04e      	b.n	8007298 <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8007200:	461a      	mov	r2, r3
 8007202:	6a3b      	ldr	r3, [r7, #32]
 8007204:	fb03 f202 	mul.w	r2, r3, r2
 8007208:	693b      	ldr	r3, [r7, #16]
 800720a:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 800720c:	693b      	ldr	r3, [r7, #16]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8007214:	693b      	ldr	r3, [r7, #16]
 8007216:	220a      	movs	r2, #10
 8007218:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	3363      	adds	r3, #99	; 0x63
 8007220:	2210      	movs	r2, #16
 8007222:	2100      	movs	r1, #0
 8007224:	4618      	mov	r0, r3
 8007226:	f004 fb60 	bl	800b8ea <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	222a      	movs	r2, #42	; 0x2a
 800722e:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007232:	79fa      	ldrb	r2, [r7, #7]
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800723a:	79ba      	ldrb	r2, [r7, #6]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007242:	797a      	ldrb	r2, [r7, #5]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 800724a:	1d3b      	adds	r3, r7, #4
 800724c:	781a      	ldrb	r2, [r3, #0]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 8007254:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 800725e:	f107 0320 	add.w	r3, r7, #32
 8007262:	781a      	ldrb	r2, [r3, #0]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2201      	movs	r2, #1
 800726e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	2202      	movs	r2, #2
 8007276:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 800727a:	693b      	ldr	r3, [r7, #16]
 800727c:	683a      	ldr	r2, [r7, #0]
 800727e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007282:	2301      	movs	r3, #1
 8007284:	75fb      	strb	r3, [r7, #23]
      break;
 8007286:	e007      	b.n	8007298 <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 8007288:	7afb      	ldrb	r3, [r7, #11]
 800728a:	4619      	mov	r1, r3
 800728c:	68f8      	ldr	r0, [r7, #12]
 800728e:	f7ff fb7f 	bl	8006990 <USBH_MSC_BOT_Process>
 8007292:	4603      	mov	r3, r0
 8007294:	75fb      	strb	r3, [r7, #23]
      break;
 8007296:	bf00      	nop
  }

  return error;
 8007298:	7dfb      	ldrb	r3, [r7, #23]
}
 800729a:	4618      	mov	r0, r3
 800729c:	3718      	adds	r7, #24
 800729e:	46bd      	mov	sp, r7
 80072a0:	bd80      	pop	{r7, pc}

080072a2 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 80072a2:	b580      	push	{r7, lr}
 80072a4:	b086      	sub	sp, #24
 80072a6:	af00      	add	r7, sp, #0
 80072a8:	60f8      	str	r0, [r7, #12]
 80072aa:	607a      	str	r2, [r7, #4]
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	460b      	mov	r3, r1
 80072b0:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 80072b2:	2302      	movs	r3, #2
 80072b4:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 80072c0:	693b      	ldr	r3, [r7, #16]
 80072c2:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d002      	beq.n	80072d0 <USBH_MSC_SCSI_Read+0x2e>
 80072ca:	2b02      	cmp	r3, #2
 80072cc:	d047      	beq.n	800735e <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 80072ce:	e04e      	b.n	800736e <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 80072d6:	461a      	mov	r2, r3
 80072d8:	6a3b      	ldr	r3, [r7, #32]
 80072da:	fb03 f202 	mul.w	r2, r3, r2
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 80072e2:	693b      	ldr	r3, [r7, #16]
 80072e4:	2280      	movs	r2, #128	; 0x80
 80072e6:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 80072ea:	693b      	ldr	r3, [r7, #16]
 80072ec:	220a      	movs	r2, #10
 80072ee:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 80072f2:	693b      	ldr	r3, [r7, #16]
 80072f4:	3363      	adds	r3, #99	; 0x63
 80072f6:	2210      	movs	r2, #16
 80072f8:	2100      	movs	r1, #0
 80072fa:	4618      	mov	r0, r3
 80072fc:	f004 faf5 	bl	800b8ea <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8007300:	693b      	ldr	r3, [r7, #16]
 8007302:	2228      	movs	r2, #40	; 0x28
 8007304:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8007308:	79fa      	ldrb	r2, [r7, #7]
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8007310:	79ba      	ldrb	r2, [r7, #6]
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 8007318:	797a      	ldrb	r2, [r7, #5]
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8007320:	1d3b      	adds	r3, r7, #4
 8007322:	781a      	ldrb	r2, [r3, #0]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800732a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800732e:	693b      	ldr	r3, [r7, #16]
 8007330:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8007334:	f107 0320 	add.w	r3, r7, #32
 8007338:	781a      	ldrb	r2, [r3, #0]
 800733a:	693b      	ldr	r3, [r7, #16]
 800733c:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8007340:	693b      	ldr	r3, [r7, #16]
 8007342:	2201      	movs	r2, #1
 8007344:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	2202      	movs	r2, #2
 800734c:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 8007350:	693b      	ldr	r3, [r7, #16]
 8007352:	683a      	ldr	r2, [r7, #0]
 8007354:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8007358:	2301      	movs	r3, #1
 800735a:	75fb      	strb	r3, [r7, #23]
      break;
 800735c:	e007      	b.n	800736e <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 800735e:	7afb      	ldrb	r3, [r7, #11]
 8007360:	4619      	mov	r1, r3
 8007362:	68f8      	ldr	r0, [r7, #12]
 8007364:	f7ff fb14 	bl	8006990 <USBH_MSC_BOT_Process>
 8007368:	4603      	mov	r3, r0
 800736a:	75fb      	strb	r3, [r7, #23]
      break;
 800736c:	bf00      	nop
  }

  return error;
 800736e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007370:	4618      	mov	r0, r3
 8007372:	3718      	adds	r7, #24
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007378:	b580      	push	{r7, lr}
 800737a:	b084      	sub	sp, #16
 800737c:	af00      	add	r7, sp, #0
 800737e:	60f8      	str	r0, [r7, #12]
 8007380:	60b9      	str	r1, [r7, #8]
 8007382:	4613      	mov	r3, r2
 8007384:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d101      	bne.n	8007390 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800738c:	2302      	movs	r3, #2
 800738e:	e029      	b.n	80073e4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	79fa      	ldrb	r2, [r7, #7]
 8007394:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2200      	movs	r2, #0
 800739c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	2200      	movs	r2, #0
 80073a4:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 80073a8:	68f8      	ldr	r0, [r7, #12]
 80073aa:	f000 f81f 	bl	80073ec <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	2200      	movs	r2, #0
 80073b2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	2200      	movs	r2, #0
 80073ba:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2200      	movs	r2, #0
 80073c2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2200      	movs	r2, #0
 80073ca:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d003      	beq.n	80073dc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	68ba      	ldr	r2, [r7, #8]
 80073d8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 80073dc:	68f8      	ldr	r0, [r7, #12]
 80073de:	f004 f83d 	bl	800b45c <USBH_LL_Init>

  return USBH_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3710      	adds	r7, #16
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b085      	sub	sp, #20
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80073f4:	2300      	movs	r3, #0
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80073f8:	2300      	movs	r3, #0
 80073fa:	60fb      	str	r3, [r7, #12]
 80073fc:	e009      	b.n	8007412 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	33e0      	adds	r3, #224	; 0xe0
 8007404:	009b      	lsls	r3, r3, #2
 8007406:	4413      	add	r3, r2
 8007408:	2200      	movs	r2, #0
 800740a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	3301      	adds	r3, #1
 8007410:	60fb      	str	r3, [r7, #12]
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	2b0e      	cmp	r3, #14
 8007416:	d9f2      	bls.n	80073fe <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007418:	2300      	movs	r3, #0
 800741a:	60fb      	str	r3, [r7, #12]
 800741c:	e009      	b.n	8007432 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007428:	2200      	movs	r2, #0
 800742a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	3301      	adds	r3, #1
 8007430:	60fb      	str	r3, [r7, #12]
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007438:	d3f1      	bcc.n	800741e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	2200      	movs	r2, #0
 800743e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2200      	movs	r2, #0
 8007444:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2201      	movs	r2, #1
 800744a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	2240      	movs	r2, #64	; 0x40
 800745e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	2200      	movs	r2, #0
 8007464:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2201      	movs	r2, #1
 8007472:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	2200      	movs	r2, #0
 8007482:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007486:	2300      	movs	r3, #0
}
 8007488:	4618      	mov	r0, r3
 800748a:	3714      	adds	r7, #20
 800748c:	46bd      	mov	sp, r7
 800748e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007492:	4770      	bx	lr

08007494 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007494:	b480      	push	{r7}
 8007496:	b085      	sub	sp, #20
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800749e:	2300      	movs	r3, #0
 80074a0:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d016      	beq.n	80074d6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d10e      	bne.n	80074d0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80074b8:	1c59      	adds	r1, r3, #1
 80074ba:	687a      	ldr	r2, [r7, #4]
 80074bc:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80074c0:	687a      	ldr	r2, [r7, #4]
 80074c2:	33de      	adds	r3, #222	; 0xde
 80074c4:	6839      	ldr	r1, [r7, #0]
 80074c6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80074ca:	2300      	movs	r3, #0
 80074cc:	73fb      	strb	r3, [r7, #15]
 80074ce:	e004      	b.n	80074da <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80074d0:	2302      	movs	r3, #2
 80074d2:	73fb      	strb	r3, [r7, #15]
 80074d4:	e001      	b.n	80074da <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80074d6:	2302      	movs	r3, #2
 80074d8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80074da:	7bfb      	ldrb	r3, [r7, #15]
}
 80074dc:	4618      	mov	r0, r3
 80074de:	3714      	adds	r7, #20
 80074e0:	46bd      	mov	sp, r7
 80074e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e6:	4770      	bx	lr

080074e8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80074e8:	b480      	push	{r7}
 80074ea:	b085      	sub	sp, #20
 80074ec:	af00      	add	r7, sp, #0
 80074ee:	6078      	str	r0, [r7, #4]
 80074f0:	460b      	mov	r3, r1
 80074f2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80074f4:	2300      	movs	r3, #0
 80074f6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80074fe:	78fa      	ldrb	r2, [r7, #3]
 8007500:	429a      	cmp	r2, r3
 8007502:	d204      	bcs.n	800750e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	78fa      	ldrb	r2, [r7, #3]
 8007508:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800750c:	e001      	b.n	8007512 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800750e:	2302      	movs	r3, #2
 8007510:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007512:	7bfb      	ldrb	r3, [r7, #15]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3714      	adds	r7, #20
 8007518:	46bd      	mov	sp, r7
 800751a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800751e:	4770      	bx	lr

08007520 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007520:	b480      	push	{r7}
 8007522:	b087      	sub	sp, #28
 8007524:	af00      	add	r7, sp, #0
 8007526:	6078      	str	r0, [r7, #4]
 8007528:	4608      	mov	r0, r1
 800752a:	4611      	mov	r1, r2
 800752c:	461a      	mov	r2, r3
 800752e:	4603      	mov	r3, r0
 8007530:	70fb      	strb	r3, [r7, #3]
 8007532:	460b      	mov	r3, r1
 8007534:	70bb      	strb	r3, [r7, #2]
 8007536:	4613      	mov	r3, r2
 8007538:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800753a:	2300      	movs	r3, #0
 800753c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 800753e:	2300      	movs	r3, #0
 8007540:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007548:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800754a:	e025      	b.n	8007598 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800754c:	7dfb      	ldrb	r3, [r7, #23]
 800754e:	221a      	movs	r2, #26
 8007550:	fb02 f303 	mul.w	r3, r2, r3
 8007554:	3308      	adds	r3, #8
 8007556:	68fa      	ldr	r2, [r7, #12]
 8007558:	4413      	add	r3, r2
 800755a:	3302      	adds	r3, #2
 800755c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800755e:	693b      	ldr	r3, [r7, #16]
 8007560:	795b      	ldrb	r3, [r3, #5]
 8007562:	78fa      	ldrb	r2, [r7, #3]
 8007564:	429a      	cmp	r2, r3
 8007566:	d002      	beq.n	800756e <USBH_FindInterface+0x4e>
 8007568:	78fb      	ldrb	r3, [r7, #3]
 800756a:	2bff      	cmp	r3, #255	; 0xff
 800756c:	d111      	bne.n	8007592 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800756e:	693b      	ldr	r3, [r7, #16]
 8007570:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007572:	78ba      	ldrb	r2, [r7, #2]
 8007574:	429a      	cmp	r2, r3
 8007576:	d002      	beq.n	800757e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007578:	78bb      	ldrb	r3, [r7, #2]
 800757a:	2bff      	cmp	r3, #255	; 0xff
 800757c:	d109      	bne.n	8007592 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007582:	787a      	ldrb	r2, [r7, #1]
 8007584:	429a      	cmp	r2, r3
 8007586:	d002      	beq.n	800758e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007588:	787b      	ldrb	r3, [r7, #1]
 800758a:	2bff      	cmp	r3, #255	; 0xff
 800758c:	d101      	bne.n	8007592 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800758e:	7dfb      	ldrb	r3, [r7, #23]
 8007590:	e006      	b.n	80075a0 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	3301      	adds	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007598:	7dfb      	ldrb	r3, [r7, #23]
 800759a:	2b01      	cmp	r3, #1
 800759c:	d9d6      	bls.n	800754c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800759e:	23ff      	movs	r3, #255	; 0xff
}
 80075a0:	4618      	mov	r0, r3
 80075a2:	371c      	adds	r7, #28
 80075a4:	46bd      	mov	sp, r7
 80075a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075aa:	4770      	bx	lr

080075ac <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f003 ff8d 	bl	800b4d4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 80075ba:	2101      	movs	r1, #1
 80075bc:	6878      	ldr	r0, [r7, #4]
 80075be:	f004 f8a4 	bl	800b70a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80075c2:	2300      	movs	r3, #0
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b088      	sub	sp, #32
 80075d0:	af04      	add	r7, sp, #16
 80075d2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80075d4:	2302      	movs	r3, #2
 80075d6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80075d8:	2300      	movs	r3, #0
 80075da:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80075e2:	b2db      	uxtb	r3, r3
 80075e4:	2b01      	cmp	r3, #1
 80075e6:	d102      	bne.n	80075ee <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	2203      	movs	r2, #3
 80075ec:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	2b0b      	cmp	r3, #11
 80075f6:	f200 81b3 	bhi.w	8007960 <USBH_Process+0x394>
 80075fa:	a201      	add	r2, pc, #4	; (adr r2, 8007600 <USBH_Process+0x34>)
 80075fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007600:	08007631 	.word	0x08007631
 8007604:	08007663 	.word	0x08007663
 8007608:	080076cb 	.word	0x080076cb
 800760c:	080078fb 	.word	0x080078fb
 8007610:	08007961 	.word	0x08007961
 8007614:	0800776f 	.word	0x0800776f
 8007618:	080078a1 	.word	0x080078a1
 800761c:	080077a5 	.word	0x080077a5
 8007620:	080077c5 	.word	0x080077c5
 8007624:	080077e5 	.word	0x080077e5
 8007628:	08007813 	.word	0x08007813
 800762c:	080078e3 	.word	0x080078e3
  {
    case HOST_IDLE :

      if (phost->device.is_connected)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8007636:	b2db      	uxtb	r3, r3
 8007638:	2b00      	cmp	r3, #0
 800763a:	f000 8193 	beq.w	8007964 <USBH_Process+0x398>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	2201      	movs	r2, #1
 8007642:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8007644:	20c8      	movs	r0, #200	; 0xc8
 8007646:	f004 f8d4 	bl	800b7f2 <USBH_Delay>
        USBH_LL_ResetPort(phost);
 800764a:	6878      	ldr	r0, [r7, #4]
 800764c:	f003 ff9d 	bl	800b58a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2200      	movs	r2, #0
 800765c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007660:	e180      	b.n	8007964 <USBH_Process+0x398>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8007668:	2b01      	cmp	r3, #1
 800766a:	d107      	bne.n	800767c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	2200      	movs	r2, #0
 8007670:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2202      	movs	r2, #2
 8007678:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800767a:	e182      	b.n	8007982 <USBH_Process+0x3b6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8007682:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007686:	d914      	bls.n	80076b2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800768e:	3301      	adds	r3, #1
 8007690:	b2da      	uxtb	r2, r3
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 800769e:	2b03      	cmp	r3, #3
 80076a0:	d903      	bls.n	80076aa <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	220d      	movs	r2, #13
 80076a6:	701a      	strb	r2, [r3, #0]
      break;
 80076a8:	e16b      	b.n	8007982 <USBH_Process+0x3b6>
            phost->gState = HOST_IDLE;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2200      	movs	r2, #0
 80076ae:	701a      	strb	r2, [r3, #0]
      break;
 80076b0:	e167      	b.n	8007982 <USBH_Process+0x3b6>
          phost->Timeout += 10U;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80076b8:	f103 020a 	add.w	r2, r3, #10
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 80076c2:	200a      	movs	r0, #10
 80076c4:	f004 f895 	bl	800b7f2 <USBH_Delay>
      break;
 80076c8:	e15b      	b.n	8007982 <USBH_Process+0x3b6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80076da:	2104      	movs	r1, #4
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 80076e0:	2064      	movs	r0, #100	; 0x64
 80076e2:	f004 f886 	bl	800b7f2 <USBH_Delay>

      phost->device.speed = USBH_LL_GetSpeed(phost);
 80076e6:	6878      	ldr	r0, [r7, #4]
 80076e8:	f003 ff2a 	bl	800b540 <USBH_LL_GetSpeed>
 80076ec:	4603      	mov	r3, r0
 80076ee:	461a      	mov	r2, r3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2205      	movs	r2, #5
 80076fa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 80076fc:	2100      	movs	r1, #0
 80076fe:	6878      	ldr	r0, [r7, #4]
 8007700:	f001 f931 	bl	8008966 <USBH_AllocPipe>
 8007704:	4603      	mov	r3, r0
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800770c:	2180      	movs	r1, #128	; 0x80
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f001 f929 	bl	8008966 <USBH_AllocPipe>
 8007714:	4603      	mov	r3, r0
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	7919      	ldrb	r1, [r3, #4]
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800772c:	687a      	ldr	r2, [r7, #4]
 800772e:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8007730:	b292      	uxth	r2, r2
 8007732:	9202      	str	r2, [sp, #8]
 8007734:	2200      	movs	r2, #0
 8007736:	9201      	str	r2, [sp, #4]
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	4603      	mov	r3, r0
 800773c:	2280      	movs	r2, #128	; 0x80
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f001 f8e2 	bl	8008908 <USBH_OpenPipe>

      /* Open Control pipes */
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	7959      	ldrb	r1, [r3, #5]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                    phost->device.address, phost->device.speed,
                    USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	7992      	ldrb	r2, [r2, #6]
      USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8007758:	b292      	uxth	r2, r2
 800775a:	9202      	str	r2, [sp, #8]
 800775c:	2200      	movs	r2, #0
 800775e:	9201      	str	r2, [sp, #4]
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	4603      	mov	r3, r0
 8007764:	2200      	movs	r2, #0
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f001 f8ce 	bl	8008908 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800776c:	e109      	b.n	8007982 <USBH_Process+0x3b6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f90c 	bl	800798c <USBH_HandleEnum>
 8007774:	4603      	mov	r3, r0
 8007776:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	f040 80f3 	bne.w	8007968 <USBH_Process+0x39c>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	2200      	movs	r2, #0
 8007786:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8007790:	2b01      	cmp	r3, #1
 8007792:	d103      	bne.n	800779c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2208      	movs	r2, #8
 8007798:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 800779a:	e0e5      	b.n	8007968 <USBH_Process+0x39c>
          phost->gState = HOST_INPUT;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2207      	movs	r2, #7
 80077a0:	701a      	strb	r2, [r3, #0]
      break;
 80077a2:	e0e1      	b.n	8007968 <USBH_Process+0x39c>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	f000 80de 	beq.w	800796c <USBH_Process+0x3a0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80077b6:	2101      	movs	r1, #1
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2208      	movs	r2, #8
 80077c0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
    }
    break;
 80077c2:	e0d3      	b.n	800796c <USBH_Process+0x3a0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 80077ca:	b29b      	uxth	r3, r3
 80077cc:	4619      	mov	r1, r3
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fc20 	bl	8008014 <USBH_SetCfg>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f040 80ca 	bne.w	8007970 <USBH_Process+0x3a4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2209      	movs	r2, #9
 80077e0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80077e2:	e0c5      	b.n	8007970 <USBH_Process+0x3a4>

    case  HOST_SET_WAKEUP_FEATURE:

      if ((phost->device.CfgDesc.bmAttributes) & (1U << 5))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 80077ea:	f003 0320 	and.w	r3, r3, #32
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d00b      	beq.n	800780a <USBH_Process+0x23e>
      {
        if (USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP) == USBH_OK)
 80077f2:	2101      	movs	r1, #1
 80077f4:	6878      	ldr	r0, [r7, #4]
 80077f6:	f000 fc30 	bl	800805a <USBH_SetFeature>
 80077fa:	4603      	mov	r3, r0
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	f040 80b9 	bne.w	8007974 <USBH_Process+0x3a8>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	220a      	movs	r2, #10
 8007806:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007808:	e0b4      	b.n	8007974 <USBH_Process+0x3a8>
        phost->gState = HOST_CHECK_CLASS;
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	220a      	movs	r2, #10
 800780e:	701a      	strb	r2, [r3, #0]
      break;
 8007810:	e0b0      	b.n	8007974 <USBH_Process+0x3a8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007818:	2b00      	cmp	r3, #0
 800781a:	f000 80ad 	beq.w	8007978 <USBH_Process+0x3ac>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	2200      	movs	r2, #0
 8007822:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007826:	2300      	movs	r3, #0
 8007828:	73fb      	strb	r3, [r7, #15]
 800782a:	e016      	b.n	800785a <USBH_Process+0x28e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800782c:	7bfa      	ldrb	r2, [r7, #15]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	32de      	adds	r2, #222	; 0xde
 8007832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007836:	791a      	ldrb	r2, [r3, #4]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 800783e:	429a      	cmp	r2, r3
 8007840:	d108      	bne.n	8007854 <USBH_Process+0x288>
          {
            phost->pActiveClass = phost->pClass[idx];
 8007842:	7bfa      	ldrb	r2, [r7, #15]
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	32de      	adds	r2, #222	; 0xde
 8007848:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8007852:	e005      	b.n	8007860 <USBH_Process+0x294>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8007854:	7bfb      	ldrb	r3, [r7, #15]
 8007856:	3301      	adds	r3, #1
 8007858:	73fb      	strb	r3, [r7, #15]
 800785a:	7bfb      	ldrb	r3, [r7, #15]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d0e5      	beq.n	800782c <USBH_Process+0x260>
          }
        }

        if (phost->pActiveClass != NULL)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007866:	2b00      	cmp	r3, #0
 8007868:	d016      	beq.n	8007898 <USBH_Process+0x2cc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007870:	689b      	ldr	r3, [r3, #8]
 8007872:	6878      	ldr	r0, [r7, #4]
 8007874:	4798      	blx	r3
 8007876:	4603      	mov	r3, r0
 8007878:	2b00      	cmp	r3, #0
 800787a:	d109      	bne.n	8007890 <USBH_Process+0x2c4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2206      	movs	r2, #6
 8007880:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007888:	2103      	movs	r1, #3
 800788a:	6878      	ldr	r0, [r7, #4]
 800788c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 800788e:	e073      	b.n	8007978 <USBH_Process+0x3ac>
            phost->gState = HOST_ABORT_STATE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	220d      	movs	r2, #13
 8007894:	701a      	strb	r2, [r3, #0]
      break;
 8007896:	e06f      	b.n	8007978 <USBH_Process+0x3ac>
          phost->gState = HOST_ABORT_STATE;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	220d      	movs	r2, #13
 800789c:	701a      	strb	r2, [r3, #0]
      break;
 800789e:	e06b      	b.n	8007978 <USBH_Process+0x3ac>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d017      	beq.n	80078da <USBH_Process+0x30e>
      {
        status = phost->pActiveClass->Requests(phost);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	4798      	blx	r3
 80078b6:	4603      	mov	r3, r0
 80078b8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80078ba:	7bbb      	ldrb	r3, [r7, #14]
 80078bc:	b2db      	uxtb	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d103      	bne.n	80078ca <USBH_Process+0x2fe>
        {
          phost->gState = HOST_CLASS;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	220b      	movs	r2, #11
 80078c6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 80078c8:	e058      	b.n	800797c <USBH_Process+0x3b0>
        else if (status == USBH_FAIL)
 80078ca:	7bbb      	ldrb	r3, [r7, #14]
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	2b02      	cmp	r3, #2
 80078d0:	d154      	bne.n	800797c <USBH_Process+0x3b0>
          phost->gState = HOST_ABORT_STATE;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	220d      	movs	r2, #13
 80078d6:	701a      	strb	r2, [r3, #0]
      break;
 80078d8:	e050      	b.n	800797c <USBH_Process+0x3b0>
        phost->gState = HOST_ABORT_STATE;
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	220d      	movs	r2, #13
 80078de:	701a      	strb	r2, [r3, #0]
      break;
 80078e0:	e04c      	b.n	800797c <USBH_Process+0x3b0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d049      	beq.n	8007980 <USBH_Process+0x3b4>
      {
        phost->pActiveClass->BgndProcess(phost);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f2:	695b      	ldr	r3, [r3, #20]
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	4798      	blx	r3
      }
      break;
 80078f8:	e042      	b.n	8007980 <USBH_Process+0x3b4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      DeInitStateMachine(phost);
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f7ff fd72 	bl	80073ec <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800790e:	2b00      	cmp	r3, #0
 8007910:	d009      	beq.n	8007926 <USBH_Process+0x35a>
      {
        phost->pActiveClass->DeInit(phost);
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <USBH_Process+0x370>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007936:	2105      	movs	r1, #5
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8007942:	b2db      	uxtb	r3, r3
 8007944:	2b01      	cmp	r3, #1
 8007946:	d107      	bne.n	8007958 <USBH_Process+0x38c>
      {
        phost->device.is_ReEnumerated = 0U;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        USBH_Start(phost);
 8007950:	6878      	ldr	r0, [r7, #4]
 8007952:	f7ff fe2b 	bl	80075ac <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      break;
 8007956:	e014      	b.n	8007982 <USBH_Process+0x3b6>
        USBH_LL_Start(phost);
 8007958:	6878      	ldr	r0, [r7, #4]
 800795a:	f003 fdbb 	bl	800b4d4 <USBH_LL_Start>
      break;
 800795e:	e010      	b.n	8007982 <USBH_Process+0x3b6>

    case HOST_ABORT_STATE:
    default :
      break;
 8007960:	bf00      	nop
 8007962:	e00e      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 8007964:	bf00      	nop
 8007966:	e00c      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 8007968:	bf00      	nop
 800796a:	e00a      	b.n	8007982 <USBH_Process+0x3b6>
    break;
 800796c:	bf00      	nop
 800796e:	e008      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 8007970:	bf00      	nop
 8007972:	e006      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 8007974:	bf00      	nop
 8007976:	e004      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 8007978:	bf00      	nop
 800797a:	e002      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 800797c:	bf00      	nop
 800797e:	e000      	b.n	8007982 <USBH_Process+0x3b6>
      break;
 8007980:	bf00      	nop
  }
  return USBH_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af04      	add	r7, sp, #16
 8007992:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8007994:	2301      	movs	r3, #1
 8007996:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8007998:	2301      	movs	r3, #1
 800799a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	785b      	ldrb	r3, [r3, #1]
 80079a0:	2b07      	cmp	r3, #7
 80079a2:	f200 81c1 	bhi.w	8007d28 <USBH_HandleEnum+0x39c>
 80079a6:	a201      	add	r2, pc, #4	; (adr r2, 80079ac <USBH_HandleEnum+0x20>)
 80079a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079ac:	080079cd 	.word	0x080079cd
 80079b0:	08007a8b 	.word	0x08007a8b
 80079b4:	08007af5 	.word	0x08007af5
 80079b8:	08007b83 	.word	0x08007b83
 80079bc:	08007bed 	.word	0x08007bed
 80079c0:	08007c5d 	.word	0x08007c5d
 80079c4:	08007ca3 	.word	0x08007ca3
 80079c8:	08007ce9 	.word	0x08007ce9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 80079cc:	2108      	movs	r1, #8
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fa50 	bl	8007e74 <USBH_Get_DevDesc>
 80079d4:	4603      	mov	r3, r0
 80079d6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80079d8:	7bbb      	ldrb	r3, [r7, #14]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d130      	bne.n	8007a40 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	7919      	ldrb	r1, [r3, #4]
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8007a02:	b292      	uxth	r2, r2
 8007a04:	9202      	str	r2, [sp, #8]
 8007a06:	2200      	movs	r2, #0
 8007a08:	9201      	str	r2, [sp, #4]
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	4603      	mov	r3, r0
 8007a0e:	2280      	movs	r2, #128	; 0x80
 8007a10:	6878      	ldr	r0, [r7, #4]
 8007a12:	f000 ff79 	bl	8008908 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	7959      	ldrb	r1, [r3, #5]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007a2a:	b292      	uxth	r2, r2
 8007a2c:	9202      	str	r2, [sp, #8]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	9201      	str	r2, [sp, #4]
 8007a32:	9300      	str	r3, [sp, #0]
 8007a34:	4603      	mov	r3, r0
 8007a36:	2200      	movs	r2, #0
 8007a38:	6878      	ldr	r0, [r7, #4]
 8007a3a:	f000 ff65 	bl	8008908 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007a3e:	e175      	b.n	8007d2c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007a40:	7bbb      	ldrb	r3, [r7, #14]
 8007a42:	2b03      	cmp	r3, #3
 8007a44:	f040 8172 	bne.w	8007d2c <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a4e:	3301      	adds	r3, #1
 8007a50:	b2da      	uxtb	r2, r3
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007a5e:	2b03      	cmp	r3, #3
 8007a60:	d903      	bls.n	8007a6a <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	220d      	movs	r2, #13
 8007a66:	701a      	strb	r2, [r3, #0]
      break;
 8007a68:	e160      	b.n	8007d2c <USBH_HandleEnum+0x3a0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	795b      	ldrb	r3, [r3, #5]
 8007a6e:	4619      	mov	r1, r3
 8007a70:	6878      	ldr	r0, [r7, #4]
 8007a72:	f000 ff99 	bl	80089a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	791b      	ldrb	r3, [r3, #4]
 8007a7a:	4619      	mov	r1, r3
 8007a7c:	6878      	ldr	r0, [r7, #4]
 8007a7e:	f000 ff93 	bl	80089a8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	2200      	movs	r2, #0
 8007a86:	701a      	strb	r2, [r3, #0]
      break;
 8007a88:	e150      	b.n	8007d2c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8007a8a:	2112      	movs	r1, #18
 8007a8c:	6878      	ldr	r0, [r7, #4]
 8007a8e:	f000 f9f1 	bl	8007e74 <USBH_Get_DevDesc>
 8007a92:	4603      	mov	r3, r0
 8007a94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007a96:	7bbb      	ldrb	r3, [r7, #14]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d103      	bne.n	8007aa4 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2202      	movs	r2, #2
 8007aa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007aa2:	e145      	b.n	8007d30 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007aa4:	7bbb      	ldrb	r3, [r7, #14]
 8007aa6:	2b03      	cmp	r3, #3
 8007aa8:	f040 8142 	bne.w	8007d30 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ab2:	3301      	adds	r3, #1
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007ac2:	2b03      	cmp	r3, #3
 8007ac4:	d903      	bls.n	8007ace <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	220d      	movs	r2, #13
 8007aca:	701a      	strb	r2, [r3, #0]
      break;
 8007acc:	e130      	b.n	8007d30 <USBH_HandleEnum+0x3a4>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	795b      	ldrb	r3, [r3, #5]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	6878      	ldr	r0, [r7, #4]
 8007ad6:	f000 ff67 	bl	80089a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	791b      	ldrb	r3, [r3, #4]
 8007ade:	4619      	mov	r1, r3
 8007ae0:	6878      	ldr	r0, [r7, #4]
 8007ae2:	f000 ff61 	bl	80089a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	2200      	movs	r2, #0
 8007aea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	701a      	strb	r2, [r3, #0]
      break;
 8007af2:	e11d      	b.n	8007d30 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8007af4:	2101      	movs	r1, #1
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f000 fa68 	bl	8007fcc <USBH_SetAddress>
 8007afc:	4603      	mov	r3, r0
 8007afe:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b00:	7bbb      	ldrb	r3, [r7, #14]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d132      	bne.n	8007b6c <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8007b06:	2002      	movs	r0, #2
 8007b08:	f003 fe73 	bl	800b7f2 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2201      	movs	r2, #1
 8007b10:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2203      	movs	r2, #3
 8007b18:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	7919      	ldrb	r1, [r3, #4]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b2a:	687a      	ldr	r2, [r7, #4]
 8007b2c:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8007b2e:	b292      	uxth	r2, r2
 8007b30:	9202      	str	r2, [sp, #8]
 8007b32:	2200      	movs	r2, #0
 8007b34:	9201      	str	r2, [sp, #4]
 8007b36:	9300      	str	r3, [sp, #0]
 8007b38:	4603      	mov	r3, r0
 8007b3a:	2280      	movs	r2, #128	; 0x80
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fee3 	bl	8008908 <USBH_OpenPipe>

        /* Open Control pipes */
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	7959      	ldrb	r1, [r3, #5]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                      phost->device.speed, USBH_EP_CONTROL,
                      (uint16_t)phost->Control.pipe_size);
 8007b52:	687a      	ldr	r2, [r7, #4]
 8007b54:	7992      	ldrb	r2, [r2, #6]
        USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8007b56:	b292      	uxth	r2, r2
 8007b58:	9202      	str	r2, [sp, #8]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	9201      	str	r2, [sp, #4]
 8007b5e:	9300      	str	r3, [sp, #0]
 8007b60:	4603      	mov	r3, r0
 8007b62:	2200      	movs	r2, #0
 8007b64:	6878      	ldr	r0, [r7, #4]
 8007b66:	f000 fecf 	bl	8008908 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8007b6a:	e0e3      	b.n	8007d34 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b6c:	7bbb      	ldrb	r3, [r7, #14]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	f040 80e0 	bne.w	8007d34 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	220d      	movs	r2, #13
 8007b78:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2200      	movs	r2, #0
 8007b7e:	705a      	strb	r2, [r3, #1]
      break;
 8007b80:	e0d8      	b.n	8007d34 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8007b82:	2109      	movs	r1, #9
 8007b84:	6878      	ldr	r0, [r7, #4]
 8007b86:	f000 f99d 	bl	8007ec4 <USBH_Get_CfgDesc>
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007b8e:	7bbb      	ldrb	r3, [r7, #14]
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d103      	bne.n	8007b9c <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	2204      	movs	r2, #4
 8007b98:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007b9a:	e0cd      	b.n	8007d38 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b03      	cmp	r3, #3
 8007ba0:	f040 80ca 	bne.w	8007d38 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007baa:	3301      	adds	r3, #1
 8007bac:	b2da      	uxtb	r2, r3
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007bba:	2b03      	cmp	r3, #3
 8007bbc:	d903      	bls.n	8007bc6 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	220d      	movs	r2, #13
 8007bc2:	701a      	strb	r2, [r3, #0]
      break;
 8007bc4:	e0b8      	b.n	8007d38 <USBH_HandleEnum+0x3ac>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	795b      	ldrb	r3, [r3, #5]
 8007bca:	4619      	mov	r1, r3
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 feeb 	bl	80089a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	791b      	ldrb	r3, [r3, #4]
 8007bd6:	4619      	mov	r1, r3
 8007bd8:	6878      	ldr	r0, [r7, #4]
 8007bda:	f000 fee5 	bl	80089a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2200      	movs	r2, #0
 8007be2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2200      	movs	r2, #0
 8007be8:	701a      	strb	r2, [r3, #0]
      break;
 8007bea:	e0a5      	b.n	8007d38 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f965 	bl	8007ec4 <USBH_Get_CfgDesc>
 8007bfa:	4603      	mov	r3, r0
 8007bfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007bfe:	7bbb      	ldrb	r3, [r7, #14]
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d103      	bne.n	8007c0c <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	2205      	movs	r2, #5
 8007c08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007c0a:	e097      	b.n	8007d3c <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c0c:	7bbb      	ldrb	r3, [r7, #14]
 8007c0e:	2b03      	cmp	r3, #3
 8007c10:	f040 8094 	bne.w	8007d3c <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c1a:	3301      	adds	r3, #1
 8007c1c:	b2da      	uxtb	r2, r3
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007c2a:	2b03      	cmp	r3, #3
 8007c2c:	d903      	bls.n	8007c36 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	220d      	movs	r2, #13
 8007c32:	701a      	strb	r2, [r3, #0]
      break;
 8007c34:	e082      	b.n	8007d3c <USBH_HandleEnum+0x3b0>
          USBH_FreePipe(phost, phost->Control.pipe_out);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	795b      	ldrb	r3, [r3, #5]
 8007c3a:	4619      	mov	r1, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f000 feb3 	bl	80089a8 <USBH_FreePipe>
          USBH_FreePipe(phost, phost->Control.pipe_in);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	791b      	ldrb	r3, [r3, #4]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fead 	bl	80089a8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	2200      	movs	r2, #0
 8007c52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	701a      	strb	r2, [r3, #0]
      break;
 8007c5a:	e06f      	b.n	8007d3c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d019      	beq.n	8007c9a <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8007c72:	23ff      	movs	r3, #255	; 0xff
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f949 	bl	8007f0c <USBH_Get_StringDesc>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007c7e:	7bbb      	ldrb	r3, [r7, #14]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d103      	bne.n	8007c8c <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2206      	movs	r2, #6
 8007c88:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007c8a:	e059      	b.n	8007d40 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007c8c:	7bbb      	ldrb	r3, [r7, #14]
 8007c8e:	2b03      	cmp	r3, #3
 8007c90:	d156      	bne.n	8007d40 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2206      	movs	r2, #6
 8007c96:	705a      	strb	r2, [r3, #1]
      break;
 8007c98:	e052      	b.n	8007d40 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2206      	movs	r2, #6
 8007c9e:	705a      	strb	r2, [r3, #1]
      break;
 8007ca0:	e04e      	b.n	8007d40 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d019      	beq.n	8007ce0 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8007cb8:	23ff      	movs	r3, #255	; 0xff
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f926 	bl	8007f0c <USBH_Get_StringDesc>
 8007cc0:	4603      	mov	r3, r0
 8007cc2:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007cc4:	7bbb      	ldrb	r3, [r7, #14]
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d103      	bne.n	8007cd2 <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2207      	movs	r2, #7
 8007cce:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
      }
      break;
 8007cd0:	e038      	b.n	8007d44 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007cd2:	7bbb      	ldrb	r3, [r7, #14]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	d135      	bne.n	8007d44 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2207      	movs	r2, #7
 8007cdc:	705a      	strb	r2, [r3, #1]
      break;
 8007cde:	e031      	b.n	8007d44 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2207      	movs	r2, #7
 8007ce4:	705a      	strb	r2, [r3, #1]
      break;
 8007ce6:	e02d      	b.n	8007d44 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d017      	beq.n	8007d22 <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007cfe:	23ff      	movs	r3, #255	; 0xff
 8007d00:	6878      	ldr	r0, [r7, #4]
 8007d02:	f000 f903 	bl	8007f0c <USBH_Get_StringDesc>
 8007d06:	4603      	mov	r3, r0
 8007d08:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007d0a:	7bbb      	ldrb	r3, [r7, #14]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d102      	bne.n	8007d16 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007d10:	2300      	movs	r3, #0
 8007d12:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8007d14:	e018      	b.n	8007d48 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007d16:	7bbb      	ldrb	r3, [r7, #14]
 8007d18:	2b03      	cmp	r3, #3
 8007d1a:	d115      	bne.n	8007d48 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	73fb      	strb	r3, [r7, #15]
      break;
 8007d20:	e012      	b.n	8007d48 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8007d22:	2300      	movs	r3, #0
 8007d24:	73fb      	strb	r3, [r7, #15]
      break;
 8007d26:	e00f      	b.n	8007d48 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007d28:	bf00      	nop
 8007d2a:	e00e      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d2c:	bf00      	nop
 8007d2e:	e00c      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d30:	bf00      	nop
 8007d32:	e00a      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d34:	bf00      	nop
 8007d36:	e008      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d38:	bf00      	nop
 8007d3a:	e006      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d3c:	bf00      	nop
 8007d3e:	e004      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d40:	bf00      	nop
 8007d42:	e002      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d44:	bf00      	nop
 8007d46:	e000      	b.n	8007d4a <USBH_HandleEnum+0x3be>
      break;
 8007d48:	bf00      	nop
  }
  return Status;
 8007d4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	3710      	adds	r7, #16
 8007d50:	46bd      	mov	sp, r7
 8007d52:	bd80      	pop	{r7, pc}

08007d54 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007d54:	b480      	push	{r7}
 8007d56:	b083      	sub	sp, #12
 8007d58:	af00      	add	r7, sp, #0
 8007d5a:	6078      	str	r0, [r7, #4]
 8007d5c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007d66:	bf00      	nop
 8007d68:	370c      	adds	r7, #12
 8007d6a:	46bd      	mov	sp, r7
 8007d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d70:	4770      	bx	lr

08007d72 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007d72:	b580      	push	{r7, lr}
 8007d74:	b082      	sub	sp, #8
 8007d76:	af00      	add	r7, sp, #0
 8007d78:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007d80:	1c5a      	adds	r2, r3, #1
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 f804 	bl	8007d96 <USBH_HandleSof>
}
 8007d8e:	bf00      	nop
 8007d90:	3708      	adds	r7, #8
 8007d92:	46bd      	mov	sp, r7
 8007d94:	bd80      	pop	{r7, pc}

08007d96 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007d96:	b580      	push	{r7, lr}
 8007d98:	b082      	sub	sp, #8
 8007d9a:	af00      	add	r7, sp, #0
 8007d9c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	781b      	ldrb	r3, [r3, #0]
 8007da2:	b2db      	uxtb	r3, r3
 8007da4:	2b0b      	cmp	r3, #11
 8007da6:	d10a      	bne.n	8007dbe <USBH_HandleSof+0x28>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d005      	beq.n	8007dbe <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007db8:	699b      	ldr	r3, [r3, #24]
 8007dba:	6878      	ldr	r0, [r7, #4]
 8007dbc:	4798      	blx	r3
  }
}
 8007dbe:	bf00      	nop
 8007dc0:	3708      	adds	r7, #8
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}

08007dc6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007dc6:	b480      	push	{r7}
 8007dc8:	b083      	sub	sp, #12
 8007dca:	af00      	add	r7, sp, #0
 8007dcc:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	2201      	movs	r2, #1
 8007dd2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007dd6:	bf00      	nop
}
 8007dd8:	370c      	adds	r7, #12
 8007dda:	46bd      	mov	sp, r7
 8007ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de0:	4770      	bx	lr

08007de2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007de2:	b480      	push	{r7}
 8007de4:	b083      	sub	sp, #12
 8007de6:	af00      	add	r7, sp, #0
 8007de8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2200      	movs	r2, #0
 8007dee:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007df2:	bf00      	nop
}
 8007df4:	370c      	adds	r7, #12
 8007df6:	46bd      	mov	sp, r7
 8007df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfc:	4770      	bx	lr

08007dfe <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007dfe:	b480      	push	{r7}
 8007e00:	b083      	sub	sp, #12
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2201      	movs	r2, #1
 8007e0a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2200      	movs	r2, #0
 8007e12:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	2200      	movs	r2, #0
 8007e1a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e1e:	2300      	movs	r3, #0
}
 8007e20:	4618      	mov	r0, r3
 8007e22:	370c      	adds	r7, #12
 8007e24:	46bd      	mov	sp, r7
 8007e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e2a:	4770      	bx	lr

08007e2c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007e2c:	b580      	push	{r7, lr}
 8007e2e:	b082      	sub	sp, #8
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2201      	movs	r2, #1
 8007e38:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2200      	movs	r2, #0
 8007e48:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f003 fb5c 	bl	800b50a <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	791b      	ldrb	r3, [r3, #4]
 8007e56:	4619      	mov	r1, r3
 8007e58:	6878      	ldr	r0, [r7, #4]
 8007e5a:	f000 fda5 	bl	80089a8 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	795b      	ldrb	r3, [r3, #5]
 8007e62:	4619      	mov	r1, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fd9f 	bl	80089a8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b086      	sub	sp, #24
 8007e78:	af02      	add	r7, sp, #8
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	460b      	mov	r3, r1
 8007e7e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_DEVICE, phost->device.Data,
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007e86:	78fb      	ldrb	r3, [r7, #3]
 8007e88:	b29b      	uxth	r3, r3
 8007e8a:	9300      	str	r3, [sp, #0]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e92:	2100      	movs	r1, #0
 8007e94:	6878      	ldr	r0, [r7, #4]
 8007e96:	f000 f864 	bl	8007f62 <USBH_GetDescriptor>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d10a      	bne.n	8007eba <USBH_Get_DevDesc+0x46>
                                   (uint16_t)length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f203 3026 	addw	r0, r3, #806	; 0x326
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007eb0:	78fa      	ldrb	r2, [r7, #3]
 8007eb2:	b292      	uxth	r2, r2
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	f000 f918 	bl	80080ea <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bd80      	pop	{r7, pc}

08007ec4 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b086      	sub	sp, #24
 8007ec8:	af02      	add	r7, sp, #8
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	460b      	mov	r3, r1
 8007ece:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	331c      	adds	r3, #28
 8007ed4:	60fb      	str	r3, [r7, #12]

  if ((status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8007ed6:	887b      	ldrh	r3, [r7, #2]
 8007ed8:	9300      	str	r3, [sp, #0]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f000 f83d 	bl	8007f62 <USBH_GetDescriptor>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	72fb      	strb	r3, [r7, #11]
 8007eec:	7afb      	ldrb	r3, [r7, #11]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d107      	bne.n	8007f02 <USBH_Get_CfgDesc+0x3e>
                                   USB_DESC_CONFIGURATION, pData, length)) == USBH_OK)
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseCfgDesc(&phost->device.CfgDesc, pData, length);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ef8:	887a      	ldrh	r2, [r7, #2]
 8007efa:	68f9      	ldr	r1, [r7, #12]
 8007efc:	4618      	mov	r0, r3
 8007efe:	f000 f964 	bl	80081ca <USBH_ParseCfgDesc>
  }

  return status;
 8007f02:	7afb      	ldrb	r3, [r7, #11]
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	3710      	adds	r7, #16
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	bd80      	pop	{r7, pc}

08007f0c <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b088      	sub	sp, #32
 8007f10:	af02      	add	r7, sp, #8
 8007f12:	60f8      	str	r0, [r7, #12]
 8007f14:	607a      	str	r2, [r7, #4]
 8007f16:	461a      	mov	r2, r3
 8007f18:	460b      	mov	r3, r1
 8007f1a:	72fb      	strb	r3, [r7, #11]
 8007f1c:	4613      	mov	r3, r2
 8007f1e:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((status = USBH_GetDescriptor(phost,
 8007f20:	7afb      	ldrb	r3, [r7, #11]
 8007f22:	b29b      	uxth	r3, r3
 8007f24:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007f28:	b29a      	uxth	r2, r3
                                   USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                                   USB_DESC_STRING | string_index,
                                   phost->device.Data, length)) == USBH_OK)
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  if ((status = USBH_GetDescriptor(phost,
 8007f30:	893b      	ldrh	r3, [r7, #8]
 8007f32:	9300      	str	r3, [sp, #0]
 8007f34:	460b      	mov	r3, r1
 8007f36:	2100      	movs	r1, #0
 8007f38:	68f8      	ldr	r0, [r7, #12]
 8007f3a:	f000 f812 	bl	8007f62 <USBH_GetDescriptor>
 8007f3e:	4603      	mov	r3, r0
 8007f40:	75fb      	strb	r3, [r7, #23]
 8007f42:	7dfb      	ldrb	r3, [r7, #23]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d107      	bne.n	8007f58 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007f4e:	893a      	ldrh	r2, [r7, #8]
 8007f50:	6879      	ldr	r1, [r7, #4]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f000 fa37 	bl	80083c6 <USBH_ParseStringDesc>
  }

  return status;
 8007f58:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	3718      	adds	r7, #24
 8007f5e:	46bd      	mov	sp, r7
 8007f60:	bd80      	pop	{r7, pc}

08007f62 <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8007f62:	b580      	push	{r7, lr}
 8007f64:	b084      	sub	sp, #16
 8007f66:	af00      	add	r7, sp, #0
 8007f68:	60f8      	str	r0, [r7, #12]
 8007f6a:	607b      	str	r3, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	72fb      	strb	r3, [r7, #11]
 8007f70:	4613      	mov	r3, r2
 8007f72:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	789b      	ldrb	r3, [r3, #2]
 8007f78:	2b01      	cmp	r3, #1
 8007f7a:	d11c      	bne.n	8007fb6 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007f7c:	7afb      	ldrb	r3, [r7, #11]
 8007f7e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007f82:	b2da      	uxtb	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	2206      	movs	r2, #6
 8007f8c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	893a      	ldrh	r2, [r7, #8]
 8007f92:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8007f94:	893b      	ldrh	r3, [r7, #8]
 8007f96:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8007f9a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007f9e:	d104      	bne.n	8007faa <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f240 4209 	movw	r2, #1033	; 0x409
 8007fa6:	829a      	strh	r2, [r3, #20]
 8007fa8:	e002      	b.n	8007fb0 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	2200      	movs	r2, #0
 8007fae:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8b3a      	ldrh	r2, [r7, #24]
 8007fb4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8007fb6:	8b3b      	ldrh	r3, [r7, #24]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 fa50 	bl	8008462 <USBH_CtlReq>
 8007fc2:	4603      	mov	r3, r0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3710      	adds	r7, #16
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	bd80      	pop	{r7, pc}

08007fcc <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8007fcc:	b580      	push	{r7, lr}
 8007fce:	b082      	sub	sp, #8
 8007fd0:	af00      	add	r7, sp, #0
 8007fd2:	6078      	str	r0, [r7, #4]
 8007fd4:	460b      	mov	r3, r1
 8007fd6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	789b      	ldrb	r3, [r3, #2]
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	d10f      	bne.n	8008000 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	2200      	movs	r2, #0
 8007fe4:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	2205      	movs	r2, #5
 8007fea:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8007fec:	78fb      	ldrb	r3, [r7, #3]
 8007fee:	b29a      	uxth	r2, r3
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008000:	2200      	movs	r2, #0
 8008002:	2100      	movs	r1, #0
 8008004:	6878      	ldr	r0, [r7, #4]
 8008006:	f000 fa2c 	bl	8008462 <USBH_CtlReq>
 800800a:	4603      	mov	r3, r0
}
 800800c:	4618      	mov	r0, r3
 800800e:	3708      	adds	r7, #8
 8008010:	46bd      	mov	sp, r7
 8008012:	bd80      	pop	{r7, pc}

08008014 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8008014:	b580      	push	{r7, lr}
 8008016:	b082      	sub	sp, #8
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	789b      	ldrb	r3, [r3, #2]
 8008024:	2b01      	cmp	r3, #1
 8008026:	d10e      	bne.n	8008046 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	2200      	movs	r2, #0
 800802c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	2209      	movs	r2, #9
 8008032:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	887a      	ldrh	r2, [r7, #2]
 8008038:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	2200      	movs	r2, #0
 800803e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	2200      	movs	r2, #0
 8008044:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 8008046:	2200      	movs	r2, #0
 8008048:	2100      	movs	r1, #0
 800804a:	6878      	ldr	r0, [r7, #4]
 800804c:	f000 fa09 	bl	8008462 <USBH_CtlReq>
 8008050:	4603      	mov	r3, r0
}
 8008052:	4618      	mov	r0, r3
 8008054:	3708      	adds	r7, #8
 8008056:	46bd      	mov	sp, r7
 8008058:	bd80      	pop	{r7, pc}

0800805a <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
*/
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b082      	sub	sp, #8
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	789b      	ldrb	r3, [r3, #2]
 800806a:	2b01      	cmp	r3, #1
 800806c:	d10f      	bne.n	800808e <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	2200      	movs	r2, #0
 8008072:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2203      	movs	r2, #3
 8008078:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800807a:	78fb      	ldrb	r3, [r7, #3]
 800807c:	b29a      	uxth	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	2200      	movs	r2, #0
 8008086:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2200      	movs	r2, #0
 800808c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, 0U, 0U);
 800808e:	2200      	movs	r2, #0
 8008090:	2100      	movs	r1, #0
 8008092:	6878      	ldr	r0, [r7, #4]
 8008094:	f000 f9e5 	bl	8008462 <USBH_CtlReq>
 8008098:	4603      	mov	r3, r0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	789b      	ldrb	r3, [r3, #2]
 80080b2:	2b01      	cmp	r3, #1
 80080b4:	d10f      	bne.n	80080d6 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2202      	movs	r2, #2
 80080ba:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2201      	movs	r2, #1
 80080c0:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	2200      	movs	r2, #0
 80080c6:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80080c8:	78fb      	ldrb	r3, [r7, #3]
 80080ca:	b29a      	uxth	r2, r3
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 80080d6:	2200      	movs	r2, #0
 80080d8:	2100      	movs	r1, #0
 80080da:	6878      	ldr	r0, [r7, #4]
 80080dc:	f000 f9c1 	bl	8008462 <USBH_CtlReq>
 80080e0:	4603      	mov	r3, r0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3708      	adds	r7, #8
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}

080080ea <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80080ea:	b480      	push	{r7}
 80080ec:	b085      	sub	sp, #20
 80080ee:	af00      	add	r7, sp, #0
 80080f0:	60f8      	str	r0, [r7, #12]
 80080f2:	60b9      	str	r1, [r7, #8]
 80080f4:	4613      	mov	r3, r2
 80080f6:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	781a      	ldrb	r2, [r3, #0]
 80080fc:	68fb      	ldr	r3, [r7, #12]
 80080fe:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8008100:	68bb      	ldr	r3, [r7, #8]
 8008102:	785a      	ldrb	r2, [r3, #1]
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8008108:	68bb      	ldr	r3, [r7, #8]
 800810a:	3302      	adds	r3, #2
 800810c:	781b      	ldrb	r3, [r3, #0]
 800810e:	b29a      	uxth	r2, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	3303      	adds	r3, #3
 8008114:	781b      	ldrb	r3, [r3, #0]
 8008116:	b29b      	uxth	r3, r3
 8008118:	021b      	lsls	r3, r3, #8
 800811a:	b29b      	uxth	r3, r3
 800811c:	4313      	orrs	r3, r2
 800811e:	b29a      	uxth	r2, r3
 8008120:	68fb      	ldr	r3, [r7, #12]
 8008122:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	791a      	ldrb	r2, [r3, #4]
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800812c:	68bb      	ldr	r3, [r7, #8]
 800812e:	795a      	ldrb	r2, [r3, #5]
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 8008134:	68bb      	ldr	r3, [r7, #8]
 8008136:	799a      	ldrb	r2, [r3, #6]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	79da      	ldrb	r2, [r3, #7]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	71da      	strb	r2, [r3, #7]

  if (length > 8U)
 8008144:	88fb      	ldrh	r3, [r7, #6]
 8008146:	2b08      	cmp	r3, #8
 8008148:	d939      	bls.n	80081be <USBH_ParseDevDesc+0xd4>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800814a:	68bb      	ldr	r3, [r7, #8]
 800814c:	3308      	adds	r3, #8
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	b29a      	uxth	r2, r3
 8008152:	68bb      	ldr	r3, [r7, #8]
 8008154:	3309      	adds	r3, #9
 8008156:	781b      	ldrb	r3, [r3, #0]
 8008158:	b29b      	uxth	r3, r3
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	b29b      	uxth	r3, r3
 800815e:	4313      	orrs	r3, r2
 8008160:	b29a      	uxth	r2, r3
 8008162:	68fb      	ldr	r3, [r7, #12]
 8008164:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	330a      	adds	r3, #10
 800816a:	781b      	ldrb	r3, [r3, #0]
 800816c:	b29a      	uxth	r2, r3
 800816e:	68bb      	ldr	r3, [r7, #8]
 8008170:	330b      	adds	r3, #11
 8008172:	781b      	ldrb	r3, [r3, #0]
 8008174:	b29b      	uxth	r3, r3
 8008176:	021b      	lsls	r3, r3, #8
 8008178:	b29b      	uxth	r3, r3
 800817a:	4313      	orrs	r3, r2
 800817c:	b29a      	uxth	r2, r3
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 8008182:	68bb      	ldr	r3, [r7, #8]
 8008184:	330c      	adds	r3, #12
 8008186:	781b      	ldrb	r3, [r3, #0]
 8008188:	b29a      	uxth	r2, r3
 800818a:	68bb      	ldr	r3, [r7, #8]
 800818c:	330d      	adds	r3, #13
 800818e:	781b      	ldrb	r3, [r3, #0]
 8008190:	b29b      	uxth	r3, r3
 8008192:	021b      	lsls	r3, r3, #8
 8008194:	b29b      	uxth	r3, r3
 8008196:	4313      	orrs	r3, r2
 8008198:	b29a      	uxth	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	7b9a      	ldrb	r2, [r3, #14]
 80081a2:	68fb      	ldr	r3, [r7, #12]
 80081a4:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80081a6:	68bb      	ldr	r3, [r7, #8]
 80081a8:	7bda      	ldrb	r2, [r3, #15]
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	7c1a      	ldrb	r2, [r3, #16]
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	7c5a      	ldrb	r2, [r3, #17]
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	745a      	strb	r2, [r3, #17]
  }
}
 80081be:	bf00      	nop
 80081c0:	3714      	adds	r7, #20
 80081c2:	46bd      	mov	sp, r7
 80081c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c8:	4770      	bx	lr

080081ca <USBH_ParseCfgDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseCfgDesc(USBH_CfgDescTypeDef *cfg_desc, uint8_t *buf,
                              uint16_t length)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b08a      	sub	sp, #40	; 0x28
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	60f8      	str	r0, [r7, #12]
 80081d2:	60b9      	str	r1, [r7, #8]
 80081d4:	4613      	mov	r3, r2
 80081d6:	80fb      	strh	r3, [r7, #6]
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 80081d8:	68bb      	ldr	r3, [r7, #8]
 80081da:	627b      	str	r3, [r7, #36]	; 0x24
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80081dc:	2300      	movs	r3, #0
 80081de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  uint8_t                      ep_ix = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 80081e8:	68bb      	ldr	r3, [r7, #8]
 80081ea:	627b      	str	r3, [r7, #36]	; 0x24

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 80081ec:	68bb      	ldr	r3, [r7, #8]
 80081ee:	781a      	ldrb	r2, [r3, #0]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 80081f4:	68bb      	ldr	r3, [r7, #8]
 80081f6:	785a      	ldrb	r2, [r3, #1]
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = LE16(buf + 2);
 80081fc:	68bb      	ldr	r3, [r7, #8]
 80081fe:	3302      	adds	r3, #2
 8008200:	781b      	ldrb	r3, [r3, #0]
 8008202:	b29a      	uxth	r2, r3
 8008204:	68bb      	ldr	r3, [r7, #8]
 8008206:	3303      	adds	r3, #3
 8008208:	781b      	ldrb	r3, [r3, #0]
 800820a:	b29b      	uxth	r3, r3
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	b29b      	uxth	r3, r3
 8008210:	4313      	orrs	r3, r2
 8008212:	b29a      	uxth	r2, r3
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	791a      	ldrb	r2, [r3, #4]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8008220:	68bb      	ldr	r3, [r7, #8]
 8008222:	795a      	ldrb	r2, [r3, #5]
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	799a      	ldrb	r2, [r3, #6]
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	79da      	ldrb	r2, [r3, #7]
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 8008238:	68bb      	ldr	r3, [r7, #8]
 800823a:	7a1a      	ldrb	r2, [r3, #8]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8008240:	88fb      	ldrh	r3, [r7, #6]
 8008242:	2b09      	cmp	r3, #9
 8008244:	d95f      	bls.n	8008306 <USBH_ParseCfgDesc+0x13c>
  {
    ptr = USB_LEN_CFG_DESC;
 8008246:	2309      	movs	r3, #9
 8008248:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)0;
 800824a:	2300      	movs	r3, #0
 800824c:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800824e:	e051      	b.n	80082f4 <USBH_ParseCfgDesc+0x12a>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8008250:	f107 0316 	add.w	r3, r7, #22
 8008254:	4619      	mov	r1, r3
 8008256:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008258:	f000 f8e8 	bl	800842c <USBH_GetNextDesc>
 800825c:	6278      	str	r0, [r7, #36]	; 0x24
      if (pdesc->bDescriptorType   == USB_DESC_TYPE_INTERFACE)
 800825e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008260:	785b      	ldrb	r3, [r3, #1]
 8008262:	2b04      	cmp	r3, #4
 8008264:	d146      	bne.n	80082f4 <USBH_ParseCfgDesc+0x12a>
      {
        pif = &cfg_desc->Itf_Desc[if_ix];
 8008266:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800826a:	221a      	movs	r2, #26
 800826c:	fb02 f303 	mul.w	r3, r2, r3
 8008270:	3308      	adds	r3, #8
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4413      	add	r3, r2
 8008276:	3302      	adds	r3, #2
 8008278:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800827a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800827c:	69f8      	ldr	r0, [r7, #28]
 800827e:	f000 f846 	bl	800830e <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8008282:	2300      	movs	r3, #0
 8008284:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        pep = (USBH_EpDescTypeDef *)0;
 8008288:	2300      	movs	r3, #0
 800828a:	61bb      	str	r3, [r7, #24]
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800828c:	e022      	b.n	80082d4 <USBH_ParseCfgDesc+0x10a>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800828e:	f107 0316 	add.w	r3, r7, #22
 8008292:	4619      	mov	r1, r3
 8008294:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008296:	f000 f8c9 	bl	800842c <USBH_GetNextDesc>
 800829a:	6278      	str	r0, [r7, #36]	; 0x24
          if (pdesc->bDescriptorType   == USB_DESC_TYPE_ENDPOINT)
 800829c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800829e:	785b      	ldrb	r3, [r3, #1]
 80082a0:	2b05      	cmp	r3, #5
 80082a2:	d117      	bne.n	80082d4 <USBH_ParseCfgDesc+0x10a>
          {
            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80082a4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082a8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082ac:	3201      	adds	r2, #1
 80082ae:	00d2      	lsls	r2, r2, #3
 80082b0:	211a      	movs	r1, #26
 80082b2:	fb01 f303 	mul.w	r3, r1, r3
 80082b6:	4413      	add	r3, r2
 80082b8:	3308      	adds	r3, #8
 80082ba:	68fa      	ldr	r2, [r7, #12]
 80082bc:	4413      	add	r3, r2
 80082be:	3304      	adds	r3, #4
 80082c0:	61bb      	str	r3, [r7, #24]
            USBH_ParseEPDesc(pep, (uint8_t *)(void *)pdesc);
 80082c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80082c4:	69b8      	ldr	r0, [r7, #24]
 80082c6:	f000 f851 	bl	800836c <USBH_ParseEPDesc>
            ep_ix++;
 80082ca:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80082ce:	3301      	adds	r3, #1
 80082d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	791b      	ldrb	r3, [r3, #4]
 80082d8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80082dc:	429a      	cmp	r2, r3
 80082de:	d204      	bcs.n	80082ea <USBH_ParseCfgDesc+0x120>
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	885a      	ldrh	r2, [r3, #2]
 80082e4:	8afb      	ldrh	r3, [r7, #22]
 80082e6:	429a      	cmp	r2, r3
 80082e8:	d8d1      	bhi.n	800828e <USBH_ParseCfgDesc+0xc4>
          }
        }
        if_ix++;
 80082ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082ee:	3301      	adds	r3, #1
 80082f0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80082f4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80082f8:	2b01      	cmp	r3, #1
 80082fa:	d804      	bhi.n	8008306 <USBH_ParseCfgDesc+0x13c>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	885a      	ldrh	r2, [r3, #2]
 8008300:	8afb      	ldrh	r3, [r7, #22]
 8008302:	429a      	cmp	r2, r3
 8008304:	d8a4      	bhi.n	8008250 <USBH_ParseCfgDesc+0x86>
      }
    }
  }
}
 8008306:	bf00      	nop
 8008308:	3728      	adds	r7, #40	; 0x28
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}

0800830e <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800830e:	b480      	push	{r7}
 8008310:	b083      	sub	sp, #12
 8008312:	af00      	add	r7, sp, #0
 8008314:	6078      	str	r0, [r7, #4]
 8008316:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	781a      	ldrb	r2, [r3, #0]
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8008320:	683b      	ldr	r3, [r7, #0]
 8008322:	785a      	ldrb	r2, [r3, #1]
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 8008328:	683b      	ldr	r3, [r7, #0]
 800832a:	789a      	ldrb	r2, [r3, #2]
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	78da      	ldrb	r2, [r3, #3]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	791a      	ldrb	r2, [r3, #4]
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	795a      	ldrb	r2, [r3, #5]
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 8008348:	683b      	ldr	r3, [r7, #0]
 800834a:	799a      	ldrb	r2, [r3, #6]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8008350:	683b      	ldr	r3, [r7, #0]
 8008352:	79da      	ldrb	r2, [r3, #7]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 8008358:	683b      	ldr	r3, [r7, #0]
 800835a:	7a1a      	ldrb	r2, [r3, #8]
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	721a      	strb	r2, [r3, #8]
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval None
  */
static void  USBH_ParseEPDesc(USBH_EpDescTypeDef  *ep_descriptor,
                              uint8_t *buf)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
 8008374:	6039      	str	r1, [r7, #0]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 8008376:	683b      	ldr	r3, [r7, #0]
 8008378:	781a      	ldrb	r2, [r3, #0]
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	785a      	ldrb	r2, [r3, #1]
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 8008386:	683b      	ldr	r3, [r7, #0]
 8008388:	789a      	ldrb	r2, [r3, #2]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800838e:	683b      	ldr	r3, [r7, #0]
 8008390:	78da      	ldrb	r2, [r3, #3]
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 8008396:	683b      	ldr	r3, [r7, #0]
 8008398:	3304      	adds	r3, #4
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	b29a      	uxth	r2, r3
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	3305      	adds	r3, #5
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	b29b      	uxth	r3, r3
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	b29b      	uxth	r3, r3
 80083aa:	4313      	orrs	r3, r2
 80083ac:	b29a      	uxth	r2, r3
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80083b2:	683b      	ldr	r3, [r7, #0]
 80083b4:	799a      	ldrb	r2, [r3, #6]
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	719a      	strb	r2, [r3, #6]
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b087      	sub	sp, #28
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	60f8      	str	r0, [r7, #12]
 80083ce:	60b9      	str	r1, [r7, #8]
 80083d0:	4613      	mov	r3, r2
 80083d2:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	3301      	adds	r3, #1
 80083d8:	781b      	ldrb	r3, [r3, #0]
 80083da:	2b03      	cmp	r3, #3
 80083dc:	d120      	bne.n	8008420 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	781b      	ldrb	r3, [r3, #0]
 80083e2:	1e9a      	subs	r2, r3, #2
 80083e4:	88fb      	ldrh	r3, [r7, #6]
 80083e6:	4293      	cmp	r3, r2
 80083e8:	bf28      	it	cs
 80083ea:	4613      	movcs	r3, r2
 80083ec:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	3302      	adds	r3, #2
 80083f2:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80083f4:	2300      	movs	r3, #0
 80083f6:	82fb      	strh	r3, [r7, #22]
 80083f8:	e00b      	b.n	8008412 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80083fa:	8afb      	ldrh	r3, [r7, #22]
 80083fc:	68fa      	ldr	r2, [r7, #12]
 80083fe:	4413      	add	r3, r2
 8008400:	781a      	ldrb	r2, [r3, #0]
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	701a      	strb	r2, [r3, #0]
      pdest++;
 8008406:	68bb      	ldr	r3, [r7, #8]
 8008408:	3301      	adds	r3, #1
 800840a:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800840c:	8afb      	ldrh	r3, [r7, #22]
 800840e:	3302      	adds	r3, #2
 8008410:	82fb      	strh	r3, [r7, #22]
 8008412:	8afa      	ldrh	r2, [r7, #22]
 8008414:	8abb      	ldrh	r3, [r7, #20]
 8008416:	429a      	cmp	r2, r3
 8008418:	d3ef      	bcc.n	80083fa <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	2200      	movs	r2, #0
 800841e:	701a      	strb	r2, [r3, #0]
  }
}
 8008420:	bf00      	nop
 8008422:	371c      	adds	r7, #28
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	6078      	str	r0, [r7, #4]
 8008434:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	881a      	ldrh	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	b29b      	uxth	r3, r3
 8008440:	4413      	add	r3, r2
 8008442:	b29a      	uxth	r2, r3
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	781b      	ldrb	r3, [r3, #0]
 800844c:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	4413      	add	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008454:	68fb      	ldr	r3, [r7, #12]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8008462:	b580      	push	{r7, lr}
 8008464:	b086      	sub	sp, #24
 8008466:	af00      	add	r7, sp, #0
 8008468:	60f8      	str	r0, [r7, #12]
 800846a:	60b9      	str	r1, [r7, #8]
 800846c:	4613      	mov	r3, r2
 800846e:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8008470:	2301      	movs	r3, #1
 8008472:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	789b      	ldrb	r3, [r3, #2]
 8008478:	2b01      	cmp	r3, #1
 800847a:	d002      	beq.n	8008482 <USBH_CtlReq+0x20>
 800847c:	2b02      	cmp	r3, #2
 800847e:	d00f      	beq.n	80084a0 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8008480:	e027      	b.n	80084d2 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	68ba      	ldr	r2, [r7, #8]
 8008486:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	88fa      	ldrh	r2, [r7, #6]
 800848c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800848e:	68fb      	ldr	r3, [r7, #12]
 8008490:	2201      	movs	r2, #1
 8008492:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	2202      	movs	r2, #2
 8008498:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800849a:	2301      	movs	r3, #1
 800849c:	75fb      	strb	r3, [r7, #23]
      break;
 800849e:	e018      	b.n	80084d2 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80084a0:	68f8      	ldr	r0, [r7, #12]
 80084a2:	f000 f81b 	bl	80084dc <USBH_HandleControl>
 80084a6:	4603      	mov	r3, r0
 80084a8:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80084aa:	7dfb      	ldrb	r3, [r7, #23]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d002      	beq.n	80084b6 <USBH_CtlReq+0x54>
 80084b0:	7dfb      	ldrb	r3, [r7, #23]
 80084b2:	2b03      	cmp	r3, #3
 80084b4:	d106      	bne.n	80084c4 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	761a      	strb	r2, [r3, #24]
      break;
 80084c2:	e005      	b.n	80084d0 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80084c4:	7dfb      	ldrb	r3, [r7, #23]
 80084c6:	2b02      	cmp	r3, #2
 80084c8:	d102      	bne.n	80084d0 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	2201      	movs	r2, #1
 80084ce:	709a      	strb	r2, [r3, #2]
      break;
 80084d0:	bf00      	nop
  }
  return status;
 80084d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3718      	adds	r7, #24
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b086      	sub	sp, #24
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80084e4:	2301      	movs	r3, #1
 80084e6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084e8:	2300      	movs	r3, #0
 80084ea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	7e1b      	ldrb	r3, [r3, #24]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	2b0a      	cmp	r3, #10
 80084f4:	f200 8158 	bhi.w	80087a8 <USBH_HandleControl+0x2cc>
 80084f8:	a201      	add	r2, pc, #4	; (adr r2, 8008500 <USBH_HandleControl+0x24>)
 80084fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084fe:	bf00      	nop
 8008500:	0800852d 	.word	0x0800852d
 8008504:	08008547 	.word	0x08008547
 8008508:	080085b1 	.word	0x080085b1
 800850c:	080085d7 	.word	0x080085d7
 8008510:	0800860f 	.word	0x0800860f
 8008514:	0800863b 	.word	0x0800863b
 8008518:	0800868d 	.word	0x0800868d
 800851c:	080086af 	.word	0x080086af
 8008520:	080086eb 	.word	0x080086eb
 8008524:	08008713 	.word	0x08008713
 8008528:	08008751 	.word	0x08008751
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	f103 0110 	add.w	r1, r3, #16
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	795b      	ldrb	r3, [r3, #5]
 8008536:	461a      	mov	r2, r3
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f945 	bl	80087c8 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	2202      	movs	r2, #2
 8008542:	761a      	strb	r2, [r3, #24]
      break;
 8008544:	e13b      	b.n	80087be <USBH_HandleControl+0x2e2>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	795b      	ldrb	r3, [r3, #5]
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f003 f8c9 	bl	800b6e4 <USBH_LL_GetURBState>
 8008552:	4603      	mov	r3, r0
 8008554:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8008556:	7bbb      	ldrb	r3, [r7, #14]
 8008558:	2b01      	cmp	r3, #1
 800855a:	d11e      	bne.n	800859a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	7c1b      	ldrb	r3, [r3, #16]
 8008560:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008564:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	8adb      	ldrh	r3, [r3, #22]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d00a      	beq.n	8008584 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800856e:	7b7b      	ldrb	r3, [r7, #13]
 8008570:	2b80      	cmp	r3, #128	; 0x80
 8008572:	d103      	bne.n	800857c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2203      	movs	r2, #3
 8008578:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 800857a:	e117      	b.n	80087ac <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_DATA_OUT;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2205      	movs	r2, #5
 8008580:	761a      	strb	r2, [r3, #24]
      break;
 8008582:	e113      	b.n	80087ac <USBH_HandleControl+0x2d0>
          if (direction == USB_D2H)
 8008584:	7b7b      	ldrb	r3, [r7, #13]
 8008586:	2b80      	cmp	r3, #128	; 0x80
 8008588:	d103      	bne.n	8008592 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2209      	movs	r2, #9
 800858e:	761a      	strb	r2, [r3, #24]
      break;
 8008590:	e10c      	b.n	80087ac <USBH_HandleControl+0x2d0>
            phost->Control.state = CTRL_STATUS_IN;
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	2207      	movs	r2, #7
 8008596:	761a      	strb	r2, [r3, #24]
      break;
 8008598:	e108      	b.n	80087ac <USBH_HandleControl+0x2d0>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800859a:	7bbb      	ldrb	r3, [r7, #14]
 800859c:	2b04      	cmp	r3, #4
 800859e:	d003      	beq.n	80085a8 <USBH_HandleControl+0xcc>
 80085a0:	7bbb      	ldrb	r3, [r7, #14]
 80085a2:	2b02      	cmp	r3, #2
 80085a4:	f040 8102 	bne.w	80087ac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	220b      	movs	r2, #11
 80085ac:	761a      	strb	r2, [r3, #24]
      break;
 80085ae:	e0fd      	b.n	80087ac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80085b6:	b29a      	uxth	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	6899      	ldr	r1, [r3, #8]
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	899a      	ldrh	r2, [r3, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	791b      	ldrb	r3, [r3, #4]
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f000 f93c 	bl	8008846 <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2204      	movs	r2, #4
 80085d2:	761a      	strb	r2, [r3, #24]
      break;
 80085d4:	e0f3      	b.n	80087be <USBH_HandleControl+0x2e2>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	791b      	ldrb	r3, [r3, #4]
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f003 f881 	bl	800b6e4 <USBH_LL_GetURBState>
 80085e2:	4603      	mov	r3, r0
 80085e4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 80085e6:	7bbb      	ldrb	r3, [r7, #14]
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d102      	bne.n	80085f2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2209      	movs	r2, #9
 80085f0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 80085f2:	7bbb      	ldrb	r3, [r7, #14]
 80085f4:	2b05      	cmp	r3, #5
 80085f6:	d102      	bne.n	80085fe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 80085f8:	2303      	movs	r3, #3
 80085fa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80085fc:	e0d8      	b.n	80087b0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80085fe:	7bbb      	ldrb	r3, [r7, #14]
 8008600:	2b04      	cmp	r3, #4
 8008602:	f040 80d5 	bne.w	80087b0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	220b      	movs	r2, #11
 800860a:	761a      	strb	r2, [r3, #24]
      break;
 800860c:	e0d0      	b.n	80087b0 <USBH_HandleControl+0x2d4>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6899      	ldr	r1, [r3, #8]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	899a      	ldrh	r2, [r3, #12]
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	7958      	ldrb	r0, [r3, #5]
 800861a:	2301      	movs	r3, #1
 800861c:	9300      	str	r3, [sp, #0]
 800861e:	4603      	mov	r3, r0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 f8eb 	bl	80087fc <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800862c:	b29a      	uxth	r2, r3
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2206      	movs	r2, #6
 8008636:	761a      	strb	r2, [r3, #24]
      break;
 8008638:	e0c1      	b.n	80087be <USBH_HandleControl+0x2e2>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	795b      	ldrb	r3, [r3, #5]
 800863e:	4619      	mov	r1, r3
 8008640:	6878      	ldr	r0, [r7, #4]
 8008642:	f003 f84f 	bl	800b6e4 <USBH_LL_GetURBState>
 8008646:	4603      	mov	r3, r0
 8008648:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800864a:	7bbb      	ldrb	r3, [r7, #14]
 800864c:	2b01      	cmp	r3, #1
 800864e:	d103      	bne.n	8008658 <USBH_HandleControl+0x17c>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2207      	movs	r2, #7
 8008654:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008656:	e0ad      	b.n	80087b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_STALL)
 8008658:	7bbb      	ldrb	r3, [r7, #14]
 800865a:	2b05      	cmp	r3, #5
 800865c:	d105      	bne.n	800866a <USBH_HandleControl+0x18e>
        phost->Control.state = CTRL_STALLED;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	220c      	movs	r2, #12
 8008662:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8008664:	2303      	movs	r3, #3
 8008666:	73fb      	strb	r3, [r7, #15]
      break;
 8008668:	e0a4      	b.n	80087b4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_NOTREADY)
 800866a:	7bbb      	ldrb	r3, [r7, #14]
 800866c:	2b02      	cmp	r3, #2
 800866e:	d103      	bne.n	8008678 <USBH_HandleControl+0x19c>
        phost->Control.state = CTRL_DATA_OUT;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2205      	movs	r2, #5
 8008674:	761a      	strb	r2, [r3, #24]
      break;
 8008676:	e09d      	b.n	80087b4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_ERROR)
 8008678:	7bbb      	ldrb	r3, [r7, #14]
 800867a:	2b04      	cmp	r3, #4
 800867c:	f040 809a 	bne.w	80087b4 <USBH_HandleControl+0x2d8>
          phost->Control.state = CTRL_ERROR;
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	220b      	movs	r2, #11
 8008684:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008686:	2302      	movs	r3, #2
 8008688:	73fb      	strb	r3, [r7, #15]
      break;
 800868a:	e093      	b.n	80087b4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	791b      	ldrb	r3, [r3, #4]
 8008690:	2200      	movs	r2, #0
 8008692:	2100      	movs	r1, #0
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 f8d6 	bl	8008846 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80086a0:	b29a      	uxth	r2, r3
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2208      	movs	r2, #8
 80086aa:	761a      	strb	r2, [r3, #24]

      break;
 80086ac:	e087      	b.n	80087be <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	791b      	ldrb	r3, [r3, #4]
 80086b2:	4619      	mov	r1, r3
 80086b4:	6878      	ldr	r0, [r7, #4]
 80086b6:	f003 f815 	bl	800b6e4 <USBH_LL_GetURBState>
 80086ba:	4603      	mov	r3, r0
 80086bc:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80086be:	7bbb      	ldrb	r3, [r7, #14]
 80086c0:	2b01      	cmp	r3, #1
 80086c2:	d105      	bne.n	80086d0 <USBH_HandleControl+0x1f4>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	220d      	movs	r2, #13
 80086c8:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 80086ca:	2300      	movs	r3, #0
 80086cc:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80086ce:	e073      	b.n	80087b8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_ERROR)
 80086d0:	7bbb      	ldrb	r3, [r7, #14]
 80086d2:	2b04      	cmp	r3, #4
 80086d4:	d103      	bne.n	80086de <USBH_HandleControl+0x202>
        phost->Control.state = CTRL_ERROR;
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	220b      	movs	r2, #11
 80086da:	761a      	strb	r2, [r3, #24]
      break;
 80086dc:	e06c      	b.n	80087b8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_STALL)
 80086de:	7bbb      	ldrb	r3, [r7, #14]
 80086e0:	2b05      	cmp	r3, #5
 80086e2:	d169      	bne.n	80087b8 <USBH_HandleControl+0x2dc>
          status = USBH_NOT_SUPPORTED;
 80086e4:	2303      	movs	r3, #3
 80086e6:	73fb      	strb	r3, [r7, #15]
      break;
 80086e8:	e066      	b.n	80087b8 <USBH_HandleControl+0x2dc>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	795a      	ldrb	r2, [r3, #5]
 80086ee:	2301      	movs	r3, #1
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	4613      	mov	r3, r2
 80086f4:	2200      	movs	r2, #0
 80086f6:	2100      	movs	r1, #0
 80086f8:	6878      	ldr	r0, [r7, #4]
 80086fa:	f000 f87f 	bl	80087fc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008704:	b29a      	uxth	r2, r3
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	220a      	movs	r2, #10
 800870e:	761a      	strb	r2, [r3, #24]
      break;
 8008710:	e055      	b.n	80087be <USBH_HandleControl+0x2e2>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	795b      	ldrb	r3, [r3, #5]
 8008716:	4619      	mov	r1, r3
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f002 ffe3 	bl	800b6e4 <USBH_LL_GetURBState>
 800871e:	4603      	mov	r3, r0
 8008720:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008722:	7bbb      	ldrb	r3, [r7, #14]
 8008724:	2b01      	cmp	r3, #1
 8008726:	d105      	bne.n	8008734 <USBH_HandleControl+0x258>
      {
        status = USBH_OK;
 8008728:	2300      	movs	r3, #0
 800872a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	220d      	movs	r2, #13
 8008730:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008732:	e043      	b.n	80087bc <USBH_HandleControl+0x2e0>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008734:	7bbb      	ldrb	r3, [r7, #14]
 8008736:	2b02      	cmp	r3, #2
 8008738:	d103      	bne.n	8008742 <USBH_HandleControl+0x266>
        phost->Control.state = CTRL_STATUS_OUT;
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2209      	movs	r2, #9
 800873e:	761a      	strb	r2, [r3, #24]
      break;
 8008740:	e03c      	b.n	80087bc <USBH_HandleControl+0x2e0>
        if (URB_Status == USBH_URB_ERROR)
 8008742:	7bbb      	ldrb	r3, [r7, #14]
 8008744:	2b04      	cmp	r3, #4
 8008746:	d139      	bne.n	80087bc <USBH_HandleControl+0x2e0>
          phost->Control.state = CTRL_ERROR;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	220b      	movs	r2, #11
 800874c:	761a      	strb	r2, [r3, #24]
      break;
 800874e:	e035      	b.n	80087bc <USBH_HandleControl+0x2e0>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	7e5b      	ldrb	r3, [r3, #25]
 8008754:	3301      	adds	r3, #1
 8008756:	b2da      	uxtb	r2, r3
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	765a      	strb	r2, [r3, #25]
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	7e5b      	ldrb	r3, [r3, #25]
 8008760:	2b02      	cmp	r3, #2
 8008762:	d806      	bhi.n	8008772 <USBH_HandleControl+0x296>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2201      	movs	r2, #1
 8008768:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	2201      	movs	r2, #1
 800876e:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8008770:	e025      	b.n	80087be <USBH_HandleControl+0x2e2>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008778:	2106      	movs	r1, #6
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2200      	movs	r2, #0
 8008782:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	795b      	ldrb	r3, [r3, #5]
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 f90c 	bl	80089a8 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	791b      	ldrb	r3, [r3, #4]
 8008794:	4619      	mov	r1, r3
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	f000 f906 	bl	80089a8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	2200      	movs	r2, #0
 80087a0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80087a2:	2302      	movs	r3, #2
 80087a4:	73fb      	strb	r3, [r7, #15]
      break;
 80087a6:	e00a      	b.n	80087be <USBH_HandleControl+0x2e2>

    default:
      break;
 80087a8:	bf00      	nop
 80087aa:	e008      	b.n	80087be <USBH_HandleControl+0x2e2>
      break;
 80087ac:	bf00      	nop
 80087ae:	e006      	b.n	80087be <USBH_HandleControl+0x2e2>
      break;
 80087b0:	bf00      	nop
 80087b2:	e004      	b.n	80087be <USBH_HandleControl+0x2e2>
      break;
 80087b4:	bf00      	nop
 80087b6:	e002      	b.n	80087be <USBH_HandleControl+0x2e2>
      break;
 80087b8:	bf00      	nop
 80087ba:	e000      	b.n	80087be <USBH_HandleControl+0x2e2>
      break;
 80087bc:	bf00      	nop
  }

  return status;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	bd80      	pop	{r7, pc}

080087c8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80087c8:	b580      	push	{r7, lr}
 80087ca:	b088      	sub	sp, #32
 80087cc:	af04      	add	r7, sp, #16
 80087ce:	60f8      	str	r0, [r7, #12]
 80087d0:	60b9      	str	r1, [r7, #8]
 80087d2:	4613      	mov	r3, r2
 80087d4:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80087d6:	79f9      	ldrb	r1, [r7, #7]
 80087d8:	2300      	movs	r3, #0
 80087da:	9303      	str	r3, [sp, #12]
 80087dc:	2308      	movs	r3, #8
 80087de:	9302      	str	r3, [sp, #8]
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	9301      	str	r3, [sp, #4]
 80087e4:	2300      	movs	r3, #0
 80087e6:	9300      	str	r3, [sp, #0]
 80087e8:	2300      	movs	r3, #0
 80087ea:	2200      	movs	r2, #0
 80087ec:	68f8      	ldr	r0, [r7, #12]
 80087ee:	f002 ff48 	bl	800b682 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 80087f2:	2300      	movs	r3, #0
}
 80087f4:	4618      	mov	r0, r3
 80087f6:	3710      	adds	r7, #16
 80087f8:	46bd      	mov	sp, r7
 80087fa:	bd80      	pop	{r7, pc}

080087fc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 80087fc:	b580      	push	{r7, lr}
 80087fe:	b088      	sub	sp, #32
 8008800:	af04      	add	r7, sp, #16
 8008802:	60f8      	str	r0, [r7, #12]
 8008804:	60b9      	str	r1, [r7, #8]
 8008806:	4611      	mov	r1, r2
 8008808:	461a      	mov	r2, r3
 800880a:	460b      	mov	r3, r1
 800880c:	80fb      	strh	r3, [r7, #6]
 800880e:	4613      	mov	r3, r2
 8008810:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008818:	2b00      	cmp	r3, #0
 800881a:	d001      	beq.n	8008820 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800881c:	2300      	movs	r3, #0
 800881e:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008820:	7979      	ldrb	r1, [r7, #5]
 8008822:	7e3b      	ldrb	r3, [r7, #24]
 8008824:	9303      	str	r3, [sp, #12]
 8008826:	88fb      	ldrh	r3, [r7, #6]
 8008828:	9302      	str	r3, [sp, #8]
 800882a:	68bb      	ldr	r3, [r7, #8]
 800882c:	9301      	str	r3, [sp, #4]
 800882e:	2301      	movs	r3, #1
 8008830:	9300      	str	r3, [sp, #0]
 8008832:	2300      	movs	r3, #0
 8008834:	2200      	movs	r2, #0
 8008836:	68f8      	ldr	r0, [r7, #12]
 8008838:	f002 ff23 	bl	800b682 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3710      	adds	r7, #16
 8008842:	46bd      	mov	sp, r7
 8008844:	bd80      	pop	{r7, pc}

08008846 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008846:	b580      	push	{r7, lr}
 8008848:	b088      	sub	sp, #32
 800884a:	af04      	add	r7, sp, #16
 800884c:	60f8      	str	r0, [r7, #12]
 800884e:	60b9      	str	r1, [r7, #8]
 8008850:	4611      	mov	r1, r2
 8008852:	461a      	mov	r2, r3
 8008854:	460b      	mov	r3, r1
 8008856:	80fb      	strh	r3, [r7, #6]
 8008858:	4613      	mov	r3, r2
 800885a:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800885c:	7979      	ldrb	r1, [r7, #5]
 800885e:	2300      	movs	r3, #0
 8008860:	9303      	str	r3, [sp, #12]
 8008862:	88fb      	ldrh	r3, [r7, #6]
 8008864:	9302      	str	r3, [sp, #8]
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	9301      	str	r3, [sp, #4]
 800886a:	2301      	movs	r3, #1
 800886c:	9300      	str	r3, [sp, #0]
 800886e:	2300      	movs	r3, #0
 8008870:	2201      	movs	r2, #1
 8008872:	68f8      	ldr	r0, [r7, #12]
 8008874:	f002 ff05 	bl	800b682 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008878:	2300      	movs	r3, #0

}
 800887a:	4618      	mov	r0, r3
 800887c:	3710      	adds	r7, #16
 800887e:	46bd      	mov	sp, r7
 8008880:	bd80      	pop	{r7, pc}

08008882 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8008882:	b580      	push	{r7, lr}
 8008884:	b088      	sub	sp, #32
 8008886:	af04      	add	r7, sp, #16
 8008888:	60f8      	str	r0, [r7, #12]
 800888a:	60b9      	str	r1, [r7, #8]
 800888c:	4611      	mov	r1, r2
 800888e:	461a      	mov	r2, r3
 8008890:	460b      	mov	r3, r1
 8008892:	80fb      	strh	r3, [r7, #6]
 8008894:	4613      	mov	r3, r2
 8008896:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d001      	beq.n	80088a6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80088a2:	2300      	movs	r3, #0
 80088a4:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088a6:	7979      	ldrb	r1, [r7, #5]
 80088a8:	7e3b      	ldrb	r3, [r7, #24]
 80088aa:	9303      	str	r3, [sp, #12]
 80088ac:	88fb      	ldrh	r3, [r7, #6]
 80088ae:	9302      	str	r3, [sp, #8]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	2301      	movs	r3, #1
 80088b6:	9300      	str	r3, [sp, #0]
 80088b8:	2302      	movs	r3, #2
 80088ba:	2200      	movs	r2, #0
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f002 fee0 	bl	800b682 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80088c2:	2300      	movs	r3, #0
}
 80088c4:	4618      	mov	r0, r3
 80088c6:	3710      	adds	r7, #16
 80088c8:	46bd      	mov	sp, r7
 80088ca:	bd80      	pop	{r7, pc}

080088cc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b088      	sub	sp, #32
 80088d0:	af04      	add	r7, sp, #16
 80088d2:	60f8      	str	r0, [r7, #12]
 80088d4:	60b9      	str	r1, [r7, #8]
 80088d6:	4611      	mov	r1, r2
 80088d8:	461a      	mov	r2, r3
 80088da:	460b      	mov	r3, r1
 80088dc:	80fb      	strh	r3, [r7, #6]
 80088de:	4613      	mov	r3, r2
 80088e0:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80088e2:	7979      	ldrb	r1, [r7, #5]
 80088e4:	2300      	movs	r3, #0
 80088e6:	9303      	str	r3, [sp, #12]
 80088e8:	88fb      	ldrh	r3, [r7, #6]
 80088ea:	9302      	str	r3, [sp, #8]
 80088ec:	68bb      	ldr	r3, [r7, #8]
 80088ee:	9301      	str	r3, [sp, #4]
 80088f0:	2301      	movs	r3, #1
 80088f2:	9300      	str	r3, [sp, #0]
 80088f4:	2302      	movs	r3, #2
 80088f6:	2201      	movs	r2, #1
 80088f8:	68f8      	ldr	r0, [r7, #12]
 80088fa:	f002 fec2 	bl	800b682 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3710      	adds	r7, #16
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}

08008908 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008908:	b580      	push	{r7, lr}
 800890a:	b086      	sub	sp, #24
 800890c:	af04      	add	r7, sp, #16
 800890e:	6078      	str	r0, [r7, #4]
 8008910:	4608      	mov	r0, r1
 8008912:	4611      	mov	r1, r2
 8008914:	461a      	mov	r2, r3
 8008916:	4603      	mov	r3, r0
 8008918:	70fb      	strb	r3, [r7, #3]
 800891a:	460b      	mov	r3, r1
 800891c:	70bb      	strb	r3, [r7, #2]
 800891e:	4613      	mov	r3, r2
 8008920:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008922:	7878      	ldrb	r0, [r7, #1]
 8008924:	78ba      	ldrb	r2, [r7, #2]
 8008926:	78f9      	ldrb	r1, [r7, #3]
 8008928:	8b3b      	ldrh	r3, [r7, #24]
 800892a:	9302      	str	r3, [sp, #8]
 800892c:	7d3b      	ldrb	r3, [r7, #20]
 800892e:	9301      	str	r3, [sp, #4]
 8008930:	7c3b      	ldrb	r3, [r7, #16]
 8008932:	9300      	str	r3, [sp, #0]
 8008934:	4603      	mov	r3, r0
 8008936:	6878      	ldr	r0, [r7, #4]
 8008938:	f002 fe55 	bl	800b5e6 <USBH_LL_OpenPipe>

  return USBH_OK;
 800893c:	2300      	movs	r3, #0
}
 800893e:	4618      	mov	r0, r3
 8008940:	3708      	adds	r7, #8
 8008942:	46bd      	mov	sp, r7
 8008944:	bd80      	pop	{r7, pc}

08008946 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008946:	b580      	push	{r7, lr}
 8008948:	b082      	sub	sp, #8
 800894a:	af00      	add	r7, sp, #0
 800894c:	6078      	str	r0, [r7, #4]
 800894e:	460b      	mov	r3, r1
 8008950:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 8008952:	78fb      	ldrb	r3, [r7, #3]
 8008954:	4619      	mov	r1, r3
 8008956:	6878      	ldr	r0, [r7, #4]
 8008958:	f002 fe74 	bl	800b644 <USBH_LL_ClosePipe>

  return USBH_OK;
 800895c:	2300      	movs	r3, #0
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008966:	b580      	push	{r7, lr}
 8008968:	b084      	sub	sp, #16
 800896a:	af00      	add	r7, sp, #0
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	460b      	mov	r3, r1
 8008970:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8008972:	6878      	ldr	r0, [r7, #4]
 8008974:	f000 f836 	bl	80089e4 <USBH_GetFreePipe>
 8008978:	4603      	mov	r3, r0
 800897a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800897c:	89fb      	ldrh	r3, [r7, #14]
 800897e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8008982:	4293      	cmp	r3, r2
 8008984:	d00a      	beq.n	800899c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 8008986:	78fa      	ldrb	r2, [r7, #3]
 8008988:	89fb      	ldrh	r3, [r7, #14]
 800898a:	f003 030f 	and.w	r3, r3, #15
 800898e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008992:	6879      	ldr	r1, [r7, #4]
 8008994:	33e0      	adds	r3, #224	; 0xe0
 8008996:	009b      	lsls	r3, r3, #2
 8008998:	440b      	add	r3, r1
 800899a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800899c:	89fb      	ldrh	r3, [r7, #14]
 800899e:	b2db      	uxtb	r3, r3
}
 80089a0:	4618      	mov	r0, r3
 80089a2:	3710      	adds	r7, #16
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
 80089b0:	460b      	mov	r3, r1
 80089b2:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 80089b4:	78fb      	ldrb	r3, [r7, #3]
 80089b6:	2b0a      	cmp	r3, #10
 80089b8:	d80d      	bhi.n	80089d6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80089ba:	78fb      	ldrb	r3, [r7, #3]
 80089bc:	687a      	ldr	r2, [r7, #4]
 80089be:	33e0      	adds	r3, #224	; 0xe0
 80089c0:	009b      	lsls	r3, r3, #2
 80089c2:	4413      	add	r3, r2
 80089c4:	685a      	ldr	r2, [r3, #4]
 80089c6:	78fb      	ldrb	r3, [r7, #3]
 80089c8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80089cc:	6879      	ldr	r1, [r7, #4]
 80089ce:	33e0      	adds	r3, #224	; 0xe0
 80089d0:	009b      	lsls	r3, r3, #2
 80089d2:	440b      	add	r3, r1
 80089d4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 80089d6:	2300      	movs	r3, #0
}
 80089d8:	4618      	mov	r0, r3
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 80089e4:	b480      	push	{r7}
 80089e6:	b085      	sub	sp, #20
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 80089ec:	2300      	movs	r3, #0
 80089ee:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 80089f0:	2300      	movs	r3, #0
 80089f2:	73fb      	strb	r3, [r7, #15]
 80089f4:	e00f      	b.n	8008a16 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 80089f6:	7bfb      	ldrb	r3, [r7, #15]
 80089f8:	687a      	ldr	r2, [r7, #4]
 80089fa:	33e0      	adds	r3, #224	; 0xe0
 80089fc:	009b      	lsls	r3, r3, #2
 80089fe:	4413      	add	r3, r2
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d102      	bne.n	8008a10 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008a0a:	7bfb      	ldrb	r3, [r7, #15]
 8008a0c:	b29b      	uxth	r3, r3
 8008a0e:	e007      	b.n	8008a20 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008a10:	7bfb      	ldrb	r3, [r7, #15]
 8008a12:	3301      	adds	r3, #1
 8008a14:	73fb      	strb	r3, [r7, #15]
 8008a16:	7bfb      	ldrb	r3, [r7, #15]
 8008a18:	2b0a      	cmp	r3, #10
 8008a1a:	d9ec      	bls.n	80089f6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008a1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008a20:	4618      	mov	r0, r3
 8008a22:	3714      	adds	r7, #20
 8008a24:	46bd      	mov	sp, r7
 8008a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a2a:	4770      	bx	lr

08008a2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b084      	sub	sp, #16
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	4603      	mov	r3, r0
 8008a34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8008a36:	79fb      	ldrb	r3, [r7, #7]
 8008a38:	4a08      	ldr	r2, [pc, #32]	; (8008a5c <disk_status+0x30>)
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4413      	add	r3, r2
 8008a3e:	685b      	ldr	r3, [r3, #4]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	79fa      	ldrb	r2, [r7, #7]
 8008a44:	4905      	ldr	r1, [pc, #20]	; (8008a5c <disk_status+0x30>)
 8008a46:	440a      	add	r2, r1
 8008a48:	7a12      	ldrb	r2, [r2, #8]
 8008a4a:	4610      	mov	r0, r2
 8008a4c:	4798      	blx	r3
 8008a4e:	4603      	mov	r3, r0
 8008a50:	73fb      	strb	r3, [r7, #15]
  return stat;
 8008a52:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}
 8008a5c:	200000dc 	.word	0x200000dc

08008a60 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8008a6e:	79fb      	ldrb	r3, [r7, #7]
 8008a70:	4a0d      	ldr	r2, [pc, #52]	; (8008aa8 <disk_initialize+0x48>)
 8008a72:	5cd3      	ldrb	r3, [r2, r3]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d111      	bne.n	8008a9c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 8008a78:	79fb      	ldrb	r3, [r7, #7]
 8008a7a:	4a0b      	ldr	r2, [pc, #44]	; (8008aa8 <disk_initialize+0x48>)
 8008a7c:	2101      	movs	r1, #1
 8008a7e:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8008a80:	79fb      	ldrb	r3, [r7, #7]
 8008a82:	4a09      	ldr	r2, [pc, #36]	; (8008aa8 <disk_initialize+0x48>)
 8008a84:	009b      	lsls	r3, r3, #2
 8008a86:	4413      	add	r3, r2
 8008a88:	685b      	ldr	r3, [r3, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	79fa      	ldrb	r2, [r7, #7]
 8008a8e:	4906      	ldr	r1, [pc, #24]	; (8008aa8 <disk_initialize+0x48>)
 8008a90:	440a      	add	r2, r1
 8008a92:	7a12      	ldrb	r2, [r2, #8]
 8008a94:	4610      	mov	r0, r2
 8008a96:	4798      	blx	r3
 8008a98:	4603      	mov	r3, r0
 8008a9a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a9e:	4618      	mov	r0, r3
 8008aa0:	3710      	adds	r7, #16
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	bd80      	pop	{r7, pc}
 8008aa6:	bf00      	nop
 8008aa8:	200000dc 	.word	0x200000dc

08008aac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8008aac:	b590      	push	{r4, r7, lr}
 8008aae:	b087      	sub	sp, #28
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	60b9      	str	r1, [r7, #8]
 8008ab4:	607a      	str	r2, [r7, #4]
 8008ab6:	603b      	str	r3, [r7, #0]
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	4a0a      	ldr	r2, [pc, #40]	; (8008ae8 <disk_read+0x3c>)
 8008ac0:	009b      	lsls	r3, r3, #2
 8008ac2:	4413      	add	r3, r2
 8008ac4:	685b      	ldr	r3, [r3, #4]
 8008ac6:	689c      	ldr	r4, [r3, #8]
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
 8008aca:	4a07      	ldr	r2, [pc, #28]	; (8008ae8 <disk_read+0x3c>)
 8008acc:	4413      	add	r3, r2
 8008ace:	7a18      	ldrb	r0, [r3, #8]
 8008ad0:	683b      	ldr	r3, [r7, #0]
 8008ad2:	687a      	ldr	r2, [r7, #4]
 8008ad4:	68b9      	ldr	r1, [r7, #8]
 8008ad6:	47a0      	blx	r4
 8008ad8:	4603      	mov	r3, r0
 8008ada:	75fb      	strb	r3, [r7, #23]
  return res;
 8008adc:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ade:	4618      	mov	r0, r3
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd90      	pop	{r4, r7, pc}
 8008ae6:	bf00      	nop
 8008ae8:	200000dc 	.word	0x200000dc

08008aec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8008aec:	b590      	push	{r4, r7, lr}
 8008aee:	b087      	sub	sp, #28
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
 8008af6:	603b      	str	r3, [r7, #0]
 8008af8:	4603      	mov	r3, r0
 8008afa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8008afc:	7bfb      	ldrb	r3, [r7, #15]
 8008afe:	4a0a      	ldr	r2, [pc, #40]	; (8008b28 <disk_write+0x3c>)
 8008b00:	009b      	lsls	r3, r3, #2
 8008b02:	4413      	add	r3, r2
 8008b04:	685b      	ldr	r3, [r3, #4]
 8008b06:	68dc      	ldr	r4, [r3, #12]
 8008b08:	7bfb      	ldrb	r3, [r7, #15]
 8008b0a:	4a07      	ldr	r2, [pc, #28]	; (8008b28 <disk_write+0x3c>)
 8008b0c:	4413      	add	r3, r2
 8008b0e:	7a18      	ldrb	r0, [r3, #8]
 8008b10:	683b      	ldr	r3, [r7, #0]
 8008b12:	687a      	ldr	r2, [r7, #4]
 8008b14:	68b9      	ldr	r1, [r7, #8]
 8008b16:	47a0      	blx	r4
 8008b18:	4603      	mov	r3, r0
 8008b1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8008b1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b1e:	4618      	mov	r0, r3
 8008b20:	371c      	adds	r7, #28
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd90      	pop	{r4, r7, pc}
 8008b26:	bf00      	nop
 8008b28:	200000dc 	.word	0x200000dc

08008b2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8008b2c:	b580      	push	{r7, lr}
 8008b2e:	b084      	sub	sp, #16
 8008b30:	af00      	add	r7, sp, #0
 8008b32:	4603      	mov	r3, r0
 8008b34:	603a      	str	r2, [r7, #0]
 8008b36:	71fb      	strb	r3, [r7, #7]
 8008b38:	460b      	mov	r3, r1
 8008b3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	4a09      	ldr	r2, [pc, #36]	; (8008b64 <disk_ioctl+0x38>)
 8008b40:	009b      	lsls	r3, r3, #2
 8008b42:	4413      	add	r3, r2
 8008b44:	685b      	ldr	r3, [r3, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	79fa      	ldrb	r2, [r7, #7]
 8008b4a:	4906      	ldr	r1, [pc, #24]	; (8008b64 <disk_ioctl+0x38>)
 8008b4c:	440a      	add	r2, r1
 8008b4e:	7a10      	ldrb	r0, [r2, #8]
 8008b50:	79b9      	ldrb	r1, [r7, #6]
 8008b52:	683a      	ldr	r2, [r7, #0]
 8008b54:	4798      	blx	r3
 8008b56:	4603      	mov	r3, r0
 8008b58:	73fb      	strb	r3, [r7, #15]
  return res;
 8008b5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}
 8008b64:	200000dc 	.word	0x200000dc

08008b68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8008b68:	b480      	push	{r7}
 8008b6a:	b085      	sub	sp, #20
 8008b6c:	af00      	add	r7, sp, #0
 8008b6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	3301      	adds	r3, #1
 8008b74:	781b      	ldrb	r3, [r3, #0]
 8008b76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8008b78:	89fb      	ldrh	r3, [r7, #14]
 8008b7a:	021b      	lsls	r3, r3, #8
 8008b7c:	b21a      	sxth	r2, r3
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	b21b      	sxth	r3, r3
 8008b84:	4313      	orrs	r3, r2
 8008b86:	b21b      	sxth	r3, r3
 8008b88:	81fb      	strh	r3, [r7, #14]
	return rv;
 8008b8a:	89fb      	ldrh	r3, [r7, #14]
}
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	3714      	adds	r7, #20
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b085      	sub	sp, #20
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	3303      	adds	r3, #3
 8008ba4:	781b      	ldrb	r3, [r3, #0]
 8008ba6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	021b      	lsls	r3, r3, #8
 8008bac:	687a      	ldr	r2, [r7, #4]
 8008bae:	3202      	adds	r2, #2
 8008bb0:	7812      	ldrb	r2, [r2, #0]
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8008bb6:	68fb      	ldr	r3, [r7, #12]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	687a      	ldr	r2, [r7, #4]
 8008bbc:	3201      	adds	r2, #1
 8008bbe:	7812      	ldrb	r2, [r2, #0]
 8008bc0:	4313      	orrs	r3, r2
 8008bc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	021b      	lsls	r3, r3, #8
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	7812      	ldrb	r2, [r2, #0]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	60fb      	str	r3, [r7, #12]
	return rv;
 8008bd0:	68fb      	ldr	r3, [r7, #12]
}
 8008bd2:	4618      	mov	r0, r3
 8008bd4:	3714      	adds	r7, #20
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bdc:	4770      	bx	lr

08008bde <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8008bde:	b480      	push	{r7}
 8008be0:	b083      	sub	sp, #12
 8008be2:	af00      	add	r7, sp, #0
 8008be4:	6078      	str	r0, [r7, #4]
 8008be6:	460b      	mov	r3, r1
 8008be8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	1c5a      	adds	r2, r3, #1
 8008bee:	607a      	str	r2, [r7, #4]
 8008bf0:	887a      	ldrh	r2, [r7, #2]
 8008bf2:	b2d2      	uxtb	r2, r2
 8008bf4:	701a      	strb	r2, [r3, #0]
 8008bf6:	887b      	ldrh	r3, [r7, #2]
 8008bf8:	0a1b      	lsrs	r3, r3, #8
 8008bfa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	1c5a      	adds	r2, r3, #1
 8008c00:	607a      	str	r2, [r7, #4]
 8008c02:	887a      	ldrh	r2, [r7, #2]
 8008c04:	b2d2      	uxtb	r2, r2
 8008c06:	701a      	strb	r2, [r3, #0]
}
 8008c08:	bf00      	nop
 8008c0a:	370c      	adds	r7, #12
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8008c14:	b480      	push	{r7}
 8008c16:	b083      	sub	sp, #12
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	1c5a      	adds	r2, r3, #1
 8008c22:	607a      	str	r2, [r7, #4]
 8008c24:	683a      	ldr	r2, [r7, #0]
 8008c26:	b2d2      	uxtb	r2, r2
 8008c28:	701a      	strb	r2, [r3, #0]
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	0a1b      	lsrs	r3, r3, #8
 8008c2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	1c5a      	adds	r2, r3, #1
 8008c34:	607a      	str	r2, [r7, #4]
 8008c36:	683a      	ldr	r2, [r7, #0]
 8008c38:	b2d2      	uxtb	r2, r2
 8008c3a:	701a      	strb	r2, [r3, #0]
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	0a1b      	lsrs	r3, r3, #8
 8008c40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	1c5a      	adds	r2, r3, #1
 8008c46:	607a      	str	r2, [r7, #4]
 8008c48:	683a      	ldr	r2, [r7, #0]
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]
 8008c4e:	683b      	ldr	r3, [r7, #0]
 8008c50:	0a1b      	lsrs	r3, r3, #8
 8008c52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	1c5a      	adds	r2, r3, #1
 8008c58:	607a      	str	r2, [r7, #4]
 8008c5a:	683a      	ldr	r2, [r7, #0]
 8008c5c:	b2d2      	uxtb	r2, r2
 8008c5e:	701a      	strb	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	370c      	adds	r7, #12
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8008c6c:	b480      	push	{r7}
 8008c6e:	b087      	sub	sp, #28
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	60f8      	str	r0, [r7, #12]
 8008c74:	60b9      	str	r1, [r7, #8]
 8008c76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d00d      	beq.n	8008ca2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8008c86:	693a      	ldr	r2, [r7, #16]
 8008c88:	1c53      	adds	r3, r2, #1
 8008c8a:	613b      	str	r3, [r7, #16]
 8008c8c:	697b      	ldr	r3, [r7, #20]
 8008c8e:	1c59      	adds	r1, r3, #1
 8008c90:	6179      	str	r1, [r7, #20]
 8008c92:	7812      	ldrb	r2, [r2, #0]
 8008c94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	3b01      	subs	r3, #1
 8008c9a:	607b      	str	r3, [r7, #4]
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d1f1      	bne.n	8008c86 <mem_cpy+0x1a>
	}
}
 8008ca2:	bf00      	nop
 8008ca4:	371c      	adds	r7, #28
 8008ca6:	46bd      	mov	sp, r7
 8008ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cac:	4770      	bx	lr

08008cae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8008cae:	b480      	push	{r7}
 8008cb0:	b087      	sub	sp, #28
 8008cb2:	af00      	add	r7, sp, #0
 8008cb4:	60f8      	str	r0, [r7, #12]
 8008cb6:	60b9      	str	r1, [r7, #8]
 8008cb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8008cbe:	697b      	ldr	r3, [r7, #20]
 8008cc0:	1c5a      	adds	r2, r3, #1
 8008cc2:	617a      	str	r2, [r7, #20]
 8008cc4:	68ba      	ldr	r2, [r7, #8]
 8008cc6:	b2d2      	uxtb	r2, r2
 8008cc8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	3b01      	subs	r3, #1
 8008cce:	607b      	str	r3, [r7, #4]
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d1f3      	bne.n	8008cbe <mem_set+0x10>
}
 8008cd6:	bf00      	nop
 8008cd8:	371c      	adds	r7, #28
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr

08008ce2 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8008ce2:	b480      	push	{r7}
 8008ce4:	b089      	sub	sp, #36	; 0x24
 8008ce6:	af00      	add	r7, sp, #0
 8008ce8:	60f8      	str	r0, [r7, #12]
 8008cea:	60b9      	str	r1, [r7, #8]
 8008cec:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	61fb      	str	r3, [r7, #28]
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	61fa      	str	r2, [r7, #28]
 8008d00:	781b      	ldrb	r3, [r3, #0]
 8008d02:	4619      	mov	r1, r3
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	1c5a      	adds	r2, r3, #1
 8008d08:	61ba      	str	r2, [r7, #24]
 8008d0a:	781b      	ldrb	r3, [r3, #0]
 8008d0c:	1acb      	subs	r3, r1, r3
 8008d0e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	3b01      	subs	r3, #1
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	d002      	beq.n	8008d22 <mem_cmp+0x40>
 8008d1c:	697b      	ldr	r3, [r7, #20]
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d0eb      	beq.n	8008cfa <mem_cmp+0x18>

	return r;
 8008d22:	697b      	ldr	r3, [r7, #20]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3724      	adds	r7, #36	; 0x24
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8008d3a:	e002      	b.n	8008d42 <chk_chr+0x12>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	3301      	adds	r3, #1
 8008d40:	607b      	str	r3, [r7, #4]
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	781b      	ldrb	r3, [r3, #0]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d005      	beq.n	8008d56 <chk_chr+0x26>
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	781b      	ldrb	r3, [r3, #0]
 8008d4e:	461a      	mov	r2, r3
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d1f2      	bne.n	8008d3c <chk_chr+0xc>
	return *str;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	781b      	ldrb	r3, [r3, #0]
}
 8008d5a:	4618      	mov	r0, r3
 8008d5c:	370c      	adds	r7, #12
 8008d5e:	46bd      	mov	sp, r7
 8008d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d64:	4770      	bx	lr
	...

08008d68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008d68:	b480      	push	{r7}
 8008d6a:	b085      	sub	sp, #20
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008d72:	2300      	movs	r3, #0
 8008d74:	60bb      	str	r3, [r7, #8]
 8008d76:	68bb      	ldr	r3, [r7, #8]
 8008d78:	60fb      	str	r3, [r7, #12]
 8008d7a:	e029      	b.n	8008dd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8008d7c:	4a27      	ldr	r2, [pc, #156]	; (8008e1c <chk_lock+0xb4>)
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	011b      	lsls	r3, r3, #4
 8008d82:	4413      	add	r3, r2
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d01d      	beq.n	8008dc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008d8a:	4a24      	ldr	r2, [pc, #144]	; (8008e1c <chk_lock+0xb4>)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	011b      	lsls	r3, r3, #4
 8008d90:	4413      	add	r3, r2
 8008d92:	681a      	ldr	r2, [r3, #0]
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	d116      	bne.n	8008dca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8008d9c:	4a1f      	ldr	r2, [pc, #124]	; (8008e1c <chk_lock+0xb4>)
 8008d9e:	68fb      	ldr	r3, [r7, #12]
 8008da0:	011b      	lsls	r3, r3, #4
 8008da2:	4413      	add	r3, r2
 8008da4:	3304      	adds	r3, #4
 8008da6:	681a      	ldr	r2, [r3, #0]
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8008dac:	429a      	cmp	r2, r3
 8008dae:	d10c      	bne.n	8008dca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008db0:	4a1a      	ldr	r2, [pc, #104]	; (8008e1c <chk_lock+0xb4>)
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	011b      	lsls	r3, r3, #4
 8008db6:	4413      	add	r3, r2
 8008db8:	3308      	adds	r3, #8
 8008dba:	681a      	ldr	r2, [r3, #0]
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8008dc0:	429a      	cmp	r2, r3
 8008dc2:	d102      	bne.n	8008dca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8008dc4:	e007      	b.n	8008dd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b01      	cmp	r3, #1
 8008dd4:	d9d2      	bls.n	8008d7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2b02      	cmp	r3, #2
 8008dda:	d109      	bne.n	8008df0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d102      	bne.n	8008de8 <chk_lock+0x80>
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d101      	bne.n	8008dec <chk_lock+0x84>
 8008de8:	2300      	movs	r3, #0
 8008dea:	e010      	b.n	8008e0e <chk_lock+0xa6>
 8008dec:	2312      	movs	r3, #18
 8008dee:	e00e      	b.n	8008e0e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8008df0:	683b      	ldr	r3, [r7, #0]
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d108      	bne.n	8008e08 <chk_lock+0xa0>
 8008df6:	4a09      	ldr	r2, [pc, #36]	; (8008e1c <chk_lock+0xb4>)
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	011b      	lsls	r3, r3, #4
 8008dfc:	4413      	add	r3, r2
 8008dfe:	330c      	adds	r3, #12
 8008e00:	881b      	ldrh	r3, [r3, #0]
 8008e02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e06:	d101      	bne.n	8008e0c <chk_lock+0xa4>
 8008e08:	2310      	movs	r3, #16
 8008e0a:	e000      	b.n	8008e0e <chk_lock+0xa6>
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3714      	adds	r7, #20
 8008e12:	46bd      	mov	sp, r7
 8008e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e18:	4770      	bx	lr
 8008e1a:	bf00      	nop
 8008e1c:	200000bc 	.word	0x200000bc

08008e20 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8008e20:	b480      	push	{r7}
 8008e22:	b083      	sub	sp, #12
 8008e24:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008e26:	2300      	movs	r3, #0
 8008e28:	607b      	str	r3, [r7, #4]
 8008e2a:	e002      	b.n	8008e32 <enq_lock+0x12>
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	3301      	adds	r3, #1
 8008e30:	607b      	str	r3, [r7, #4]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2b01      	cmp	r3, #1
 8008e36:	d806      	bhi.n	8008e46 <enq_lock+0x26>
 8008e38:	4a09      	ldr	r2, [pc, #36]	; (8008e60 <enq_lock+0x40>)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	011b      	lsls	r3, r3, #4
 8008e3e:	4413      	add	r3, r2
 8008e40:	681b      	ldr	r3, [r3, #0]
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d1f2      	bne.n	8008e2c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	bf14      	ite	ne
 8008e4c:	2301      	movne	r3, #1
 8008e4e:	2300      	moveq	r3, #0
 8008e50:	b2db      	uxtb	r3, r3
}
 8008e52:	4618      	mov	r0, r3
 8008e54:	370c      	adds	r7, #12
 8008e56:	46bd      	mov	sp, r7
 8008e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5c:	4770      	bx	lr
 8008e5e:	bf00      	nop
 8008e60:	200000bc 	.word	0x200000bc

08008e64 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8008e64:	b480      	push	{r7}
 8008e66:	b085      	sub	sp, #20
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
 8008e6c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008e6e:	2300      	movs	r3, #0
 8008e70:	60fb      	str	r3, [r7, #12]
 8008e72:	e01f      	b.n	8008eb4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8008e74:	4a41      	ldr	r2, [pc, #260]	; (8008f7c <inc_lock+0x118>)
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	011b      	lsls	r3, r3, #4
 8008e7a:	4413      	add	r3, r2
 8008e7c:	681a      	ldr	r2, [r3, #0]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d113      	bne.n	8008eae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8008e86:	4a3d      	ldr	r2, [pc, #244]	; (8008f7c <inc_lock+0x118>)
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	011b      	lsls	r3, r3, #4
 8008e8c:	4413      	add	r3, r2
 8008e8e:	3304      	adds	r3, #4
 8008e90:	681a      	ldr	r2, [r3, #0]
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d109      	bne.n	8008eae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8008e9a:	4a38      	ldr	r2, [pc, #224]	; (8008f7c <inc_lock+0x118>)
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	011b      	lsls	r3, r3, #4
 8008ea0:	4413      	add	r3, r2
 8008ea2:	3308      	adds	r3, #8
 8008ea4:	681a      	ldr	r2, [r3, #0]
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	d006      	beq.n	8008ebc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	60fb      	str	r3, [r7, #12]
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	2b01      	cmp	r3, #1
 8008eb8:	d9dc      	bls.n	8008e74 <inc_lock+0x10>
 8008eba:	e000      	b.n	8008ebe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8008ebc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2b02      	cmp	r3, #2
 8008ec2:	d132      	bne.n	8008f2a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8008ec4:	2300      	movs	r3, #0
 8008ec6:	60fb      	str	r3, [r7, #12]
 8008ec8:	e002      	b.n	8008ed0 <inc_lock+0x6c>
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	3301      	adds	r3, #1
 8008ece:	60fb      	str	r3, [r7, #12]
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	2b01      	cmp	r3, #1
 8008ed4:	d806      	bhi.n	8008ee4 <inc_lock+0x80>
 8008ed6:	4a29      	ldr	r2, [pc, #164]	; (8008f7c <inc_lock+0x118>)
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	011b      	lsls	r3, r3, #4
 8008edc:	4413      	add	r3, r2
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1f2      	bne.n	8008eca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8008ee4:	68fb      	ldr	r3, [r7, #12]
 8008ee6:	2b02      	cmp	r3, #2
 8008ee8:	d101      	bne.n	8008eee <inc_lock+0x8a>
 8008eea:	2300      	movs	r3, #0
 8008eec:	e040      	b.n	8008f70 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	681a      	ldr	r2, [r3, #0]
 8008ef2:	4922      	ldr	r1, [pc, #136]	; (8008f7c <inc_lock+0x118>)
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	440b      	add	r3, r1
 8008efa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	689a      	ldr	r2, [r3, #8]
 8008f00:	491e      	ldr	r1, [pc, #120]	; (8008f7c <inc_lock+0x118>)
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	011b      	lsls	r3, r3, #4
 8008f06:	440b      	add	r3, r1
 8008f08:	3304      	adds	r3, #4
 8008f0a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	695a      	ldr	r2, [r3, #20]
 8008f10:	491a      	ldr	r1, [pc, #104]	; (8008f7c <inc_lock+0x118>)
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	011b      	lsls	r3, r3, #4
 8008f16:	440b      	add	r3, r1
 8008f18:	3308      	adds	r3, #8
 8008f1a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8008f1c:	4a17      	ldr	r2, [pc, #92]	; (8008f7c <inc_lock+0x118>)
 8008f1e:	68fb      	ldr	r3, [r7, #12]
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	4413      	add	r3, r2
 8008f24:	330c      	adds	r3, #12
 8008f26:	2200      	movs	r2, #0
 8008f28:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8008f2a:	683b      	ldr	r3, [r7, #0]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d009      	beq.n	8008f44 <inc_lock+0xe0>
 8008f30:	4a12      	ldr	r2, [pc, #72]	; (8008f7c <inc_lock+0x118>)
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	011b      	lsls	r3, r3, #4
 8008f36:	4413      	add	r3, r2
 8008f38:	330c      	adds	r3, #12
 8008f3a:	881b      	ldrh	r3, [r3, #0]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d001      	beq.n	8008f44 <inc_lock+0xe0>
 8008f40:	2300      	movs	r3, #0
 8008f42:	e015      	b.n	8008f70 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8008f44:	683b      	ldr	r3, [r7, #0]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d108      	bne.n	8008f5c <inc_lock+0xf8>
 8008f4a:	4a0c      	ldr	r2, [pc, #48]	; (8008f7c <inc_lock+0x118>)
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	011b      	lsls	r3, r3, #4
 8008f50:	4413      	add	r3, r2
 8008f52:	330c      	adds	r3, #12
 8008f54:	881b      	ldrh	r3, [r3, #0]
 8008f56:	3301      	adds	r3, #1
 8008f58:	b29a      	uxth	r2, r3
 8008f5a:	e001      	b.n	8008f60 <inc_lock+0xfc>
 8008f5c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008f60:	4906      	ldr	r1, [pc, #24]	; (8008f7c <inc_lock+0x118>)
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	011b      	lsls	r3, r3, #4
 8008f66:	440b      	add	r3, r1
 8008f68:	330c      	adds	r3, #12
 8008f6a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	3301      	adds	r3, #1
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	3714      	adds	r7, #20
 8008f74:	46bd      	mov	sp, r7
 8008f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7a:	4770      	bx	lr
 8008f7c:	200000bc 	.word	0x200000bc

08008f80 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8008f80:	b480      	push	{r7}
 8008f82:	b085      	sub	sp, #20
 8008f84:	af00      	add	r7, sp, #0
 8008f86:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	3b01      	subs	r3, #1
 8008f8c:	607b      	str	r3, [r7, #4]
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2b01      	cmp	r3, #1
 8008f92:	d825      	bhi.n	8008fe0 <dec_lock+0x60>
		n = Files[i].ctr;
 8008f94:	4a17      	ldr	r2, [pc, #92]	; (8008ff4 <dec_lock+0x74>)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	011b      	lsls	r3, r3, #4
 8008f9a:	4413      	add	r3, r2
 8008f9c:	330c      	adds	r3, #12
 8008f9e:	881b      	ldrh	r3, [r3, #0]
 8008fa0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8008fa2:	89fb      	ldrh	r3, [r7, #14]
 8008fa4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fa8:	d101      	bne.n	8008fae <dec_lock+0x2e>
 8008faa:	2300      	movs	r3, #0
 8008fac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8008fae:	89fb      	ldrh	r3, [r7, #14]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d002      	beq.n	8008fba <dec_lock+0x3a>
 8008fb4:	89fb      	ldrh	r3, [r7, #14]
 8008fb6:	3b01      	subs	r3, #1
 8008fb8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8008fba:	4a0e      	ldr	r2, [pc, #56]	; (8008ff4 <dec_lock+0x74>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	011b      	lsls	r3, r3, #4
 8008fc0:	4413      	add	r3, r2
 8008fc2:	330c      	adds	r3, #12
 8008fc4:	89fa      	ldrh	r2, [r7, #14]
 8008fc6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8008fc8:	89fb      	ldrh	r3, [r7, #14]
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d105      	bne.n	8008fda <dec_lock+0x5a>
 8008fce:	4a09      	ldr	r2, [pc, #36]	; (8008ff4 <dec_lock+0x74>)
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	011b      	lsls	r3, r3, #4
 8008fd4:	4413      	add	r3, r2
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8008fda:	2300      	movs	r3, #0
 8008fdc:	737b      	strb	r3, [r7, #13]
 8008fde:	e001      	b.n	8008fe4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8008fe0:	2302      	movs	r3, #2
 8008fe2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8008fe4:	7b7b      	ldrb	r3, [r7, #13]
}
 8008fe6:	4618      	mov	r0, r3
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff0:	4770      	bx	lr
 8008ff2:	bf00      	nop
 8008ff4:	200000bc 	.word	0x200000bc

08008ff8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8008ff8:	b480      	push	{r7}
 8008ffa:	b085      	sub	sp, #20
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8009000:	2300      	movs	r3, #0
 8009002:	60fb      	str	r3, [r7, #12]
 8009004:	e010      	b.n	8009028 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8009006:	4a0d      	ldr	r2, [pc, #52]	; (800903c <clear_lock+0x44>)
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	011b      	lsls	r3, r3, #4
 800900c:	4413      	add	r3, r2
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	687a      	ldr	r2, [r7, #4]
 8009012:	429a      	cmp	r2, r3
 8009014:	d105      	bne.n	8009022 <clear_lock+0x2a>
 8009016:	4a09      	ldr	r2, [pc, #36]	; (800903c <clear_lock+0x44>)
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	011b      	lsls	r3, r3, #4
 800901c:	4413      	add	r3, r2
 800901e:	2200      	movs	r2, #0
 8009020:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	3301      	adds	r3, #1
 8009026:	60fb      	str	r3, [r7, #12]
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d9eb      	bls.n	8009006 <clear_lock+0xe>
	}
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	200000bc 	.word	0x200000bc

08009040 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b086      	sub	sp, #24
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8009048:	2300      	movs	r3, #0
 800904a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	78db      	ldrb	r3, [r3, #3]
 8009050:	2b00      	cmp	r3, #0
 8009052:	d034      	beq.n	80090be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009058:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	7858      	ldrb	r0, [r3, #1]
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009064:	2301      	movs	r3, #1
 8009066:	697a      	ldr	r2, [r7, #20]
 8009068:	f7ff fd40 	bl	8008aec <disk_write>
 800906c:	4603      	mov	r3, r0
 800906e:	2b00      	cmp	r3, #0
 8009070:	d002      	beq.n	8009078 <sync_window+0x38>
			res = FR_DISK_ERR;
 8009072:	2301      	movs	r3, #1
 8009074:	73fb      	strb	r3, [r7, #15]
 8009076:	e022      	b.n	80090be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	1ad2      	subs	r2, r2, r3
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	69db      	ldr	r3, [r3, #28]
 800908a:	429a      	cmp	r2, r3
 800908c:	d217      	bcs.n	80090be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	789b      	ldrb	r3, [r3, #2]
 8009092:	613b      	str	r3, [r7, #16]
 8009094:	e010      	b.n	80090b8 <sync_window+0x78>
					wsect += fs->fsize;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	69db      	ldr	r3, [r3, #28]
 800909a:	697a      	ldr	r2, [r7, #20]
 800909c:	4413      	add	r3, r2
 800909e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	7858      	ldrb	r0, [r3, #1]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090aa:	2301      	movs	r3, #1
 80090ac:	697a      	ldr	r2, [r7, #20]
 80090ae:	f7ff fd1d 	bl	8008aec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	3b01      	subs	r3, #1
 80090b6:	613b      	str	r3, [r7, #16]
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	2b01      	cmp	r3, #1
 80090bc:	d8eb      	bhi.n	8009096 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80090be:	7bfb      	ldrb	r3, [r7, #15]
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3718      	adds	r7, #24
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
 80090d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80090d2:	2300      	movs	r3, #0
 80090d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090da:	683a      	ldr	r2, [r7, #0]
 80090dc:	429a      	cmp	r2, r3
 80090de:	d01b      	beq.n	8009118 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f7ff ffad 	bl	8009040 <sync_window>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d113      	bne.n	8009118 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	7858      	ldrb	r0, [r3, #1]
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80090fa:	2301      	movs	r3, #1
 80090fc:	683a      	ldr	r2, [r7, #0]
 80090fe:	f7ff fcd5 	bl	8008aac <disk_read>
 8009102:	4603      	mov	r3, r0
 8009104:	2b00      	cmp	r3, #0
 8009106:	d004      	beq.n	8009112 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8009108:	f04f 33ff 	mov.w	r3, #4294967295
 800910c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	683a      	ldr	r2, [r7, #0]
 8009116:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8009118:	7bfb      	ldrb	r3, [r7, #15]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3710      	adds	r7, #16
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f7ff ff87 	bl	8009040 <sync_window>
 8009132:	4603      	mov	r3, r0
 8009134:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8009136:	7bfb      	ldrb	r3, [r7, #15]
 8009138:	2b00      	cmp	r3, #0
 800913a:	d159      	bne.n	80091f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	781b      	ldrb	r3, [r3, #0]
 8009140:	2b03      	cmp	r3, #3
 8009142:	d149      	bne.n	80091d8 <sync_fs+0xb4>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	791b      	ldrb	r3, [r3, #4]
 8009148:	2b01      	cmp	r3, #1
 800914a:	d145      	bne.n	80091d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	899b      	ldrh	r3, [r3, #12]
 8009156:	461a      	mov	r2, r3
 8009158:	2100      	movs	r1, #0
 800915a:	f7ff fda8 	bl	8008cae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	3334      	adds	r3, #52	; 0x34
 8009162:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8009166:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800916a:	4618      	mov	r0, r3
 800916c:	f7ff fd37 	bl	8008bde <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	3334      	adds	r3, #52	; 0x34
 8009174:	4921      	ldr	r1, [pc, #132]	; (80091fc <sync_fs+0xd8>)
 8009176:	4618      	mov	r0, r3
 8009178:	f7ff fd4c 	bl	8008c14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	3334      	adds	r3, #52	; 0x34
 8009180:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8009184:	491e      	ldr	r1, [pc, #120]	; (8009200 <sync_fs+0xdc>)
 8009186:	4618      	mov	r0, r3
 8009188:	f7ff fd44 	bl	8008c14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	3334      	adds	r3, #52	; 0x34
 8009190:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	695b      	ldr	r3, [r3, #20]
 8009198:	4619      	mov	r1, r3
 800919a:	4610      	mov	r0, r2
 800919c:	f7ff fd3a 	bl	8008c14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	3334      	adds	r3, #52	; 0x34
 80091a4:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	691b      	ldr	r3, [r3, #16]
 80091ac:	4619      	mov	r1, r3
 80091ae:	4610      	mov	r0, r2
 80091b0:	f7ff fd30 	bl	8008c14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	6a1b      	ldr	r3, [r3, #32]
 80091b8:	1c5a      	adds	r2, r3, #1
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	7858      	ldrb	r0, [r3, #1]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80091cc:	2301      	movs	r3, #1
 80091ce:	f7ff fc8d 	bl	8008aec <disk_write>
			fs->fsi_flag = 0;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	785b      	ldrb	r3, [r3, #1]
 80091dc:	2200      	movs	r2, #0
 80091de:	2100      	movs	r1, #0
 80091e0:	4618      	mov	r0, r3
 80091e2:	f7ff fca3 	bl	8008b2c <disk_ioctl>
 80091e6:	4603      	mov	r3, r0
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d001      	beq.n	80091f0 <sync_fs+0xcc>
 80091ec:	2301      	movs	r3, #1
 80091ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80091f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f2:	4618      	mov	r0, r3
 80091f4:	3710      	adds	r7, #16
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bd80      	pop	{r7, pc}
 80091fa:	bf00      	nop
 80091fc:	41615252 	.word	0x41615252
 8009200:	61417272 	.word	0x61417272

08009204 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
 800920c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	3b02      	subs	r3, #2
 8009212:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	699b      	ldr	r3, [r3, #24]
 8009218:	3b02      	subs	r3, #2
 800921a:	683a      	ldr	r2, [r7, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d301      	bcc.n	8009224 <clust2sect+0x20>
 8009220:	2300      	movs	r3, #0
 8009222:	e008      	b.n	8009236 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	895b      	ldrh	r3, [r3, #10]
 8009228:	461a      	mov	r2, r3
 800922a:	683b      	ldr	r3, [r7, #0]
 800922c:	fb03 f202 	mul.w	r2, r3, r2
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009234:	4413      	add	r3, r2
}
 8009236:	4618      	mov	r0, r3
 8009238:	370c      	adds	r7, #12
 800923a:	46bd      	mov	sp, r7
 800923c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009240:	4770      	bx	lr

08009242 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8009242:	b580      	push	{r7, lr}
 8009244:	b086      	sub	sp, #24
 8009246:	af00      	add	r7, sp, #0
 8009248:	6078      	str	r0, [r7, #4]
 800924a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d904      	bls.n	8009262 <get_fat+0x20>
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	699b      	ldr	r3, [r3, #24]
 800925c:	683a      	ldr	r2, [r7, #0]
 800925e:	429a      	cmp	r2, r3
 8009260:	d302      	bcc.n	8009268 <get_fat+0x26>
		val = 1;	/* Internal error */
 8009262:	2301      	movs	r3, #1
 8009264:	617b      	str	r3, [r7, #20]
 8009266:	e0b7      	b.n	80093d8 <get_fat+0x196>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8009268:	f04f 33ff 	mov.w	r3, #4294967295
 800926c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	2b02      	cmp	r3, #2
 8009274:	d05a      	beq.n	800932c <get_fat+0xea>
 8009276:	2b03      	cmp	r3, #3
 8009278:	d07d      	beq.n	8009376 <get_fat+0x134>
 800927a:	2b01      	cmp	r3, #1
 800927c:	f040 80a2 	bne.w	80093c4 <get_fat+0x182>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8009280:	683b      	ldr	r3, [r7, #0]
 8009282:	60fb      	str	r3, [r7, #12]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	085b      	lsrs	r3, r3, #1
 8009288:	68fa      	ldr	r2, [r7, #12]
 800928a:	4413      	add	r3, r2
 800928c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009292:	693b      	ldr	r3, [r7, #16]
 8009294:	899b      	ldrh	r3, [r3, #12]
 8009296:	4619      	mov	r1, r3
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	fbb3 f3f1 	udiv	r3, r3, r1
 800929e:	4413      	add	r3, r2
 80092a0:	4619      	mov	r1, r3
 80092a2:	6938      	ldr	r0, [r7, #16]
 80092a4:	f7ff ff10 	bl	80090c8 <move_window>
 80092a8:	4603      	mov	r3, r0
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	f040 808d 	bne.w	80093ca <get_fat+0x188>
			wc = fs->win[bc++ % SS(fs)];
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	1c5a      	adds	r2, r3, #1
 80092b4:	60fa      	str	r2, [r7, #12]
 80092b6:	693a      	ldr	r2, [r7, #16]
 80092b8:	8992      	ldrh	r2, [r2, #12]
 80092ba:	fbb3 f1f2 	udiv	r1, r3, r2
 80092be:	fb02 f201 	mul.w	r2, r2, r1
 80092c2:	1a9b      	subs	r3, r3, r2
 80092c4:	693a      	ldr	r2, [r7, #16]
 80092c6:	4413      	add	r3, r2
 80092c8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80092cc:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80092d2:	693b      	ldr	r3, [r7, #16]
 80092d4:	899b      	ldrh	r3, [r3, #12]
 80092d6:	4619      	mov	r1, r3
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	fbb3 f3f1 	udiv	r3, r3, r1
 80092de:	4413      	add	r3, r2
 80092e0:	4619      	mov	r1, r3
 80092e2:	6938      	ldr	r0, [r7, #16]
 80092e4:	f7ff fef0 	bl	80090c8 <move_window>
 80092e8:	4603      	mov	r3, r0
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d16f      	bne.n	80093ce <get_fat+0x18c>
			wc |= fs->win[bc % SS(fs)] << 8;
 80092ee:	693b      	ldr	r3, [r7, #16]
 80092f0:	899b      	ldrh	r3, [r3, #12]
 80092f2:	461a      	mov	r2, r3
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	fbb3 f1f2 	udiv	r1, r3, r2
 80092fa:	fb02 f201 	mul.w	r2, r2, r1
 80092fe:	1a9b      	subs	r3, r3, r2
 8009300:	693a      	ldr	r2, [r7, #16]
 8009302:	4413      	add	r3, r2
 8009304:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8009308:	021b      	lsls	r3, r3, #8
 800930a:	461a      	mov	r2, r3
 800930c:	68bb      	ldr	r3, [r7, #8]
 800930e:	4313      	orrs	r3, r2
 8009310:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8009312:	683b      	ldr	r3, [r7, #0]
 8009314:	f003 0301 	and.w	r3, r3, #1
 8009318:	2b00      	cmp	r3, #0
 800931a:	d002      	beq.n	8009322 <get_fat+0xe0>
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	091b      	lsrs	r3, r3, #4
 8009320:	e002      	b.n	8009328 <get_fat+0xe6>
 8009322:	68bb      	ldr	r3, [r7, #8]
 8009324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009328:	617b      	str	r3, [r7, #20]
			break;
 800932a:	e055      	b.n	80093d8 <get_fat+0x196>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800932c:	693b      	ldr	r3, [r7, #16]
 800932e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009330:	693b      	ldr	r3, [r7, #16]
 8009332:	899b      	ldrh	r3, [r3, #12]
 8009334:	085b      	lsrs	r3, r3, #1
 8009336:	b29b      	uxth	r3, r3
 8009338:	4619      	mov	r1, r3
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	fbb3 f3f1 	udiv	r3, r3, r1
 8009340:	4413      	add	r3, r2
 8009342:	4619      	mov	r1, r3
 8009344:	6938      	ldr	r0, [r7, #16]
 8009346:	f7ff febf 	bl	80090c8 <move_window>
 800934a:	4603      	mov	r3, r0
 800934c:	2b00      	cmp	r3, #0
 800934e:	d140      	bne.n	80093d2 <get_fat+0x190>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8009350:	693b      	ldr	r3, [r7, #16]
 8009352:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	005b      	lsls	r3, r3, #1
 800935a:	693a      	ldr	r2, [r7, #16]
 800935c:	8992      	ldrh	r2, [r2, #12]
 800935e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009362:	fb02 f200 	mul.w	r2, r2, r0
 8009366:	1a9b      	subs	r3, r3, r2
 8009368:	440b      	add	r3, r1
 800936a:	4618      	mov	r0, r3
 800936c:	f7ff fbfc 	bl	8008b68 <ld_word>
 8009370:	4603      	mov	r3, r0
 8009372:	617b      	str	r3, [r7, #20]
			break;
 8009374:	e030      	b.n	80093d8 <get_fat+0x196>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800937a:	693b      	ldr	r3, [r7, #16]
 800937c:	899b      	ldrh	r3, [r3, #12]
 800937e:	089b      	lsrs	r3, r3, #2
 8009380:	b29b      	uxth	r3, r3
 8009382:	4619      	mov	r1, r3
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	fbb3 f3f1 	udiv	r3, r3, r1
 800938a:	4413      	add	r3, r2
 800938c:	4619      	mov	r1, r3
 800938e:	6938      	ldr	r0, [r7, #16]
 8009390:	f7ff fe9a 	bl	80090c8 <move_window>
 8009394:	4603      	mov	r3, r0
 8009396:	2b00      	cmp	r3, #0
 8009398:	d11d      	bne.n	80093d6 <get_fat+0x194>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	693a      	ldr	r2, [r7, #16]
 80093a6:	8992      	ldrh	r2, [r2, #12]
 80093a8:	fbb3 f0f2 	udiv	r0, r3, r2
 80093ac:	fb02 f200 	mul.w	r2, r2, r0
 80093b0:	1a9b      	subs	r3, r3, r2
 80093b2:	440b      	add	r3, r1
 80093b4:	4618      	mov	r0, r3
 80093b6:	f7ff fbef 	bl	8008b98 <ld_dword>
 80093ba:	4603      	mov	r3, r0
 80093bc:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80093c0:	617b      	str	r3, [r7, #20]
			break;
 80093c2:	e009      	b.n	80093d8 <get_fat+0x196>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80093c4:	2301      	movs	r3, #1
 80093c6:	617b      	str	r3, [r7, #20]
 80093c8:	e006      	b.n	80093d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093ca:	bf00      	nop
 80093cc:	e004      	b.n	80093d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80093ce:	bf00      	nop
 80093d0:	e002      	b.n	80093d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80093d2:	bf00      	nop
 80093d4:	e000      	b.n	80093d8 <get_fat+0x196>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80093d6:	bf00      	nop
		}
	}

	return val;
 80093d8:	697b      	ldr	r3, [r7, #20]
}
 80093da:	4618      	mov	r0, r3
 80093dc:	3718      	adds	r7, #24
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80093e2:	b590      	push	{r4, r7, lr}
 80093e4:	b089      	sub	sp, #36	; 0x24
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	60f8      	str	r0, [r7, #12]
 80093ea:	60b9      	str	r1, [r7, #8]
 80093ec:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80093ee:	2302      	movs	r3, #2
 80093f0:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80093f2:	68bb      	ldr	r3, [r7, #8]
 80093f4:	2b01      	cmp	r3, #1
 80093f6:	f240 8106 	bls.w	8009606 <put_fat+0x224>
 80093fa:	68fb      	ldr	r3, [r7, #12]
 80093fc:	699b      	ldr	r3, [r3, #24]
 80093fe:	68ba      	ldr	r2, [r7, #8]
 8009400:	429a      	cmp	r2, r3
 8009402:	f080 8100 	bcs.w	8009606 <put_fat+0x224>
		switch (fs->fs_type) {
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	2b02      	cmp	r3, #2
 800940c:	f000 8088 	beq.w	8009520 <put_fat+0x13e>
 8009410:	2b03      	cmp	r3, #3
 8009412:	f000 80b0 	beq.w	8009576 <put_fat+0x194>
 8009416:	2b01      	cmp	r3, #1
 8009418:	f040 80f5 	bne.w	8009606 <put_fat+0x224>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	61bb      	str	r3, [r7, #24]
 8009420:	69bb      	ldr	r3, [r7, #24]
 8009422:	085b      	lsrs	r3, r3, #1
 8009424:	69ba      	ldr	r2, [r7, #24]
 8009426:	4413      	add	r3, r2
 8009428:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	899b      	ldrh	r3, [r3, #12]
 8009432:	4619      	mov	r1, r3
 8009434:	69bb      	ldr	r3, [r7, #24]
 8009436:	fbb3 f3f1 	udiv	r3, r3, r1
 800943a:	4413      	add	r3, r2
 800943c:	4619      	mov	r1, r3
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7ff fe42 	bl	80090c8 <move_window>
 8009444:	4603      	mov	r3, r0
 8009446:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009448:	7ffb      	ldrb	r3, [r7, #31]
 800944a:	2b00      	cmp	r3, #0
 800944c:	f040 80d4 	bne.w	80095f8 <put_fat+0x216>
			p = fs->win + bc++ % SS(fs);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009456:	69bb      	ldr	r3, [r7, #24]
 8009458:	1c5a      	adds	r2, r3, #1
 800945a:	61ba      	str	r2, [r7, #24]
 800945c:	68fa      	ldr	r2, [r7, #12]
 800945e:	8992      	ldrh	r2, [r2, #12]
 8009460:	fbb3 f0f2 	udiv	r0, r3, r2
 8009464:	fb02 f200 	mul.w	r2, r2, r0
 8009468:	1a9b      	subs	r3, r3, r2
 800946a:	440b      	add	r3, r1
 800946c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800946e:	68bb      	ldr	r3, [r7, #8]
 8009470:	f003 0301 	and.w	r3, r3, #1
 8009474:	2b00      	cmp	r3, #0
 8009476:	d00d      	beq.n	8009494 <put_fat+0xb2>
 8009478:	697b      	ldr	r3, [r7, #20]
 800947a:	781b      	ldrb	r3, [r3, #0]
 800947c:	b25b      	sxtb	r3, r3
 800947e:	f003 030f 	and.w	r3, r3, #15
 8009482:	b25a      	sxtb	r2, r3
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	b2db      	uxtb	r3, r3
 8009488:	011b      	lsls	r3, r3, #4
 800948a:	b25b      	sxtb	r3, r3
 800948c:	4313      	orrs	r3, r2
 800948e:	b25b      	sxtb	r3, r3
 8009490:	b2db      	uxtb	r3, r3
 8009492:	e001      	b.n	8009498 <put_fat+0xb6>
 8009494:	687b      	ldr	r3, [r7, #4]
 8009496:	b2db      	uxtb	r3, r3
 8009498:	697a      	ldr	r2, [r7, #20]
 800949a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	2201      	movs	r2, #1
 80094a0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	899b      	ldrh	r3, [r3, #12]
 80094aa:	4619      	mov	r1, r3
 80094ac:	69bb      	ldr	r3, [r7, #24]
 80094ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80094b2:	4413      	add	r3, r2
 80094b4:	4619      	mov	r1, r3
 80094b6:	68f8      	ldr	r0, [r7, #12]
 80094b8:	f7ff fe06 	bl	80090c8 <move_window>
 80094bc:	4603      	mov	r3, r0
 80094be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80094c0:	7ffb      	ldrb	r3, [r7, #31]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	f040 809a 	bne.w	80095fc <put_fat+0x21a>
			p = fs->win + bc % SS(fs);
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	899b      	ldrh	r3, [r3, #12]
 80094d2:	461a      	mov	r2, r3
 80094d4:	69bb      	ldr	r3, [r7, #24]
 80094d6:	fbb3 f0f2 	udiv	r0, r3, r2
 80094da:	fb02 f200 	mul.w	r2, r2, r0
 80094de:	1a9b      	subs	r3, r3, r2
 80094e0:	440b      	add	r3, r1
 80094e2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	f003 0301 	and.w	r3, r3, #1
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d003      	beq.n	80094f6 <put_fat+0x114>
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	091b      	lsrs	r3, r3, #4
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	e00e      	b.n	8009514 <put_fat+0x132>
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	b25b      	sxtb	r3, r3
 80094fc:	f023 030f 	bic.w	r3, r3, #15
 8009500:	b25a      	sxtb	r2, r3
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	0a1b      	lsrs	r3, r3, #8
 8009506:	b25b      	sxtb	r3, r3
 8009508:	f003 030f 	and.w	r3, r3, #15
 800950c:	b25b      	sxtb	r3, r3
 800950e:	4313      	orrs	r3, r2
 8009510:	b25b      	sxtb	r3, r3
 8009512:	b2db      	uxtb	r3, r3
 8009514:	697a      	ldr	r2, [r7, #20]
 8009516:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2201      	movs	r2, #1
 800951c:	70da      	strb	r2, [r3, #3]
			break;
 800951e:	e072      	b.n	8009606 <put_fat+0x224>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	899b      	ldrh	r3, [r3, #12]
 8009528:	085b      	lsrs	r3, r3, #1
 800952a:	b29b      	uxth	r3, r3
 800952c:	4619      	mov	r1, r3
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	fbb3 f3f1 	udiv	r3, r3, r1
 8009534:	4413      	add	r3, r2
 8009536:	4619      	mov	r1, r3
 8009538:	68f8      	ldr	r0, [r7, #12]
 800953a:	f7ff fdc5 	bl	80090c8 <move_window>
 800953e:	4603      	mov	r3, r0
 8009540:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009542:	7ffb      	ldrb	r3, [r7, #31]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d15b      	bne.n	8009600 <put_fat+0x21e>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	005b      	lsls	r3, r3, #1
 8009552:	68fa      	ldr	r2, [r7, #12]
 8009554:	8992      	ldrh	r2, [r2, #12]
 8009556:	fbb3 f0f2 	udiv	r0, r3, r2
 800955a:	fb02 f200 	mul.w	r2, r2, r0
 800955e:	1a9b      	subs	r3, r3, r2
 8009560:	440b      	add	r3, r1
 8009562:	687a      	ldr	r2, [r7, #4]
 8009564:	b292      	uxth	r2, r2
 8009566:	4611      	mov	r1, r2
 8009568:	4618      	mov	r0, r3
 800956a:	f7ff fb38 	bl	8008bde <st_word>
			fs->wflag = 1;
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	2201      	movs	r2, #1
 8009572:	70da      	strb	r2, [r3, #3]
			break;
 8009574:	e047      	b.n	8009606 <put_fat+0x224>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	899b      	ldrh	r3, [r3, #12]
 800957e:	089b      	lsrs	r3, r3, #2
 8009580:	b29b      	uxth	r3, r3
 8009582:	4619      	mov	r1, r3
 8009584:	68bb      	ldr	r3, [r7, #8]
 8009586:	fbb3 f3f1 	udiv	r3, r3, r1
 800958a:	4413      	add	r3, r2
 800958c:	4619      	mov	r1, r3
 800958e:	68f8      	ldr	r0, [r7, #12]
 8009590:	f7ff fd9a 	bl	80090c8 <move_window>
 8009594:	4603      	mov	r3, r0
 8009596:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8009598:	7ffb      	ldrb	r3, [r7, #31]
 800959a:	2b00      	cmp	r3, #0
 800959c:	d132      	bne.n	8009604 <put_fat+0x222>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80095aa:	68bb      	ldr	r3, [r7, #8]
 80095ac:	009b      	lsls	r3, r3, #2
 80095ae:	68fa      	ldr	r2, [r7, #12]
 80095b0:	8992      	ldrh	r2, [r2, #12]
 80095b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80095b6:	fb02 f200 	mul.w	r2, r2, r0
 80095ba:	1a9b      	subs	r3, r3, r2
 80095bc:	440b      	add	r3, r1
 80095be:	4618      	mov	r0, r3
 80095c0:	f7ff faea 	bl	8008b98 <ld_dword>
 80095c4:	4603      	mov	r3, r0
 80095c6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80095ca:	4323      	orrs	r3, r4
 80095cc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 80095d4:	68bb      	ldr	r3, [r7, #8]
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	68fa      	ldr	r2, [r7, #12]
 80095da:	8992      	ldrh	r2, [r2, #12]
 80095dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80095e0:	fb02 f200 	mul.w	r2, r2, r0
 80095e4:	1a9b      	subs	r3, r3, r2
 80095e6:	440b      	add	r3, r1
 80095e8:	6879      	ldr	r1, [r7, #4]
 80095ea:	4618      	mov	r0, r3
 80095ec:	f7ff fb12 	bl	8008c14 <st_dword>
			fs->wflag = 1;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	2201      	movs	r2, #1
 80095f4:	70da      	strb	r2, [r3, #3]
			break;
 80095f6:	e006      	b.n	8009606 <put_fat+0x224>
			if (res != FR_OK) break;
 80095f8:	bf00      	nop
 80095fa:	e004      	b.n	8009606 <put_fat+0x224>
			if (res != FR_OK) break;
 80095fc:	bf00      	nop
 80095fe:	e002      	b.n	8009606 <put_fat+0x224>
			if (res != FR_OK) break;
 8009600:	bf00      	nop
 8009602:	e000      	b.n	8009606 <put_fat+0x224>
			if (res != FR_OK) break;
 8009604:	bf00      	nop
		}
	}
	return res;
 8009606:	7ffb      	ldrb	r3, [r7, #31]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3724      	adds	r7, #36	; 0x24
 800960c:	46bd      	mov	sp, r7
 800960e:	bd90      	pop	{r4, r7, pc}

08009610 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b088      	sub	sp, #32
 8009614:	af00      	add	r7, sp, #0
 8009616:	60f8      	str	r0, [r7, #12]
 8009618:	60b9      	str	r1, [r7, #8]
 800961a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800961c:	2300      	movs	r3, #0
 800961e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8009626:	68bb      	ldr	r3, [r7, #8]
 8009628:	2b01      	cmp	r3, #1
 800962a:	d904      	bls.n	8009636 <remove_chain+0x26>
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	699b      	ldr	r3, [r3, #24]
 8009630:	68ba      	ldr	r2, [r7, #8]
 8009632:	429a      	cmp	r2, r3
 8009634:	d301      	bcc.n	800963a <remove_chain+0x2a>
 8009636:	2302      	movs	r3, #2
 8009638:	e04b      	b.n	80096d2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	2b00      	cmp	r3, #0
 800963e:	d00c      	beq.n	800965a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8009640:	f04f 32ff 	mov.w	r2, #4294967295
 8009644:	6879      	ldr	r1, [r7, #4]
 8009646:	69b8      	ldr	r0, [r7, #24]
 8009648:	f7ff fecb 	bl	80093e2 <put_fat>
 800964c:	4603      	mov	r3, r0
 800964e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8009650:	7ffb      	ldrb	r3, [r7, #31]
 8009652:	2b00      	cmp	r3, #0
 8009654:	d001      	beq.n	800965a <remove_chain+0x4a>
 8009656:	7ffb      	ldrb	r3, [r7, #31]
 8009658:	e03b      	b.n	80096d2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800965a:	68b9      	ldr	r1, [r7, #8]
 800965c:	68f8      	ldr	r0, [r7, #12]
 800965e:	f7ff fdf0 	bl	8009242 <get_fat>
 8009662:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8009664:	697b      	ldr	r3, [r7, #20]
 8009666:	2b00      	cmp	r3, #0
 8009668:	d031      	beq.n	80096ce <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	2b01      	cmp	r3, #1
 800966e:	d101      	bne.n	8009674 <remove_chain+0x64>
 8009670:	2302      	movs	r3, #2
 8009672:	e02e      	b.n	80096d2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8009674:	697b      	ldr	r3, [r7, #20]
 8009676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800967a:	d101      	bne.n	8009680 <remove_chain+0x70>
 800967c:	2301      	movs	r3, #1
 800967e:	e028      	b.n	80096d2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8009680:	2200      	movs	r2, #0
 8009682:	68b9      	ldr	r1, [r7, #8]
 8009684:	69b8      	ldr	r0, [r7, #24]
 8009686:	f7ff feac 	bl	80093e2 <put_fat>
 800968a:	4603      	mov	r3, r0
 800968c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800968e:	7ffb      	ldrb	r3, [r7, #31]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d001      	beq.n	8009698 <remove_chain+0x88>
 8009694:	7ffb      	ldrb	r3, [r7, #31]
 8009696:	e01c      	b.n	80096d2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8009698:	69bb      	ldr	r3, [r7, #24]
 800969a:	695a      	ldr	r2, [r3, #20]
 800969c:	69bb      	ldr	r3, [r7, #24]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	3b02      	subs	r3, #2
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d20b      	bcs.n	80096be <remove_chain+0xae>
			fs->free_clst++;
 80096a6:	69bb      	ldr	r3, [r7, #24]
 80096a8:	695b      	ldr	r3, [r3, #20]
 80096aa:	1c5a      	adds	r2, r3, #1
 80096ac:	69bb      	ldr	r3, [r7, #24]
 80096ae:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 80096b0:	69bb      	ldr	r3, [r7, #24]
 80096b2:	791b      	ldrb	r3, [r3, #4]
 80096b4:	f043 0301 	orr.w	r3, r3, #1
 80096b8:	b2da      	uxtb	r2, r3
 80096ba:	69bb      	ldr	r3, [r7, #24]
 80096bc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80096c2:	69bb      	ldr	r3, [r7, #24]
 80096c4:	699b      	ldr	r3, [r3, #24]
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	429a      	cmp	r2, r3
 80096ca:	d3c6      	bcc.n	800965a <remove_chain+0x4a>
 80096cc:	e000      	b.n	80096d0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80096ce:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80096d0:	2300      	movs	r3, #0
}
 80096d2:	4618      	mov	r0, r3
 80096d4:	3720      	adds	r7, #32
 80096d6:	46bd      	mov	sp, r7
 80096d8:	bd80      	pop	{r7, pc}

080096da <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b088      	sub	sp, #32
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
 80096e2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80096ea:	683b      	ldr	r3, [r7, #0]
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	d10d      	bne.n	800970c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80096f0:	693b      	ldr	r3, [r7, #16]
 80096f2:	691b      	ldr	r3, [r3, #16]
 80096f4:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80096f6:	69bb      	ldr	r3, [r7, #24]
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d004      	beq.n	8009706 <create_chain+0x2c>
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	699b      	ldr	r3, [r3, #24]
 8009700:	69ba      	ldr	r2, [r7, #24]
 8009702:	429a      	cmp	r2, r3
 8009704:	d31b      	bcc.n	800973e <create_chain+0x64>
 8009706:	2301      	movs	r3, #1
 8009708:	61bb      	str	r3, [r7, #24]
 800970a:	e018      	b.n	800973e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800970c:	6839      	ldr	r1, [r7, #0]
 800970e:	6878      	ldr	r0, [r7, #4]
 8009710:	f7ff fd97 	bl	8009242 <get_fat>
 8009714:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	2b01      	cmp	r3, #1
 800971a:	d801      	bhi.n	8009720 <create_chain+0x46>
 800971c:	2301      	movs	r3, #1
 800971e:	e070      	b.n	8009802 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009726:	d101      	bne.n	800972c <create_chain+0x52>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	e06a      	b.n	8009802 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800972c:	693b      	ldr	r3, [r7, #16]
 800972e:	699b      	ldr	r3, [r3, #24]
 8009730:	68fa      	ldr	r2, [r7, #12]
 8009732:	429a      	cmp	r2, r3
 8009734:	d201      	bcs.n	800973a <create_chain+0x60>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	e063      	b.n	8009802 <create_chain+0x128>
		scl = clst;
 800973a:	683b      	ldr	r3, [r7, #0]
 800973c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800973e:	69bb      	ldr	r3, [r7, #24]
 8009740:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8009742:	69fb      	ldr	r3, [r7, #28]
 8009744:	3301      	adds	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8009748:	693b      	ldr	r3, [r7, #16]
 800974a:	699b      	ldr	r3, [r3, #24]
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	429a      	cmp	r2, r3
 8009750:	d307      	bcc.n	8009762 <create_chain+0x88>
				ncl = 2;
 8009752:	2302      	movs	r3, #2
 8009754:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8009756:	69fa      	ldr	r2, [r7, #28]
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	429a      	cmp	r2, r3
 800975c:	d901      	bls.n	8009762 <create_chain+0x88>
 800975e:	2300      	movs	r3, #0
 8009760:	e04f      	b.n	8009802 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8009762:	69f9      	ldr	r1, [r7, #28]
 8009764:	6878      	ldr	r0, [r7, #4]
 8009766:	f7ff fd6c 	bl	8009242 <get_fat>
 800976a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	2b00      	cmp	r3, #0
 8009770:	d00e      	beq.n	8009790 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	2b01      	cmp	r3, #1
 8009776:	d003      	beq.n	8009780 <create_chain+0xa6>
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977e:	d101      	bne.n	8009784 <create_chain+0xaa>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	e03e      	b.n	8009802 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8009784:	69fa      	ldr	r2, [r7, #28]
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	429a      	cmp	r2, r3
 800978a:	d1da      	bne.n	8009742 <create_chain+0x68>
 800978c:	2300      	movs	r3, #0
 800978e:	e038      	b.n	8009802 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8009790:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8009792:	f04f 32ff 	mov.w	r2, #4294967295
 8009796:	69f9      	ldr	r1, [r7, #28]
 8009798:	6938      	ldr	r0, [r7, #16]
 800979a:	f7ff fe22 	bl	80093e2 <put_fat>
 800979e:	4603      	mov	r3, r0
 80097a0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80097a2:	7dfb      	ldrb	r3, [r7, #23]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d109      	bne.n	80097bc <create_chain+0xe2>
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	2b00      	cmp	r3, #0
 80097ac:	d006      	beq.n	80097bc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80097ae:	69fa      	ldr	r2, [r7, #28]
 80097b0:	6839      	ldr	r1, [r7, #0]
 80097b2:	6938      	ldr	r0, [r7, #16]
 80097b4:	f7ff fe15 	bl	80093e2 <put_fat>
 80097b8:	4603      	mov	r3, r0
 80097ba:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80097bc:	7dfb      	ldrb	r3, [r7, #23]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d116      	bne.n	80097f0 <create_chain+0x116>
		fs->last_clst = ncl;
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80097c8:	693b      	ldr	r3, [r7, #16]
 80097ca:	695a      	ldr	r2, [r3, #20]
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	699b      	ldr	r3, [r3, #24]
 80097d0:	3b02      	subs	r3, #2
 80097d2:	429a      	cmp	r2, r3
 80097d4:	d804      	bhi.n	80097e0 <create_chain+0x106>
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	695b      	ldr	r3, [r3, #20]
 80097da:	1e5a      	subs	r2, r3, #1
 80097dc:	693b      	ldr	r3, [r7, #16]
 80097de:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80097e0:	693b      	ldr	r3, [r7, #16]
 80097e2:	791b      	ldrb	r3, [r3, #4]
 80097e4:	f043 0301 	orr.w	r3, r3, #1
 80097e8:	b2da      	uxtb	r2, r3
 80097ea:	693b      	ldr	r3, [r7, #16]
 80097ec:	711a      	strb	r2, [r3, #4]
 80097ee:	e007      	b.n	8009800 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80097f0:	7dfb      	ldrb	r3, [r7, #23]
 80097f2:	2b01      	cmp	r3, #1
 80097f4:	d102      	bne.n	80097fc <create_chain+0x122>
 80097f6:	f04f 33ff 	mov.w	r3, #4294967295
 80097fa:	e000      	b.n	80097fe <create_chain+0x124>
 80097fc:	2301      	movs	r3, #1
 80097fe:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8009800:	69fb      	ldr	r3, [r7, #28]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3720      	adds	r7, #32
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}

0800980a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800980a:	b480      	push	{r7}
 800980c:	b087      	sub	sp, #28
 800980e:	af00      	add	r7, sp, #0
 8009810:	6078      	str	r0, [r7, #4]
 8009812:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800981e:	3304      	adds	r3, #4
 8009820:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	899b      	ldrh	r3, [r3, #12]
 8009826:	461a      	mov	r2, r3
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	fbb3 f3f2 	udiv	r3, r3, r2
 800982e:	68fa      	ldr	r2, [r7, #12]
 8009830:	8952      	ldrh	r2, [r2, #10]
 8009832:	fbb3 f3f2 	udiv	r3, r3, r2
 8009836:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009838:	693b      	ldr	r3, [r7, #16]
 800983a:	1d1a      	adds	r2, r3, #4
 800983c:	613a      	str	r2, [r7, #16]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8009842:	68bb      	ldr	r3, [r7, #8]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d101      	bne.n	800984c <clmt_clust+0x42>
 8009848:	2300      	movs	r3, #0
 800984a:	e010      	b.n	800986e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	429a      	cmp	r2, r3
 8009852:	d307      	bcc.n	8009864 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8009854:	697a      	ldr	r2, [r7, #20]
 8009856:	68bb      	ldr	r3, [r7, #8]
 8009858:	1ad3      	subs	r3, r2, r3
 800985a:	617b      	str	r3, [r7, #20]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	3304      	adds	r3, #4
 8009860:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8009862:	e7e9      	b.n	8009838 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8009864:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8009866:	693b      	ldr	r3, [r7, #16]
 8009868:	681a      	ldr	r2, [r3, #0]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	4413      	add	r3, r2
}
 800986e:	4618      	mov	r0, r3
 8009870:	371c      	adds	r7, #28
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b086      	sub	sp, #24
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
 8009882:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800988a:	683b      	ldr	r3, [r7, #0]
 800988c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009890:	d204      	bcs.n	800989c <dir_sdi+0x22>
 8009892:	683b      	ldr	r3, [r7, #0]
 8009894:	f003 031f 	and.w	r3, r3, #31
 8009898:	2b00      	cmp	r3, #0
 800989a:	d001      	beq.n	80098a0 <dir_sdi+0x26>
		return FR_INT_ERR;
 800989c:	2302      	movs	r3, #2
 800989e:	e071      	b.n	8009984 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	683a      	ldr	r2, [r7, #0]
 80098a4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	689b      	ldr	r3, [r3, #8]
 80098aa:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 80098ac:	697b      	ldr	r3, [r7, #20]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d106      	bne.n	80098c0 <dir_sdi+0x46>
 80098b2:	693b      	ldr	r3, [r7, #16]
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	d902      	bls.n	80098c0 <dir_sdi+0x46>
		clst = fs->dirbase;
 80098ba:	693b      	ldr	r3, [r7, #16]
 80098bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098be:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 80098c0:	697b      	ldr	r3, [r7, #20]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10c      	bne.n	80098e0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 80098c6:	683b      	ldr	r3, [r7, #0]
 80098c8:	095b      	lsrs	r3, r3, #5
 80098ca:	693a      	ldr	r2, [r7, #16]
 80098cc:	8912      	ldrh	r2, [r2, #8]
 80098ce:	4293      	cmp	r3, r2
 80098d0:	d301      	bcc.n	80098d6 <dir_sdi+0x5c>
 80098d2:	2302      	movs	r3, #2
 80098d4:	e056      	b.n	8009984 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	61da      	str	r2, [r3, #28]
 80098de:	e02d      	b.n	800993c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 80098e0:	693b      	ldr	r3, [r7, #16]
 80098e2:	895b      	ldrh	r3, [r3, #10]
 80098e4:	461a      	mov	r2, r3
 80098e6:	693b      	ldr	r3, [r7, #16]
 80098e8:	899b      	ldrh	r3, [r3, #12]
 80098ea:	fb03 f302 	mul.w	r3, r3, r2
 80098ee:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 80098f0:	e019      	b.n	8009926 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	6979      	ldr	r1, [r7, #20]
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7ff fca3 	bl	8009242 <get_fat>
 80098fc:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80098fe:	697b      	ldr	r3, [r7, #20]
 8009900:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009904:	d101      	bne.n	800990a <dir_sdi+0x90>
 8009906:	2301      	movs	r3, #1
 8009908:	e03c      	b.n	8009984 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b01      	cmp	r3, #1
 800990e:	d904      	bls.n	800991a <dir_sdi+0xa0>
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	699b      	ldr	r3, [r3, #24]
 8009914:	697a      	ldr	r2, [r7, #20]
 8009916:	429a      	cmp	r2, r3
 8009918:	d301      	bcc.n	800991e <dir_sdi+0xa4>
 800991a:	2302      	movs	r3, #2
 800991c:	e032      	b.n	8009984 <dir_sdi+0x10a>
			ofs -= csz;
 800991e:	683a      	ldr	r2, [r7, #0]
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	1ad3      	subs	r3, r2, r3
 8009924:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8009926:	683a      	ldr	r2, [r7, #0]
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	429a      	cmp	r2, r3
 800992c:	d2e1      	bcs.n	80098f2 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 800992e:	6979      	ldr	r1, [r7, #20]
 8009930:	6938      	ldr	r0, [r7, #16]
 8009932:	f7ff fc67 	bl	8009204 <clust2sect>
 8009936:	4602      	mov	r2, r0
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	69db      	ldr	r3, [r3, #28]
 8009946:	2b00      	cmp	r3, #0
 8009948:	d101      	bne.n	800994e <dir_sdi+0xd4>
 800994a:	2302      	movs	r3, #2
 800994c:	e01a      	b.n	8009984 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	69da      	ldr	r2, [r3, #28]
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	899b      	ldrh	r3, [r3, #12]
 8009956:	4619      	mov	r1, r3
 8009958:	683b      	ldr	r3, [r7, #0]
 800995a:	fbb3 f3f1 	udiv	r3, r3, r1
 800995e:	441a      	add	r2, r3
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800996a:	693b      	ldr	r3, [r7, #16]
 800996c:	899b      	ldrh	r3, [r3, #12]
 800996e:	461a      	mov	r2, r3
 8009970:	683b      	ldr	r3, [r7, #0]
 8009972:	fbb3 f0f2 	udiv	r0, r3, r2
 8009976:	fb02 f200 	mul.w	r2, r2, r0
 800997a:	1a9b      	subs	r3, r3, r2
 800997c:	18ca      	adds	r2, r1, r3
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009982:	2300      	movs	r3, #0
}
 8009984:	4618      	mov	r0, r3
 8009986:	3718      	adds	r7, #24
 8009988:	46bd      	mov	sp, r7
 800998a:	bd80      	pop	{r7, pc}

0800998c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800998c:	b580      	push	{r7, lr}
 800998e:	b086      	sub	sp, #24
 8009990:	af00      	add	r7, sp, #0
 8009992:	6078      	str	r0, [r7, #4]
 8009994:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	695b      	ldr	r3, [r3, #20]
 80099a0:	3320      	adds	r3, #32
 80099a2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	69db      	ldr	r3, [r3, #28]
 80099a8:	2b00      	cmp	r3, #0
 80099aa:	d003      	beq.n	80099b4 <dir_next+0x28>
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80099b2:	d301      	bcc.n	80099b8 <dir_next+0x2c>
 80099b4:	2304      	movs	r3, #4
 80099b6:	e0bb      	b.n	8009b30 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	899b      	ldrh	r3, [r3, #12]
 80099bc:	461a      	mov	r2, r3
 80099be:	68bb      	ldr	r3, [r7, #8]
 80099c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80099c4:	fb02 f201 	mul.w	r2, r2, r1
 80099c8:	1a9b      	subs	r3, r3, r2
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	f040 809d 	bne.w	8009b0a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	69db      	ldr	r3, [r3, #28]
 80099d4:	1c5a      	adds	r2, r3, #1
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	699b      	ldr	r3, [r3, #24]
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d10b      	bne.n	80099fa <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	095b      	lsrs	r3, r3, #5
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	8912      	ldrh	r2, [r2, #8]
 80099ea:	4293      	cmp	r3, r2
 80099ec:	f0c0 808d 	bcc.w	8009b0a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2200      	movs	r2, #0
 80099f4:	61da      	str	r2, [r3, #28]
 80099f6:	2304      	movs	r3, #4
 80099f8:	e09a      	b.n	8009b30 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	899b      	ldrh	r3, [r3, #12]
 80099fe:	461a      	mov	r2, r3
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	fbb3 f3f2 	udiv	r3, r3, r2
 8009a06:	68fa      	ldr	r2, [r7, #12]
 8009a08:	8952      	ldrh	r2, [r2, #10]
 8009a0a:	3a01      	subs	r2, #1
 8009a0c:	4013      	ands	r3, r2
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d17b      	bne.n	8009b0a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8009a12:	687a      	ldr	r2, [r7, #4]
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	4619      	mov	r1, r3
 8009a1a:	4610      	mov	r0, r2
 8009a1c:	f7ff fc11 	bl	8009242 <get_fat>
 8009a20:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8009a22:	697b      	ldr	r3, [r7, #20]
 8009a24:	2b01      	cmp	r3, #1
 8009a26:	d801      	bhi.n	8009a2c <dir_next+0xa0>
 8009a28:	2302      	movs	r3, #2
 8009a2a:	e081      	b.n	8009b30 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8009a2c:	697b      	ldr	r3, [r7, #20]
 8009a2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a32:	d101      	bne.n	8009a38 <dir_next+0xac>
 8009a34:	2301      	movs	r3, #1
 8009a36:	e07b      	b.n	8009b30 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	699b      	ldr	r3, [r3, #24]
 8009a3c:	697a      	ldr	r2, [r7, #20]
 8009a3e:	429a      	cmp	r2, r3
 8009a40:	d359      	bcc.n	8009af6 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8009a42:	683b      	ldr	r3, [r7, #0]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d104      	bne.n	8009a52 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2200      	movs	r2, #0
 8009a4c:	61da      	str	r2, [r3, #28]
 8009a4e:	2304      	movs	r3, #4
 8009a50:	e06e      	b.n	8009b30 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8009a52:	687a      	ldr	r2, [r7, #4]
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	699b      	ldr	r3, [r3, #24]
 8009a58:	4619      	mov	r1, r3
 8009a5a:	4610      	mov	r0, r2
 8009a5c:	f7ff fe3d 	bl	80096da <create_chain>
 8009a60:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8009a62:	697b      	ldr	r3, [r7, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d101      	bne.n	8009a6c <dir_next+0xe0>
 8009a68:	2307      	movs	r3, #7
 8009a6a:	e061      	b.n	8009b30 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	2b01      	cmp	r3, #1
 8009a70:	d101      	bne.n	8009a76 <dir_next+0xea>
 8009a72:	2302      	movs	r3, #2
 8009a74:	e05c      	b.n	8009b30 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a7c:	d101      	bne.n	8009a82 <dir_next+0xf6>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e056      	b.n	8009b30 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8009a82:	68f8      	ldr	r0, [r7, #12]
 8009a84:	f7ff fadc 	bl	8009040 <sync_window>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d001      	beq.n	8009a92 <dir_next+0x106>
 8009a8e:	2301      	movs	r3, #1
 8009a90:	e04e      	b.n	8009b30 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	899b      	ldrh	r3, [r3, #12]
 8009a9c:	461a      	mov	r2, r3
 8009a9e:	2100      	movs	r1, #0
 8009aa0:	f7ff f905 	bl	8008cae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	613b      	str	r3, [r7, #16]
 8009aa8:	6979      	ldr	r1, [r7, #20]
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f7ff fbaa 	bl	8009204 <clust2sect>
 8009ab0:	4602      	mov	r2, r0
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	631a      	str	r2, [r3, #48]	; 0x30
 8009ab6:	e012      	b.n	8009ade <dir_next+0x152>
						fs->wflag = 1;
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2201      	movs	r2, #1
 8009abc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8009abe:	68f8      	ldr	r0, [r7, #12]
 8009ac0:	f7ff fabe 	bl	8009040 <sync_window>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d001      	beq.n	8009ace <dir_next+0x142>
 8009aca:	2301      	movs	r3, #1
 8009acc:	e030      	b.n	8009b30 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	3301      	adds	r3, #1
 8009ad2:	613b      	str	r3, [r7, #16]
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009ad8:	1c5a      	adds	r2, r3, #1
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	631a      	str	r2, [r3, #48]	; 0x30
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	895b      	ldrh	r3, [r3, #10]
 8009ae2:	461a      	mov	r2, r3
 8009ae4:	693b      	ldr	r3, [r7, #16]
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d3e6      	bcc.n	8009ab8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009aee:	693b      	ldr	r3, [r7, #16]
 8009af0:	1ad2      	subs	r2, r2, r3
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	697a      	ldr	r2, [r7, #20]
 8009afa:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8009afc:	6979      	ldr	r1, [r7, #20]
 8009afe:	68f8      	ldr	r0, [r7, #12]
 8009b00:	f7ff fb80 	bl	8009204 <clust2sect>
 8009b04:	4602      	mov	r2, r0
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	68ba      	ldr	r2, [r7, #8]
 8009b0e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	899b      	ldrh	r3, [r3, #12]
 8009b1a:	461a      	mov	r2, r3
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	fbb3 f0f2 	udiv	r0, r3, r2
 8009b22:	fb02 f200 	mul.w	r2, r2, r0
 8009b26:	1a9b      	subs	r3, r3, r2
 8009b28:	18ca      	adds	r2, r1, r3
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8009b2e:	2300      	movs	r3, #0
}
 8009b30:	4618      	mov	r0, r3
 8009b32:	3718      	adds	r7, #24
 8009b34:	46bd      	mov	sp, r7
 8009b36:	bd80      	pop	{r7, pc}

08009b38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b086      	sub	sp, #24
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
 8009b40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8009b48:	2100      	movs	r1, #0
 8009b4a:	6878      	ldr	r0, [r7, #4]
 8009b4c:	f7ff fe95 	bl	800987a <dir_sdi>
 8009b50:	4603      	mov	r3, r0
 8009b52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8009b54:	7dfb      	ldrb	r3, [r7, #23]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d12b      	bne.n	8009bb2 <dir_alloc+0x7a>
		n = 0;
 8009b5a:	2300      	movs	r3, #0
 8009b5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	69db      	ldr	r3, [r3, #28]
 8009b62:	4619      	mov	r1, r3
 8009b64:	68f8      	ldr	r0, [r7, #12]
 8009b66:	f7ff faaf 	bl	80090c8 <move_window>
 8009b6a:	4603      	mov	r3, r0
 8009b6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009b6e:	7dfb      	ldrb	r3, [r7, #23]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d11d      	bne.n	8009bb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	781b      	ldrb	r3, [r3, #0]
 8009b7a:	2be5      	cmp	r3, #229	; 0xe5
 8009b7c:	d004      	beq.n	8009b88 <dir_alloc+0x50>
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	6a1b      	ldr	r3, [r3, #32]
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d107      	bne.n	8009b98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8009b88:	693b      	ldr	r3, [r7, #16]
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	613b      	str	r3, [r7, #16]
 8009b8e:	693a      	ldr	r2, [r7, #16]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	429a      	cmp	r2, r3
 8009b94:	d102      	bne.n	8009b9c <dir_alloc+0x64>
 8009b96:	e00c      	b.n	8009bb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8009b9c:	2101      	movs	r1, #1
 8009b9e:	6878      	ldr	r0, [r7, #4]
 8009ba0:	f7ff fef4 	bl	800998c <dir_next>
 8009ba4:	4603      	mov	r3, r0
 8009ba6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8009ba8:	7dfb      	ldrb	r3, [r7, #23]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d0d7      	beq.n	8009b5e <dir_alloc+0x26>
 8009bae:	e000      	b.n	8009bb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8009bb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8009bb2:	7dfb      	ldrb	r3, [r7, #23]
 8009bb4:	2b04      	cmp	r3, #4
 8009bb6:	d101      	bne.n	8009bbc <dir_alloc+0x84>
 8009bb8:	2307      	movs	r3, #7
 8009bba:	75fb      	strb	r3, [r7, #23]
	return res;
 8009bbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bbe:	4618      	mov	r0, r3
 8009bc0:	3718      	adds	r7, #24
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	bd80      	pop	{r7, pc}

08009bc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8009bc6:	b580      	push	{r7, lr}
 8009bc8:	b084      	sub	sp, #16
 8009bca:	af00      	add	r7, sp, #0
 8009bcc:	6078      	str	r0, [r7, #4]
 8009bce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8009bd0:	683b      	ldr	r3, [r7, #0]
 8009bd2:	331a      	adds	r3, #26
 8009bd4:	4618      	mov	r0, r3
 8009bd6:	f7fe ffc7 	bl	8008b68 <ld_word>
 8009bda:	4603      	mov	r3, r0
 8009bdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	781b      	ldrb	r3, [r3, #0]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	d109      	bne.n	8009bfa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8009be6:	683b      	ldr	r3, [r7, #0]
 8009be8:	3314      	adds	r3, #20
 8009bea:	4618      	mov	r0, r3
 8009bec:	f7fe ffbc 	bl	8008b68 <ld_word>
 8009bf0:	4603      	mov	r3, r0
 8009bf2:	041b      	lsls	r3, r3, #16
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	4313      	orrs	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
}
 8009bfc:	4618      	mov	r0, r3
 8009bfe:	3710      	adds	r7, #16
 8009c00:	46bd      	mov	sp, r7
 8009c02:	bd80      	pop	{r7, pc}

08009c04 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b084      	sub	sp, #16
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	60f8      	str	r0, [r7, #12]
 8009c0c:	60b9      	str	r1, [r7, #8]
 8009c0e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8009c10:	68bb      	ldr	r3, [r7, #8]
 8009c12:	331a      	adds	r3, #26
 8009c14:	687a      	ldr	r2, [r7, #4]
 8009c16:	b292      	uxth	r2, r2
 8009c18:	4611      	mov	r1, r2
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	f7fe ffdf 	bl	8008bde <st_word>
	if (fs->fs_type == FS_FAT32) {
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	781b      	ldrb	r3, [r3, #0]
 8009c24:	2b03      	cmp	r3, #3
 8009c26:	d109      	bne.n	8009c3c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f103 0214 	add.w	r2, r3, #20
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	0c1b      	lsrs	r3, r3, #16
 8009c32:	b29b      	uxth	r3, r3
 8009c34:	4619      	mov	r1, r3
 8009c36:	4610      	mov	r0, r2
 8009c38:	f7fe ffd1 	bl	8008bde <st_word>
	}
}
 8009c3c:	bf00      	nop
 8009c3e:	3710      	adds	r7, #16
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b086      	sub	sp, #24
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8009c52:	2100      	movs	r1, #0
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f7ff fe10 	bl	800987a <dir_sdi>
 8009c5a:	4603      	mov	r3, r0
 8009c5c:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8009c5e:	7dfb      	ldrb	r3, [r7, #23]
 8009c60:	2b00      	cmp	r3, #0
 8009c62:	d001      	beq.n	8009c68 <dir_find+0x24>
 8009c64:	7dfb      	ldrb	r3, [r7, #23]
 8009c66:	e03e      	b.n	8009ce6 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	69db      	ldr	r3, [r3, #28]
 8009c6c:	4619      	mov	r1, r3
 8009c6e:	6938      	ldr	r0, [r7, #16]
 8009c70:	f7ff fa2a 	bl	80090c8 <move_window>
 8009c74:	4603      	mov	r3, r0
 8009c76:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8009c78:	7dfb      	ldrb	r3, [r7, #23]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d12f      	bne.n	8009cde <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	6a1b      	ldr	r3, [r3, #32]
 8009c82:	781b      	ldrb	r3, [r3, #0]
 8009c84:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8009c86:	7bfb      	ldrb	r3, [r7, #15]
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d102      	bne.n	8009c92 <dir_find+0x4e>
 8009c8c:	2304      	movs	r3, #4
 8009c8e:	75fb      	strb	r3, [r7, #23]
 8009c90:	e028      	b.n	8009ce4 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	6a1b      	ldr	r3, [r3, #32]
 8009c96:	330b      	adds	r3, #11
 8009c98:	781b      	ldrb	r3, [r3, #0]
 8009c9a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c9e:	b2da      	uxtb	r2, r3
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	6a1b      	ldr	r3, [r3, #32]
 8009ca8:	330b      	adds	r3, #11
 8009caa:	781b      	ldrb	r3, [r3, #0]
 8009cac:	f003 0308 	and.w	r3, r3, #8
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d10a      	bne.n	8009cca <dir_find+0x86>
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	6a18      	ldr	r0, [r3, #32]
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	3324      	adds	r3, #36	; 0x24
 8009cbc:	220b      	movs	r2, #11
 8009cbe:	4619      	mov	r1, r3
 8009cc0:	f7ff f80f 	bl	8008ce2 <mem_cmp>
 8009cc4:	4603      	mov	r3, r0
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d00b      	beq.n	8009ce2 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8009cca:	2100      	movs	r1, #0
 8009ccc:	6878      	ldr	r0, [r7, #4]
 8009cce:	f7ff fe5d 	bl	800998c <dir_next>
 8009cd2:	4603      	mov	r3, r0
 8009cd4:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8009cd6:	7dfb      	ldrb	r3, [r7, #23]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d0c5      	beq.n	8009c68 <dir_find+0x24>
 8009cdc:	e002      	b.n	8009ce4 <dir_find+0xa0>
		if (res != FR_OK) break;
 8009cde:	bf00      	nop
 8009ce0:	e000      	b.n	8009ce4 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8009ce2:	bf00      	nop

	return res;
 8009ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009ce6:	4618      	mov	r0, r3
 8009ce8:	3718      	adds	r7, #24
 8009cea:	46bd      	mov	sp, r7
 8009cec:	bd80      	pop	{r7, pc}

08009cee <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8009cee:	b580      	push	{r7, lr}
 8009cf0:	b084      	sub	sp, #16
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8009cfc:	2101      	movs	r1, #1
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f7ff ff1a 	bl	8009b38 <dir_alloc>
 8009d04:	4603      	mov	r3, r0
 8009d06:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8009d08:	7bfb      	ldrb	r3, [r7, #15]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11c      	bne.n	8009d48 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	69db      	ldr	r3, [r3, #28]
 8009d12:	4619      	mov	r1, r3
 8009d14:	68b8      	ldr	r0, [r7, #8]
 8009d16:	f7ff f9d7 	bl	80090c8 <move_window>
 8009d1a:	4603      	mov	r3, r0
 8009d1c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8009d1e:	7bfb      	ldrb	r3, [r7, #15]
 8009d20:	2b00      	cmp	r3, #0
 8009d22:	d111      	bne.n	8009d48 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	6a1b      	ldr	r3, [r3, #32]
 8009d28:	2220      	movs	r2, #32
 8009d2a:	2100      	movs	r1, #0
 8009d2c:	4618      	mov	r0, r3
 8009d2e:	f7fe ffbe 	bl	8008cae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	6a18      	ldr	r0, [r3, #32]
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	3324      	adds	r3, #36	; 0x24
 8009d3a:	220b      	movs	r2, #11
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	f7fe ff95 	bl	8008c6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	2201      	movs	r2, #1
 8009d46:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8009d48:	7bfb      	ldrb	r3, [r7, #15]
}
 8009d4a:	4618      	mov	r0, r3
 8009d4c:	3710      	adds	r7, #16
 8009d4e:	46bd      	mov	sp, r7
 8009d50:	bd80      	pop	{r7, pc}

08009d52 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8009d52:	b580      	push	{r7, lr}
 8009d54:	b086      	sub	sp, #24
 8009d56:	af00      	add	r7, sp, #0
 8009d58:	6078      	str	r0, [r7, #4]
 8009d5a:	6039      	str	r1, [r7, #0]
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	2200      	movs	r2, #0
 8009d60:	725a      	strb	r2, [r3, #9]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	69db      	ldr	r3, [r3, #28]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	d04e      	beq.n	8009e08 <get_fileinfo+0xb6>
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
	}
	fno->altname[j] = 0;	/* Terminate the SFN */

#else	/* Non-LFN configuration */
	i = j = 0;
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	613b      	str	r3, [r7, #16]
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	617b      	str	r3, [r7, #20]
	while (i < 11) {		/* Copy name body and extension */
 8009d72:	e021      	b.n	8009db8 <get_fileinfo+0x66>
		c = (TCHAR)dp->dir[i++];
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a1a      	ldr	r2, [r3, #32]
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	1c59      	adds	r1, r3, #1
 8009d7c:	6179      	str	r1, [r7, #20]
 8009d7e:	4413      	add	r3, r2
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	73fb      	strb	r3, [r7, #15]
		if (c == ' ') continue;				/* Skip padding spaces */
 8009d84:	7bfb      	ldrb	r3, [r7, #15]
 8009d86:	2b20      	cmp	r3, #32
 8009d88:	d100      	bne.n	8009d8c <get_fileinfo+0x3a>
 8009d8a:	e015      	b.n	8009db8 <get_fileinfo+0x66>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8009d8c:	7bfb      	ldrb	r3, [r7, #15]
 8009d8e:	2b05      	cmp	r3, #5
 8009d90:	d101      	bne.n	8009d96 <get_fileinfo+0x44>
 8009d92:	23e5      	movs	r3, #229	; 0xe5
 8009d94:	73fb      	strb	r3, [r7, #15]
		if (i == 9) fno->fname[j++] = '.';	/* Insert a . if extension is exist */
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2b09      	cmp	r3, #9
 8009d9a:	d106      	bne.n	8009daa <get_fileinfo+0x58>
 8009d9c:	693b      	ldr	r3, [r7, #16]
 8009d9e:	1c5a      	adds	r2, r3, #1
 8009da0:	613a      	str	r2, [r7, #16]
 8009da2:	683a      	ldr	r2, [r7, #0]
 8009da4:	4413      	add	r3, r2
 8009da6:	222e      	movs	r2, #46	; 0x2e
 8009da8:	725a      	strb	r2, [r3, #9]
		fno->fname[j++] = c;
 8009daa:	693b      	ldr	r3, [r7, #16]
 8009dac:	1c5a      	adds	r2, r3, #1
 8009dae:	613a      	str	r2, [r7, #16]
 8009db0:	683a      	ldr	r2, [r7, #0]
 8009db2:	4413      	add	r3, r2
 8009db4:	7bfa      	ldrb	r2, [r7, #15]
 8009db6:	725a      	strb	r2, [r3, #9]
	while (i < 11) {		/* Copy name body and extension */
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	2b0a      	cmp	r3, #10
 8009dbc:	d9da      	bls.n	8009d74 <get_fileinfo+0x22>
	}
	fno->fname[j] = 0;
 8009dbe:	683a      	ldr	r2, [r7, #0]
 8009dc0:	693b      	ldr	r3, [r7, #16]
 8009dc2:	4413      	add	r3, r2
 8009dc4:	3309      	adds	r3, #9
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	701a      	strb	r2, [r3, #0]
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	6a1b      	ldr	r3, [r3, #32]
 8009dce:	7ada      	ldrb	r2, [r3, #11]
 8009dd0:	683b      	ldr	r3, [r7, #0]
 8009dd2:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	6a1b      	ldr	r3, [r3, #32]
 8009dd8:	331c      	adds	r3, #28
 8009dda:	4618      	mov	r0, r3
 8009ddc:	f7fe fedc 	bl	8008b98 <ld_dword>
 8009de0:	4602      	mov	r2, r0
 8009de2:	683b      	ldr	r3, [r7, #0]
 8009de4:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	6a1b      	ldr	r3, [r3, #32]
 8009dea:	3316      	adds	r3, #22
 8009dec:	4618      	mov	r0, r3
 8009dee:	f7fe fed3 	bl	8008b98 <ld_dword>
 8009df2:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	b29a      	uxth	r2, r3
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	80da      	strh	r2, [r3, #6]
 8009dfc:	68bb      	ldr	r3, [r7, #8]
 8009dfe:	0c1b      	lsrs	r3, r3, #16
 8009e00:	b29a      	uxth	r2, r3
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	809a      	strh	r2, [r3, #4]
 8009e06:	e000      	b.n	8009e0a <get_fileinfo+0xb8>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 8009e08:	bf00      	nop
}
 8009e0a:	3718      	adds	r7, #24
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	bd80      	pop	{r7, pc}

08009e10 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8009e10:	b580      	push	{r7, lr}
 8009e12:	b088      	sub	sp, #32
 8009e14:	af00      	add	r7, sp, #0
 8009e16:	6078      	str	r0, [r7, #4]
 8009e18:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 8009e1a:	683b      	ldr	r3, [r7, #0]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	60fb      	str	r3, [r7, #12]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	3324      	adds	r3, #36	; 0x24
 8009e24:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8009e26:	220b      	movs	r2, #11
 8009e28:	2120      	movs	r1, #32
 8009e2a:	68b8      	ldr	r0, [r7, #8]
 8009e2c:	f7fe ff3f 	bl	8008cae <mem_set>
	si = i = 0; ni = 8;
 8009e30:	2300      	movs	r3, #0
 8009e32:	613b      	str	r3, [r7, #16]
 8009e34:	693b      	ldr	r3, [r7, #16]
 8009e36:	617b      	str	r3, [r7, #20]
 8009e38:	2308      	movs	r3, #8
 8009e3a:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	1c5a      	adds	r2, r3, #1
 8009e40:	617a      	str	r2, [r7, #20]
 8009e42:	68fa      	ldr	r2, [r7, #12]
 8009e44:	4413      	add	r3, r2
 8009e46:	781b      	ldrb	r3, [r3, #0]
 8009e48:	77fb      	strb	r3, [r7, #31]
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009e4a:	7ffb      	ldrb	r3, [r7, #31]
 8009e4c:	2b20      	cmp	r3, #32
 8009e4e:	d94e      	bls.n	8009eee <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 8009e50:	7ffb      	ldrb	r3, [r7, #31]
 8009e52:	2b2f      	cmp	r3, #47	; 0x2f
 8009e54:	d006      	beq.n	8009e64 <create_name+0x54>
 8009e56:	7ffb      	ldrb	r3, [r7, #31]
 8009e58:	2b5c      	cmp	r3, #92	; 0x5c
 8009e5a:	d110      	bne.n	8009e7e <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8009e5c:	e002      	b.n	8009e64 <create_name+0x54>
 8009e5e:	697b      	ldr	r3, [r7, #20]
 8009e60:	3301      	adds	r3, #1
 8009e62:	617b      	str	r3, [r7, #20]
 8009e64:	68fa      	ldr	r2, [r7, #12]
 8009e66:	697b      	ldr	r3, [r7, #20]
 8009e68:	4413      	add	r3, r2
 8009e6a:	781b      	ldrb	r3, [r3, #0]
 8009e6c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e6e:	d0f6      	beq.n	8009e5e <create_name+0x4e>
 8009e70:	68fa      	ldr	r2, [r7, #12]
 8009e72:	697b      	ldr	r3, [r7, #20]
 8009e74:	4413      	add	r3, r2
 8009e76:	781b      	ldrb	r3, [r3, #0]
 8009e78:	2b5c      	cmp	r3, #92	; 0x5c
 8009e7a:	d0f0      	beq.n	8009e5e <create_name+0x4e>
			break;
 8009e7c:	e038      	b.n	8009ef0 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8009e7e:	7ffb      	ldrb	r3, [r7, #31]
 8009e80:	2b2e      	cmp	r3, #46	; 0x2e
 8009e82:	d003      	beq.n	8009e8c <create_name+0x7c>
 8009e84:	693a      	ldr	r2, [r7, #16]
 8009e86:	69bb      	ldr	r3, [r7, #24]
 8009e88:	429a      	cmp	r2, r3
 8009e8a:	d30c      	bcc.n	8009ea6 <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	2b0b      	cmp	r3, #11
 8009e90:	d002      	beq.n	8009e98 <create_name+0x88>
 8009e92:	7ffb      	ldrb	r3, [r7, #31]
 8009e94:	2b2e      	cmp	r3, #46	; 0x2e
 8009e96:	d001      	beq.n	8009e9c <create_name+0x8c>
 8009e98:	2306      	movs	r3, #6
 8009e9a:	e044      	b.n	8009f26 <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8009e9c:	2308      	movs	r3, #8
 8009e9e:	613b      	str	r3, [r7, #16]
 8009ea0:	230b      	movs	r3, #11
 8009ea2:	61bb      	str	r3, [r7, #24]
			continue;
 8009ea4:	e022      	b.n	8009eec <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 8009ea6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	da04      	bge.n	8009eb8 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8009eae:	7ffb      	ldrb	r3, [r7, #31]
 8009eb0:	3b80      	subs	r3, #128	; 0x80
 8009eb2:	4a1f      	ldr	r2, [pc, #124]	; (8009f30 <create_name+0x120>)
 8009eb4:	5cd3      	ldrb	r3, [r2, r3]
 8009eb6:	77fb      	strb	r3, [r7, #31]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 8009eb8:	7ffb      	ldrb	r3, [r7, #31]
 8009eba:	4619      	mov	r1, r3
 8009ebc:	481d      	ldr	r0, [pc, #116]	; (8009f34 <create_name+0x124>)
 8009ebe:	f7fe ff37 	bl	8008d30 <chk_chr>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	2b00      	cmp	r3, #0
 8009ec6:	d001      	beq.n	8009ecc <create_name+0xbc>
 8009ec8:	2306      	movs	r3, #6
 8009eca:	e02c      	b.n	8009f26 <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8009ecc:	7ffb      	ldrb	r3, [r7, #31]
 8009ece:	2b60      	cmp	r3, #96	; 0x60
 8009ed0:	d905      	bls.n	8009ede <create_name+0xce>
 8009ed2:	7ffb      	ldrb	r3, [r7, #31]
 8009ed4:	2b7a      	cmp	r3, #122	; 0x7a
 8009ed6:	d802      	bhi.n	8009ede <create_name+0xce>
 8009ed8:	7ffb      	ldrb	r3, [r7, #31]
 8009eda:	3b20      	subs	r3, #32
 8009edc:	77fb      	strb	r3, [r7, #31]
			sfn[i++] = c;
 8009ede:	693b      	ldr	r3, [r7, #16]
 8009ee0:	1c5a      	adds	r2, r3, #1
 8009ee2:	613a      	str	r2, [r7, #16]
 8009ee4:	68ba      	ldr	r2, [r7, #8]
 8009ee6:	4413      	add	r3, r2
 8009ee8:	7ffa      	ldrb	r2, [r7, #31]
 8009eea:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8009eec:	e7a6      	b.n	8009e3c <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8009eee:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8009ef0:	68fa      	ldr	r2, [r7, #12]
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	441a      	add	r2, r3
 8009ef6:	683b      	ldr	r3, [r7, #0]
 8009ef8:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 8009efa:	693b      	ldr	r3, [r7, #16]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <create_name+0xf4>
 8009f00:	2306      	movs	r3, #6
 8009f02:	e010      	b.n	8009f26 <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	2be5      	cmp	r3, #229	; 0xe5
 8009f0a:	d102      	bne.n	8009f12 <create_name+0x102>
 8009f0c:	68bb      	ldr	r3, [r7, #8]
 8009f0e:	2205      	movs	r2, #5
 8009f10:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8009f12:	7ffb      	ldrb	r3, [r7, #31]
 8009f14:	2b20      	cmp	r3, #32
 8009f16:	d801      	bhi.n	8009f1c <create_name+0x10c>
 8009f18:	2204      	movs	r2, #4
 8009f1a:	e000      	b.n	8009f1e <create_name+0x10e>
 8009f1c:	2200      	movs	r2, #0
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	330b      	adds	r3, #11
 8009f22:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8009f24:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3720      	adds	r7, #32
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	0800c670 	.word	0x0800c670
 8009f34:	0800c5cc 	.word	0x0800c5cc

08009f38 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b086      	sub	sp, #24
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8009f46:	693b      	ldr	r3, [r7, #16]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8009f4c:	e002      	b.n	8009f54 <follow_path+0x1c>
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	3301      	adds	r3, #1
 8009f52:	603b      	str	r3, [r7, #0]
 8009f54:	683b      	ldr	r3, [r7, #0]
 8009f56:	781b      	ldrb	r3, [r3, #0]
 8009f58:	2b2f      	cmp	r3, #47	; 0x2f
 8009f5a:	d0f8      	beq.n	8009f4e <follow_path+0x16>
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	2b5c      	cmp	r3, #92	; 0x5c
 8009f62:	d0f4      	beq.n	8009f4e <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8009f64:	693b      	ldr	r3, [r7, #16]
 8009f66:	2200      	movs	r2, #0
 8009f68:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8009f6a:	683b      	ldr	r3, [r7, #0]
 8009f6c:	781b      	ldrb	r3, [r3, #0]
 8009f6e:	2b1f      	cmp	r3, #31
 8009f70:	d80a      	bhi.n	8009f88 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	2280      	movs	r2, #128	; 0x80
 8009f76:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8009f7a:	2100      	movs	r1, #0
 8009f7c:	6878      	ldr	r0, [r7, #4]
 8009f7e:	f7ff fc7c 	bl	800987a <dir_sdi>
 8009f82:	4603      	mov	r3, r0
 8009f84:	75fb      	strb	r3, [r7, #23]
 8009f86:	e048      	b.n	800a01a <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8009f88:	463b      	mov	r3, r7
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f7ff ff3f 	bl	8009e10 <create_name>
 8009f92:	4603      	mov	r3, r0
 8009f94:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8009f96:	7dfb      	ldrb	r3, [r7, #23]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d139      	bne.n	800a010 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f7ff fe51 	bl	8009c44 <dir_find>
 8009fa2:	4603      	mov	r3, r0
 8009fa4:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8009fac:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8009fae:	7dfb      	ldrb	r3, [r7, #23]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d00a      	beq.n	8009fca <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8009fb4:	7dfb      	ldrb	r3, [r7, #23]
 8009fb6:	2b04      	cmp	r3, #4
 8009fb8:	d12c      	bne.n	800a014 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8009fba:	7afb      	ldrb	r3, [r7, #11]
 8009fbc:	f003 0304 	and.w	r3, r3, #4
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d127      	bne.n	800a014 <follow_path+0xdc>
 8009fc4:	2305      	movs	r3, #5
 8009fc6:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8009fc8:	e024      	b.n	800a014 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8009fca:	7afb      	ldrb	r3, [r7, #11]
 8009fcc:	f003 0304 	and.w	r3, r3, #4
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d121      	bne.n	800a018 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8009fd4:	693b      	ldr	r3, [r7, #16]
 8009fd6:	799b      	ldrb	r3, [r3, #6]
 8009fd8:	f003 0310 	and.w	r3, r3, #16
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d102      	bne.n	8009fe6 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8009fe0:	2305      	movs	r3, #5
 8009fe2:	75fb      	strb	r3, [r7, #23]
 8009fe4:	e019      	b.n	800a01a <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	695b      	ldr	r3, [r3, #20]
 8009ff0:	68fa      	ldr	r2, [r7, #12]
 8009ff2:	8992      	ldrh	r2, [r2, #12]
 8009ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8009ff8:	fb02 f200 	mul.w	r2, r2, r0
 8009ffc:	1a9b      	subs	r3, r3, r2
 8009ffe:	440b      	add	r3, r1
 800a000:	4619      	mov	r1, r3
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f7ff fddf 	bl	8009bc6 <ld_clust>
 800a008:	4602      	mov	r2, r0
 800a00a:	693b      	ldr	r3, [r7, #16]
 800a00c:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800a00e:	e7bb      	b.n	8009f88 <follow_path+0x50>
			if (res != FR_OK) break;
 800a010:	bf00      	nop
 800a012:	e002      	b.n	800a01a <follow_path+0xe2>
				break;
 800a014:	bf00      	nop
 800a016:	e000      	b.n	800a01a <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800a018:	bf00      	nop
			}
		}
	}

	return res;
 800a01a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a01c:	4618      	mov	r0, r3
 800a01e:	3718      	adds	r7, #24
 800a020:	46bd      	mov	sp, r7
 800a022:	bd80      	pop	{r7, pc}

0800a024 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800a02c:	f04f 33ff 	mov.w	r3, #4294967295
 800a030:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	681b      	ldr	r3, [r3, #0]
 800a036:	2b00      	cmp	r3, #0
 800a038:	d031      	beq.n	800a09e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	617b      	str	r3, [r7, #20]
 800a040:	e002      	b.n	800a048 <get_ldnumber+0x24>
 800a042:	697b      	ldr	r3, [r7, #20]
 800a044:	3301      	adds	r3, #1
 800a046:	617b      	str	r3, [r7, #20]
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	781b      	ldrb	r3, [r3, #0]
 800a04c:	2b20      	cmp	r3, #32
 800a04e:	d903      	bls.n	800a058 <get_ldnumber+0x34>
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	781b      	ldrb	r3, [r3, #0]
 800a054:	2b3a      	cmp	r3, #58	; 0x3a
 800a056:	d1f4      	bne.n	800a042 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800a058:	697b      	ldr	r3, [r7, #20]
 800a05a:	781b      	ldrb	r3, [r3, #0]
 800a05c:	2b3a      	cmp	r3, #58	; 0x3a
 800a05e:	d11c      	bne.n	800a09a <get_ldnumber+0x76>
			tp = *path;
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	1c5a      	adds	r2, r3, #1
 800a06a:	60fa      	str	r2, [r7, #12]
 800a06c:	781b      	ldrb	r3, [r3, #0]
 800a06e:	3b30      	subs	r3, #48	; 0x30
 800a070:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800a072:	68bb      	ldr	r3, [r7, #8]
 800a074:	2b09      	cmp	r3, #9
 800a076:	d80e      	bhi.n	800a096 <get_ldnumber+0x72>
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	429a      	cmp	r2, r3
 800a07e:	d10a      	bne.n	800a096 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800a080:	68bb      	ldr	r3, [r7, #8]
 800a082:	2b00      	cmp	r3, #0
 800a084:	d107      	bne.n	800a096 <get_ldnumber+0x72>
					vol = (int)i;
 800a086:	68bb      	ldr	r3, [r7, #8]
 800a088:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	3301      	adds	r3, #1
 800a08e:	617b      	str	r3, [r7, #20]
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	697a      	ldr	r2, [r7, #20]
 800a094:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800a096:	693b      	ldr	r3, [r7, #16]
 800a098:	e002      	b.n	800a0a0 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800a09a:	2300      	movs	r3, #0
 800a09c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800a09e:	693b      	ldr	r3, [r7, #16]
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	371c      	adds	r7, #28
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b082      	sub	sp, #8
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	70da      	strb	r2, [r3, #3]
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f04f 32ff 	mov.w	r2, #4294967295
 800a0c2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800a0c4:	6839      	ldr	r1, [r7, #0]
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f7fe fffe 	bl	80090c8 <move_window>
 800a0cc:	4603      	mov	r3, r0
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <check_fs+0x2a>
 800a0d2:	2304      	movs	r3, #4
 800a0d4:	e038      	b.n	800a148 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	3334      	adds	r3, #52	; 0x34
 800a0da:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a0de:	4618      	mov	r0, r3
 800a0e0:	f7fe fd42 	bl	8008b68 <ld_word>
 800a0e4:	4603      	mov	r3, r0
 800a0e6:	461a      	mov	r2, r3
 800a0e8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a0ec:	429a      	cmp	r2, r3
 800a0ee:	d001      	beq.n	800a0f4 <check_fs+0x48>
 800a0f0:	2303      	movs	r3, #3
 800a0f2:	e029      	b.n	800a148 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a0fa:	2be9      	cmp	r3, #233	; 0xe9
 800a0fc:	d009      	beq.n	800a112 <check_fs+0x66>
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800a104:	2beb      	cmp	r3, #235	; 0xeb
 800a106:	d11e      	bne.n	800a146 <check_fs+0x9a>
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800a10e:	2b90      	cmp	r3, #144	; 0x90
 800a110:	d119      	bne.n	800a146 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	3334      	adds	r3, #52	; 0x34
 800a116:	3336      	adds	r3, #54	; 0x36
 800a118:	4618      	mov	r0, r3
 800a11a:	f7fe fd3d 	bl	8008b98 <ld_dword>
 800a11e:	4603      	mov	r3, r0
 800a120:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800a124:	4a0a      	ldr	r2, [pc, #40]	; (800a150 <check_fs+0xa4>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d101      	bne.n	800a12e <check_fs+0x82>
 800a12a:	2300      	movs	r3, #0
 800a12c:	e00c      	b.n	800a148 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	3334      	adds	r3, #52	; 0x34
 800a132:	3352      	adds	r3, #82	; 0x52
 800a134:	4618      	mov	r0, r3
 800a136:	f7fe fd2f 	bl	8008b98 <ld_dword>
 800a13a:	4602      	mov	r2, r0
 800a13c:	4b05      	ldr	r3, [pc, #20]	; (800a154 <check_fs+0xa8>)
 800a13e:	429a      	cmp	r2, r3
 800a140:	d101      	bne.n	800a146 <check_fs+0x9a>
 800a142:	2300      	movs	r3, #0
 800a144:	e000      	b.n	800a148 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800a146:	2302      	movs	r3, #2
}
 800a148:	4618      	mov	r0, r3
 800a14a:	3708      	adds	r7, #8
 800a14c:	46bd      	mov	sp, r7
 800a14e:	bd80      	pop	{r7, pc}
 800a150:	00544146 	.word	0x00544146
 800a154:	33544146 	.word	0x33544146

0800a158 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b096      	sub	sp, #88	; 0x58
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	60b9      	str	r1, [r7, #8]
 800a162:	4613      	mov	r3, r2
 800a164:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	2200      	movs	r2, #0
 800a16a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800a16c:	68f8      	ldr	r0, [r7, #12]
 800a16e:	f7ff ff59 	bl	800a024 <get_ldnumber>
 800a172:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800a174:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a176:	2b00      	cmp	r3, #0
 800a178:	da01      	bge.n	800a17e <find_volume+0x26>
 800a17a:	230b      	movs	r3, #11
 800a17c:	e265      	b.n	800a64a <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800a17e:	4ab0      	ldr	r2, [pc, #704]	; (800a440 <find_volume+0x2e8>)
 800a180:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a186:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800a188:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d101      	bne.n	800a192 <find_volume+0x3a>
 800a18e:	230c      	movs	r3, #12
 800a190:	e25b      	b.n	800a64a <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a196:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800a198:	79fb      	ldrb	r3, [r7, #7]
 800a19a:	f023 0301 	bic.w	r3, r3, #1
 800a19e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800a1a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1a2:	781b      	ldrb	r3, [r3, #0]
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d01a      	beq.n	800a1de <find_volume+0x86>
		stat = disk_status(fs->drv);
 800a1a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1aa:	785b      	ldrb	r3, [r3, #1]
 800a1ac:	4618      	mov	r0, r3
 800a1ae:	f7fe fc3d 	bl	8008a2c <disk_status>
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800a1b8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1bc:	f003 0301 	and.w	r3, r3, #1
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d10c      	bne.n	800a1de <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800a1c4:	79fb      	ldrb	r3, [r7, #7]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d007      	beq.n	800a1da <find_volume+0x82>
 800a1ca:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a1ce:	f003 0304 	and.w	r3, r3, #4
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d001      	beq.n	800a1da <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800a1d6:	230a      	movs	r3, #10
 800a1d8:	e237      	b.n	800a64a <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 800a1da:	2300      	movs	r3, #0
 800a1dc:	e235      	b.n	800a64a <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800a1de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800a1e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1e6:	b2da      	uxtb	r2, r3
 800a1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ea:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800a1ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1ee:	785b      	ldrb	r3, [r3, #1]
 800a1f0:	4618      	mov	r0, r3
 800a1f2:	f7fe fc35 	bl	8008a60 <disk_initialize>
 800a1f6:	4603      	mov	r3, r0
 800a1f8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800a1fc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a200:	f003 0301 	and.w	r3, r3, #1
 800a204:	2b00      	cmp	r3, #0
 800a206:	d001      	beq.n	800a20c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800a208:	2303      	movs	r3, #3
 800a20a:	e21e      	b.n	800a64a <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800a20c:	79fb      	ldrb	r3, [r7, #7]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d007      	beq.n	800a222 <find_volume+0xca>
 800a212:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	d001      	beq.n	800a222 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800a21e:	230a      	movs	r3, #10
 800a220:	e213      	b.n	800a64a <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 800a222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a224:	7858      	ldrb	r0, [r3, #1]
 800a226:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a228:	330c      	adds	r3, #12
 800a22a:	461a      	mov	r2, r3
 800a22c:	2102      	movs	r1, #2
 800a22e:	f7fe fc7d 	bl	8008b2c <disk_ioctl>
 800a232:	4603      	mov	r3, r0
 800a234:	2b00      	cmp	r3, #0
 800a236:	d001      	beq.n	800a23c <find_volume+0xe4>
 800a238:	2301      	movs	r3, #1
 800a23a:	e206      	b.n	800a64a <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 800a23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a23e:	899b      	ldrh	r3, [r3, #12]
 800a240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a244:	d80d      	bhi.n	800a262 <find_volume+0x10a>
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	899b      	ldrh	r3, [r3, #12]
 800a24a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a24e:	d308      	bcc.n	800a262 <find_volume+0x10a>
 800a250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a252:	899b      	ldrh	r3, [r3, #12]
 800a254:	461a      	mov	r2, r3
 800a256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a258:	899b      	ldrh	r3, [r3, #12]
 800a25a:	3b01      	subs	r3, #1
 800a25c:	4013      	ands	r3, r2
 800a25e:	2b00      	cmp	r3, #0
 800a260:	d001      	beq.n	800a266 <find_volume+0x10e>
 800a262:	2301      	movs	r3, #1
 800a264:	e1f1      	b.n	800a64a <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800a266:	2300      	movs	r3, #0
 800a268:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800a26a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a26c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a26e:	f7ff ff1d 	bl	800a0ac <check_fs>
 800a272:	4603      	mov	r3, r0
 800a274:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800a278:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a27c:	2b02      	cmp	r3, #2
 800a27e:	d14b      	bne.n	800a318 <find_volume+0x1c0>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a280:	2300      	movs	r3, #0
 800a282:	643b      	str	r3, [r7, #64]	; 0x40
 800a284:	e01f      	b.n	800a2c6 <find_volume+0x16e>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800a286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a288:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800a28c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a28e:	011b      	lsls	r3, r3, #4
 800a290:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800a294:	4413      	add	r3, r2
 800a296:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800a298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a29a:	3304      	adds	r3, #4
 800a29c:	781b      	ldrb	r3, [r3, #0]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d006      	beq.n	800a2b0 <find_volume+0x158>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2a4:	3308      	adds	r3, #8
 800a2a6:	4618      	mov	r0, r3
 800a2a8:	f7fe fc76 	bl	8008b98 <ld_dword>
 800a2ac:	4602      	mov	r2, r0
 800a2ae:	e000      	b.n	800a2b2 <find_volume+0x15a>
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2b4:	009b      	lsls	r3, r3, #2
 800a2b6:	f107 0158 	add.w	r1, r7, #88	; 0x58
 800a2ba:	440b      	add	r3, r1
 800a2bc:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800a2c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c2:	3301      	adds	r3, #1
 800a2c4:	643b      	str	r3, [r7, #64]	; 0x40
 800a2c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2c8:	2b03      	cmp	r3, #3
 800a2ca:	d9dc      	bls.n	800a286 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800a2d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d002      	beq.n	800a2dc <find_volume+0x184>
 800a2d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2d8:	3b01      	subs	r3, #1
 800a2da:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800a2dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a2de:	009b      	lsls	r3, r3, #2
 800a2e0:	f107 0258 	add.w	r2, r7, #88	; 0x58
 800a2e4:	4413      	add	r3, r2
 800a2e6:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800a2ea:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800a2ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a2ee:	2b00      	cmp	r3, #0
 800a2f0:	d005      	beq.n	800a2fe <find_volume+0x1a6>
 800a2f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a2f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a2f6:	f7ff fed9 	bl	800a0ac <check_fs>
 800a2fa:	4603      	mov	r3, r0
 800a2fc:	e000      	b.n	800a300 <find_volume+0x1a8>
 800a2fe:	2303      	movs	r3, #3
 800a300:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800a304:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d905      	bls.n	800a318 <find_volume+0x1c0>
 800a30c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a30e:	3301      	adds	r3, #1
 800a310:	643b      	str	r3, [r7, #64]	; 0x40
 800a312:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a314:	2b03      	cmp	r3, #3
 800a316:	d9e1      	bls.n	800a2dc <find_volume+0x184>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800a318:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a31c:	2b04      	cmp	r3, #4
 800a31e:	d101      	bne.n	800a324 <find_volume+0x1cc>
 800a320:	2301      	movs	r3, #1
 800a322:	e192      	b.n	800a64a <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800a324:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a328:	2b01      	cmp	r3, #1
 800a32a:	d901      	bls.n	800a330 <find_volume+0x1d8>
 800a32c:	230d      	movs	r3, #13
 800a32e:	e18c      	b.n	800a64a <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800a330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a332:	3334      	adds	r3, #52	; 0x34
 800a334:	330b      	adds	r3, #11
 800a336:	4618      	mov	r0, r3
 800a338:	f7fe fc16 	bl	8008b68 <ld_word>
 800a33c:	4603      	mov	r3, r0
 800a33e:	461a      	mov	r2, r3
 800a340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a342:	899b      	ldrh	r3, [r3, #12]
 800a344:	429a      	cmp	r2, r3
 800a346:	d001      	beq.n	800a34c <find_volume+0x1f4>
 800a348:	230d      	movs	r3, #13
 800a34a:	e17e      	b.n	800a64a <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800a34c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a34e:	3334      	adds	r3, #52	; 0x34
 800a350:	3316      	adds	r3, #22
 800a352:	4618      	mov	r0, r3
 800a354:	f7fe fc08 	bl	8008b68 <ld_word>
 800a358:	4603      	mov	r3, r0
 800a35a:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800a35c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d106      	bne.n	800a370 <find_volume+0x218>
 800a362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a364:	3334      	adds	r3, #52	; 0x34
 800a366:	3324      	adds	r3, #36	; 0x24
 800a368:	4618      	mov	r0, r3
 800a36a:	f7fe fc15 	bl	8008b98 <ld_dword>
 800a36e:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800a370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a372:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a374:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800a376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a378:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800a37c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a37e:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800a380:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a382:	789b      	ldrb	r3, [r3, #2]
 800a384:	2b01      	cmp	r3, #1
 800a386:	d005      	beq.n	800a394 <find_volume+0x23c>
 800a388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a38a:	789b      	ldrb	r3, [r3, #2]
 800a38c:	2b02      	cmp	r3, #2
 800a38e:	d001      	beq.n	800a394 <find_volume+0x23c>
 800a390:	230d      	movs	r3, #13
 800a392:	e15a      	b.n	800a64a <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800a394:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a396:	789b      	ldrb	r3, [r3, #2]
 800a398:	461a      	mov	r2, r3
 800a39a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a39c:	fb02 f303 	mul.w	r3, r2, r3
 800a3a0:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800a3a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800a3a8:	b29a      	uxth	r2, r3
 800a3aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ac:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	895b      	ldrh	r3, [r3, #10]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d008      	beq.n	800a3c8 <find_volume+0x270>
 800a3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b8:	895b      	ldrh	r3, [r3, #10]
 800a3ba:	461a      	mov	r2, r3
 800a3bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3be:	895b      	ldrh	r3, [r3, #10]
 800a3c0:	3b01      	subs	r3, #1
 800a3c2:	4013      	ands	r3, r2
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d001      	beq.n	800a3cc <find_volume+0x274>
 800a3c8:	230d      	movs	r3, #13
 800a3ca:	e13e      	b.n	800a64a <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800a3cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ce:	3334      	adds	r3, #52	; 0x34
 800a3d0:	3311      	adds	r3, #17
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7fe fbc8 	bl	8008b68 <ld_word>
 800a3d8:	4603      	mov	r3, r0
 800a3da:	461a      	mov	r2, r3
 800a3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3de:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800a3e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e2:	891b      	ldrh	r3, [r3, #8]
 800a3e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a3e6:	8992      	ldrh	r2, [r2, #12]
 800a3e8:	0952      	lsrs	r2, r2, #5
 800a3ea:	b292      	uxth	r2, r2
 800a3ec:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3f0:	fb02 f201 	mul.w	r2, r2, r1
 800a3f4:	1a9b      	subs	r3, r3, r2
 800a3f6:	b29b      	uxth	r3, r3
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <find_volume+0x2a8>
 800a3fc:	230d      	movs	r3, #13
 800a3fe:	e124      	b.n	800a64a <find_volume+0x4f2>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800a400:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a402:	3334      	adds	r3, #52	; 0x34
 800a404:	3313      	adds	r3, #19
 800a406:	4618      	mov	r0, r3
 800a408:	f7fe fbae 	bl	8008b68 <ld_word>
 800a40c:	4603      	mov	r3, r0
 800a40e:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800a410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a412:	2b00      	cmp	r3, #0
 800a414:	d106      	bne.n	800a424 <find_volume+0x2cc>
 800a416:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a418:	3334      	adds	r3, #52	; 0x34
 800a41a:	3320      	adds	r3, #32
 800a41c:	4618      	mov	r0, r3
 800a41e:	f7fe fbbb 	bl	8008b98 <ld_dword>
 800a422:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800a424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a426:	3334      	adds	r3, #52	; 0x34
 800a428:	330e      	adds	r3, #14
 800a42a:	4618      	mov	r0, r3
 800a42c:	f7fe fb9c 	bl	8008b68 <ld_word>
 800a430:	4603      	mov	r3, r0
 800a432:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800a434:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a436:	2b00      	cmp	r3, #0
 800a438:	d104      	bne.n	800a444 <find_volume+0x2ec>
 800a43a:	230d      	movs	r3, #13
 800a43c:	e105      	b.n	800a64a <find_volume+0x4f2>
 800a43e:	bf00      	nop
 800a440:	200000b4 	.word	0x200000b4

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800a444:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a446:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a448:	4413      	add	r3, r2
 800a44a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a44c:	8911      	ldrh	r1, [r2, #8]
 800a44e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a450:	8992      	ldrh	r2, [r2, #12]
 800a452:	0952      	lsrs	r2, r2, #5
 800a454:	b292      	uxth	r2, r2
 800a456:	fbb1 f2f2 	udiv	r2, r1, r2
 800a45a:	b292      	uxth	r2, r2
 800a45c:	4413      	add	r3, r2
 800a45e:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800a460:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a464:	429a      	cmp	r2, r3
 800a466:	d201      	bcs.n	800a46c <find_volume+0x314>
 800a468:	230d      	movs	r3, #13
 800a46a:	e0ee      	b.n	800a64a <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800a46c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a46e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a470:	1ad3      	subs	r3, r2, r3
 800a472:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a474:	8952      	ldrh	r2, [r2, #10]
 800a476:	fbb3 f3f2 	udiv	r3, r3, r2
 800a47a:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800a47c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d101      	bne.n	800a486 <find_volume+0x32e>
 800a482:	230d      	movs	r3, #13
 800a484:	e0e1      	b.n	800a64a <find_volume+0x4f2>
		fmt = FS_FAT32;
 800a486:	2303      	movs	r3, #3
 800a488:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800a48c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a48e:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800a492:	4293      	cmp	r3, r2
 800a494:	d802      	bhi.n	800a49c <find_volume+0x344>
 800a496:	2302      	movs	r3, #2
 800a498:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800a49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49e:	f640 72f5 	movw	r2, #4085	; 0xff5
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d802      	bhi.n	800a4ac <find_volume+0x354>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800a4ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4ae:	1c9a      	adds	r2, r3, #2
 800a4b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b2:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 800a4b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4b8:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800a4ba:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800a4bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a4be:	441a      	add	r2, r3
 800a4c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4c2:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 800a4c4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800a4c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4c8:	441a      	add	r2, r3
 800a4ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4cc:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800a4ce:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d11e      	bne.n	800a514 <find_volume+0x3bc>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800a4d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4d8:	3334      	adds	r3, #52	; 0x34
 800a4da:	332a      	adds	r3, #42	; 0x2a
 800a4dc:	4618      	mov	r0, r3
 800a4de:	f7fe fb43 	bl	8008b68 <ld_word>
 800a4e2:	4603      	mov	r3, r0
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d001      	beq.n	800a4ec <find_volume+0x394>
 800a4e8:	230d      	movs	r3, #13
 800a4ea:	e0ae      	b.n	800a64a <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800a4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4ee:	891b      	ldrh	r3, [r3, #8]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d001      	beq.n	800a4f8 <find_volume+0x3a0>
 800a4f4:	230d      	movs	r3, #13
 800a4f6:	e0a8      	b.n	800a64a <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800a4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a4fa:	3334      	adds	r3, #52	; 0x34
 800a4fc:	332c      	adds	r3, #44	; 0x2c
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fb4a 	bl	8008b98 <ld_dword>
 800a504:	4602      	mov	r2, r0
 800a506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a508:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800a50a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a50c:	699b      	ldr	r3, [r3, #24]
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	647b      	str	r3, [r7, #68]	; 0x44
 800a512:	e01f      	b.n	800a554 <find_volume+0x3fc>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800a514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a516:	891b      	ldrh	r3, [r3, #8]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <find_volume+0x3c8>
 800a51c:	230d      	movs	r3, #13
 800a51e:	e094      	b.n	800a64a <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800a520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a522:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a524:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a526:	441a      	add	r2, r3
 800a528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a52a:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800a52c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a530:	2b02      	cmp	r3, #2
 800a532:	d103      	bne.n	800a53c <find_volume+0x3e4>
 800a534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a536:	699b      	ldr	r3, [r3, #24]
 800a538:	005b      	lsls	r3, r3, #1
 800a53a:	e00a      	b.n	800a552 <find_volume+0x3fa>
 800a53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a53e:	699a      	ldr	r2, [r3, #24]
 800a540:	4613      	mov	r3, r2
 800a542:	005b      	lsls	r3, r3, #1
 800a544:	4413      	add	r3, r2
 800a546:	085a      	lsrs	r2, r3, #1
 800a548:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a54a:	699b      	ldr	r3, [r3, #24]
 800a54c:	f003 0301 	and.w	r3, r3, #1
 800a550:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800a552:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800a554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a556:	69da      	ldr	r2, [r3, #28]
 800a558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a55a:	899b      	ldrh	r3, [r3, #12]
 800a55c:	4619      	mov	r1, r3
 800a55e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a560:	440b      	add	r3, r1
 800a562:	3b01      	subs	r3, #1
 800a564:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800a566:	8989      	ldrh	r1, [r1, #12]
 800a568:	fbb3 f3f1 	udiv	r3, r3, r1
 800a56c:	429a      	cmp	r2, r3
 800a56e:	d201      	bcs.n	800a574 <find_volume+0x41c>
 800a570:	230d      	movs	r3, #13
 800a572:	e06a      	b.n	800a64a <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800a574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a576:	f04f 32ff 	mov.w	r2, #4294967295
 800a57a:	615a      	str	r2, [r3, #20]
 800a57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a57e:	695a      	ldr	r2, [r3, #20]
 800a580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a582:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 800a584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a586:	2280      	movs	r2, #128	; 0x80
 800a588:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800a58a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800a58e:	2b03      	cmp	r3, #3
 800a590:	d149      	bne.n	800a626 <find_volume+0x4ce>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800a592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a594:	3334      	adds	r3, #52	; 0x34
 800a596:	3330      	adds	r3, #48	; 0x30
 800a598:	4618      	mov	r0, r3
 800a59a:	f7fe fae5 	bl	8008b68 <ld_word>
 800a59e:	4603      	mov	r3, r0
 800a5a0:	2b01      	cmp	r3, #1
 800a5a2:	d140      	bne.n	800a626 <find_volume+0x4ce>
			&& move_window(fs, bsect + 1) == FR_OK)
 800a5a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	4619      	mov	r1, r3
 800a5aa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a5ac:	f7fe fd8c 	bl	80090c8 <move_window>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d137      	bne.n	800a626 <find_volume+0x4ce>
		{
			fs->fsi_flag = 0;
 800a5b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b8:	2200      	movs	r2, #0
 800a5ba:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800a5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5be:	3334      	adds	r3, #52	; 0x34
 800a5c0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800a5c4:	4618      	mov	r0, r3
 800a5c6:	f7fe facf 	bl	8008b68 <ld_word>
 800a5ca:	4603      	mov	r3, r0
 800a5cc:	461a      	mov	r2, r3
 800a5ce:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d127      	bne.n	800a626 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800a5d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5d8:	3334      	adds	r3, #52	; 0x34
 800a5da:	4618      	mov	r0, r3
 800a5dc:	f7fe fadc 	bl	8008b98 <ld_dword>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	4b1c      	ldr	r3, [pc, #112]	; (800a654 <find_volume+0x4fc>)
 800a5e4:	429a      	cmp	r2, r3
 800a5e6:	d11e      	bne.n	800a626 <find_volume+0x4ce>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800a5e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ea:	3334      	adds	r3, #52	; 0x34
 800a5ec:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800a5f0:	4618      	mov	r0, r3
 800a5f2:	f7fe fad1 	bl	8008b98 <ld_dword>
 800a5f6:	4602      	mov	r2, r0
 800a5f8:	4b17      	ldr	r3, [pc, #92]	; (800a658 <find_volume+0x500>)
 800a5fa:	429a      	cmp	r2, r3
 800a5fc:	d113      	bne.n	800a626 <find_volume+0x4ce>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800a5fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a600:	3334      	adds	r3, #52	; 0x34
 800a602:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800a606:	4618      	mov	r0, r3
 800a608:	f7fe fac6 	bl	8008b98 <ld_dword>
 800a60c:	4602      	mov	r2, r0
 800a60e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a610:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800a612:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a614:	3334      	adds	r3, #52	; 0x34
 800a616:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800a61a:	4618      	mov	r0, r3
 800a61c:	f7fe fabc 	bl	8008b98 <ld_dword>
 800a620:	4602      	mov	r2, r0
 800a622:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a624:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800a626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a628:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800a62c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800a62e:	4b0b      	ldr	r3, [pc, #44]	; (800a65c <find_volume+0x504>)
 800a630:	881b      	ldrh	r3, [r3, #0]
 800a632:	3301      	adds	r3, #1
 800a634:	b29a      	uxth	r2, r3
 800a636:	4b09      	ldr	r3, [pc, #36]	; (800a65c <find_volume+0x504>)
 800a638:	801a      	strh	r2, [r3, #0]
 800a63a:	4b08      	ldr	r3, [pc, #32]	; (800a65c <find_volume+0x504>)
 800a63c:	881a      	ldrh	r2, [r3, #0]
 800a63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a640:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800a642:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a644:	f7fe fcd8 	bl	8008ff8 <clear_lock>
#endif
	return FR_OK;
 800a648:	2300      	movs	r3, #0
}
 800a64a:	4618      	mov	r0, r3
 800a64c:	3758      	adds	r7, #88	; 0x58
 800a64e:	46bd      	mov	sp, r7
 800a650:	bd80      	pop	{r7, pc}
 800a652:	bf00      	nop
 800a654:	41615252 	.word	0x41615252
 800a658:	61417272 	.word	0x61417272
 800a65c:	200000b8 	.word	0x200000b8

0800a660 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800a660:	b580      	push	{r7, lr}
 800a662:	b084      	sub	sp, #16
 800a664:	af00      	add	r7, sp, #0
 800a666:	6078      	str	r0, [r7, #4]
 800a668:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800a66a:	2309      	movs	r3, #9
 800a66c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	2b00      	cmp	r3, #0
 800a672:	d01c      	beq.n	800a6ae <validate+0x4e>
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	681b      	ldr	r3, [r3, #0]
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d018      	beq.n	800a6ae <validate+0x4e>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	781b      	ldrb	r3, [r3, #0]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d013      	beq.n	800a6ae <validate+0x4e>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	889a      	ldrh	r2, [r3, #4]
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	88db      	ldrh	r3, [r3, #6]
 800a690:	429a      	cmp	r2, r3
 800a692:	d10c      	bne.n	800a6ae <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	785b      	ldrb	r3, [r3, #1]
 800a69a:	4618      	mov	r0, r3
 800a69c:	f7fe f9c6 	bl	8008a2c <disk_status>
 800a6a0:	4603      	mov	r3, r0
 800a6a2:	f003 0301 	and.w	r3, r3, #1
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d101      	bne.n	800a6ae <validate+0x4e>
			res = FR_OK;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800a6ae:	7bfb      	ldrb	r3, [r7, #15]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d102      	bne.n	800a6ba <validate+0x5a>
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	e000      	b.n	800a6bc <validate+0x5c>
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	683a      	ldr	r2, [r7, #0]
 800a6be:	6013      	str	r3, [r2, #0]
	return res;
 800a6c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	3710      	adds	r7, #16
 800a6c6:	46bd      	mov	sp, r7
 800a6c8:	bd80      	pop	{r7, pc}
	...

0800a6cc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800a6cc:	b580      	push	{r7, lr}
 800a6ce:	b088      	sub	sp, #32
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	60f8      	str	r0, [r7, #12]
 800a6d4:	60b9      	str	r1, [r7, #8]
 800a6d6:	4613      	mov	r3, r2
 800a6d8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800a6de:	f107 0310 	add.w	r3, r7, #16
 800a6e2:	4618      	mov	r0, r3
 800a6e4:	f7ff fc9e 	bl	800a024 <get_ldnumber>
 800a6e8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800a6ea:	69fb      	ldr	r3, [r7, #28]
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	da01      	bge.n	800a6f4 <f_mount+0x28>
 800a6f0:	230b      	movs	r3, #11
 800a6f2:	e02b      	b.n	800a74c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800a6f4:	4a17      	ldr	r2, [pc, #92]	; (800a754 <f_mount+0x88>)
 800a6f6:	69fb      	ldr	r3, [r7, #28]
 800a6f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a6fc:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800a6fe:	69bb      	ldr	r3, [r7, #24]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d005      	beq.n	800a710 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800a704:	69b8      	ldr	r0, [r7, #24]
 800a706:	f7fe fc77 	bl	8008ff8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800a70a:	69bb      	ldr	r3, [r7, #24]
 800a70c:	2200      	movs	r2, #0
 800a70e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d002      	beq.n	800a71c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800a71c:	68fa      	ldr	r2, [r7, #12]
 800a71e:	490d      	ldr	r1, [pc, #52]	; (800a754 <f_mount+0x88>)
 800a720:	69fb      	ldr	r3, [r7, #28]
 800a722:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d002      	beq.n	800a732 <f_mount+0x66>
 800a72c:	79fb      	ldrb	r3, [r7, #7]
 800a72e:	2b01      	cmp	r3, #1
 800a730:	d001      	beq.n	800a736 <f_mount+0x6a>
 800a732:	2300      	movs	r3, #0
 800a734:	e00a      	b.n	800a74c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800a736:	f107 010c 	add.w	r1, r7, #12
 800a73a:	f107 0308 	add.w	r3, r7, #8
 800a73e:	2200      	movs	r2, #0
 800a740:	4618      	mov	r0, r3
 800a742:	f7ff fd09 	bl	800a158 <find_volume>
 800a746:	4603      	mov	r3, r0
 800a748:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800a74a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a74c:	4618      	mov	r0, r3
 800a74e:	3720      	adds	r7, #32
 800a750:	46bd      	mov	sp, r7
 800a752:	bd80      	pop	{r7, pc}
 800a754:	200000b4 	.word	0x200000b4

0800a758 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800a758:	b580      	push	{r7, lr}
 800a75a:	b098      	sub	sp, #96	; 0x60
 800a75c:	af00      	add	r7, sp, #0
 800a75e:	60f8      	str	r0, [r7, #12]
 800a760:	60b9      	str	r1, [r7, #8]
 800a762:	4613      	mov	r3, r2
 800a764:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d101      	bne.n	800a770 <f_open+0x18>
 800a76c:	2309      	movs	r3, #9
 800a76e:	e1bb      	b.n	800aae8 <f_open+0x390>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800a770:	79fb      	ldrb	r3, [r7, #7]
 800a772:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a776:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800a778:	79fa      	ldrb	r2, [r7, #7]
 800a77a:	f107 0110 	add.w	r1, r7, #16
 800a77e:	f107 0308 	add.w	r3, r7, #8
 800a782:	4618      	mov	r0, r3
 800a784:	f7ff fce8 	bl	800a158 <find_volume>
 800a788:	4603      	mov	r3, r0
 800a78a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800a78e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a792:	2b00      	cmp	r3, #0
 800a794:	f040 819f 	bne.w	800aad6 <f_open+0x37e>
		dj.obj.fs = fs;
 800a798:	693b      	ldr	r3, [r7, #16]
 800a79a:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800a79c:	68ba      	ldr	r2, [r7, #8]
 800a79e:	f107 0314 	add.w	r3, r7, #20
 800a7a2:	4611      	mov	r1, r2
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	f7ff fbc7 	bl	8009f38 <follow_path>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800a7b0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d11a      	bne.n	800a7ee <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800a7b8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800a7bc:	b25b      	sxtb	r3, r3
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	da03      	bge.n	800a7ca <f_open+0x72>
				res = FR_INVALID_NAME;
 800a7c2:	2306      	movs	r3, #6
 800a7c4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a7c8:	e011      	b.n	800a7ee <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a7ca:	79fb      	ldrb	r3, [r7, #7]
 800a7cc:	f023 0301 	bic.w	r3, r3, #1
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	bf14      	ite	ne
 800a7d4:	2301      	movne	r3, #1
 800a7d6:	2300      	moveq	r3, #0
 800a7d8:	b2db      	uxtb	r3, r3
 800a7da:	461a      	mov	r2, r3
 800a7dc:	f107 0314 	add.w	r3, r7, #20
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7fe fac0 	bl	8008d68 <chk_lock>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800a7ee:	79fb      	ldrb	r3, [r7, #7]
 800a7f0:	f003 031c 	and.w	r3, r3, #28
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d07f      	beq.n	800a8f8 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800a7f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d017      	beq.n	800a830 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800a800:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a804:	2b04      	cmp	r3, #4
 800a806:	d10e      	bne.n	800a826 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800a808:	f7fe fb0a 	bl	8008e20 <enq_lock>
 800a80c:	4603      	mov	r3, r0
 800a80e:	2b00      	cmp	r3, #0
 800a810:	d006      	beq.n	800a820 <f_open+0xc8>
 800a812:	f107 0314 	add.w	r3, r7, #20
 800a816:	4618      	mov	r0, r3
 800a818:	f7ff fa69 	bl	8009cee <dir_register>
 800a81c:	4603      	mov	r3, r0
 800a81e:	e000      	b.n	800a822 <f_open+0xca>
 800a820:	2312      	movs	r3, #18
 800a822:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800a826:	79fb      	ldrb	r3, [r7, #7]
 800a828:	f043 0308 	orr.w	r3, r3, #8
 800a82c:	71fb      	strb	r3, [r7, #7]
 800a82e:	e010      	b.n	800a852 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800a830:	7ebb      	ldrb	r3, [r7, #26]
 800a832:	f003 0311 	and.w	r3, r3, #17
 800a836:	2b00      	cmp	r3, #0
 800a838:	d003      	beq.n	800a842 <f_open+0xea>
					res = FR_DENIED;
 800a83a:	2307      	movs	r3, #7
 800a83c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a840:	e007      	b.n	800a852 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800a842:	79fb      	ldrb	r3, [r7, #7]
 800a844:	f003 0304 	and.w	r3, r3, #4
 800a848:	2b00      	cmp	r3, #0
 800a84a:	d002      	beq.n	800a852 <f_open+0xfa>
 800a84c:	2308      	movs	r3, #8
 800a84e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800a852:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a856:	2b00      	cmp	r3, #0
 800a858:	d168      	bne.n	800a92c <f_open+0x1d4>
 800a85a:	79fb      	ldrb	r3, [r7, #7]
 800a85c:	f003 0308 	and.w	r3, r3, #8
 800a860:	2b00      	cmp	r3, #0
 800a862:	d063      	beq.n	800a92c <f_open+0x1d4>
				dw = GET_FATTIME();
 800a864:	f7fb f8ea 	bl	8005a3c <get_fattime>
 800a868:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800a86a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a86c:	330e      	adds	r3, #14
 800a86e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a870:	4618      	mov	r0, r3
 800a872:	f7fe f9cf 	bl	8008c14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800a876:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a878:	3316      	adds	r3, #22
 800a87a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a87c:	4618      	mov	r0, r3
 800a87e:	f7fe f9c9 	bl	8008c14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800a882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a884:	330b      	adds	r3, #11
 800a886:	2220      	movs	r2, #32
 800a888:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800a88a:	693b      	ldr	r3, [r7, #16]
 800a88c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a88e:	4611      	mov	r1, r2
 800a890:	4618      	mov	r0, r3
 800a892:	f7ff f998 	bl	8009bc6 <ld_clust>
 800a896:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800a898:	693b      	ldr	r3, [r7, #16]
 800a89a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a89c:	2200      	movs	r2, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f7ff f9b0 	bl	8009c04 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800a8a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8a6:	331c      	adds	r3, #28
 800a8a8:	2100      	movs	r1, #0
 800a8aa:	4618      	mov	r0, r3
 800a8ac:	f7fe f9b2 	bl	8008c14 <st_dword>
					fs->wflag = 1;
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	2201      	movs	r2, #1
 800a8b4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800a8b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d037      	beq.n	800a92c <f_open+0x1d4>
						dw = fs->winsect;
 800a8bc:	693b      	ldr	r3, [r7, #16]
 800a8be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a8c0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800a8c2:	f107 0314 	add.w	r3, r7, #20
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	f7fe fea0 	bl	8009610 <remove_chain>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800a8d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d126      	bne.n	800a92c <f_open+0x1d4>
							res = move_window(fs, dw);
 800a8de:	693b      	ldr	r3, [r7, #16]
 800a8e0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800a8e2:	4618      	mov	r0, r3
 800a8e4:	f7fe fbf0 	bl	80090c8 <move_window>
 800a8e8:	4603      	mov	r3, r0
 800a8ea:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800a8ee:	693b      	ldr	r3, [r7, #16]
 800a8f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a8f2:	3a01      	subs	r2, #1
 800a8f4:	611a      	str	r2, [r3, #16]
 800a8f6:	e019      	b.n	800a92c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800a8f8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a8fc:	2b00      	cmp	r3, #0
 800a8fe:	d115      	bne.n	800a92c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800a900:	7ebb      	ldrb	r3, [r7, #26]
 800a902:	f003 0310 	and.w	r3, r3, #16
 800a906:	2b00      	cmp	r3, #0
 800a908:	d003      	beq.n	800a912 <f_open+0x1ba>
					res = FR_NO_FILE;
 800a90a:	2304      	movs	r3, #4
 800a90c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800a910:	e00c      	b.n	800a92c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800a912:	79fb      	ldrb	r3, [r7, #7]
 800a914:	f003 0302 	and.w	r3, r3, #2
 800a918:	2b00      	cmp	r3, #0
 800a91a:	d007      	beq.n	800a92c <f_open+0x1d4>
 800a91c:	7ebb      	ldrb	r3, [r7, #26]
 800a91e:	f003 0301 	and.w	r3, r3, #1
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <f_open+0x1d4>
						res = FR_DENIED;
 800a926:	2307      	movs	r3, #7
 800a928:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800a92c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a930:	2b00      	cmp	r3, #0
 800a932:	d128      	bne.n	800a986 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800a934:	79fb      	ldrb	r3, [r7, #7]
 800a936:	f003 0308 	and.w	r3, r3, #8
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d003      	beq.n	800a946 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800a93e:	79fb      	ldrb	r3, [r7, #7]
 800a940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a944:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800a946:	693b      	ldr	r3, [r7, #16]
 800a948:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a94a:	68fb      	ldr	r3, [r7, #12]
 800a94c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800a94e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a950:	68fb      	ldr	r3, [r7, #12]
 800a952:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800a954:	79fb      	ldrb	r3, [r7, #7]
 800a956:	f023 0301 	bic.w	r3, r3, #1
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bf14      	ite	ne
 800a95e:	2301      	movne	r3, #1
 800a960:	2300      	moveq	r3, #0
 800a962:	b2db      	uxtb	r3, r3
 800a964:	461a      	mov	r2, r3
 800a966:	f107 0314 	add.w	r3, r7, #20
 800a96a:	4611      	mov	r1, r2
 800a96c:	4618      	mov	r0, r3
 800a96e:	f7fe fa79 	bl	8008e64 <inc_lock>
 800a972:	4602      	mov	r2, r0
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800a978:	68fb      	ldr	r3, [r7, #12]
 800a97a:	691b      	ldr	r3, [r3, #16]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d102      	bne.n	800a986 <f_open+0x22e>
 800a980:	2302      	movs	r3, #2
 800a982:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800a986:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	f040 80a3 	bne.w	800aad6 <f_open+0x37e>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800a990:	693b      	ldr	r3, [r7, #16]
 800a992:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a994:	4611      	mov	r1, r2
 800a996:	4618      	mov	r0, r3
 800a998:	f7ff f915 	bl	8009bc6 <ld_clust>
 800a99c:	4602      	mov	r2, r0
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800a9a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9a4:	331c      	adds	r3, #28
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f7fe f8f6 	bl	8008b98 <ld_dword>
 800a9ac:	4602      	mov	r2, r0
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2200      	movs	r2, #0
 800a9b6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800a9b8:	693a      	ldr	r2, [r7, #16]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800a9be:	693b      	ldr	r3, [r7, #16]
 800a9c0:	88da      	ldrh	r2, [r3, #6]
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	79fa      	ldrb	r2, [r7, #7]
 800a9ca:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2200      	movs	r2, #0
 800a9d0:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	3330      	adds	r3, #48	; 0x30
 800a9e2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9e6:	2100      	movs	r1, #0
 800a9e8:	4618      	mov	r0, r3
 800a9ea:	f7fe f960 	bl	8008cae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800a9ee:	79fb      	ldrb	r3, [r7, #7]
 800a9f0:	f003 0320 	and.w	r3, r3, #32
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d06e      	beq.n	800aad6 <f_open+0x37e>
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	68db      	ldr	r3, [r3, #12]
 800a9fc:	2b00      	cmp	r3, #0
 800a9fe:	d06a      	beq.n	800aad6 <f_open+0x37e>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	68da      	ldr	r2, [r3, #12]
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800aa08:	693b      	ldr	r3, [r7, #16]
 800aa0a:	895b      	ldrh	r3, [r3, #10]
 800aa0c:	461a      	mov	r2, r3
 800aa0e:	693b      	ldr	r3, [r7, #16]
 800aa10:	899b      	ldrh	r3, [r3, #12]
 800aa12:	fb03 f302 	mul.w	r3, r3, r2
 800aa16:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	689b      	ldr	r3, [r3, #8]
 800aa1c:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	68db      	ldr	r3, [r3, #12]
 800aa22:	657b      	str	r3, [r7, #84]	; 0x54
 800aa24:	e016      	b.n	800aa54 <f_open+0x2fc>
					clst = get_fat(&fp->obj, clst);
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7fe fc09 	bl	8009242 <get_fat>
 800aa30:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800aa32:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa34:	2b01      	cmp	r3, #1
 800aa36:	d802      	bhi.n	800aa3e <f_open+0x2e6>
 800aa38:	2302      	movs	r3, #2
 800aa3a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800aa3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aa40:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa44:	d102      	bne.n	800aa4c <f_open+0x2f4>
 800aa46:	2301      	movs	r3, #1
 800aa48:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800aa4c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa4e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa50:	1ad3      	subs	r3, r2, r3
 800aa52:	657b      	str	r3, [r7, #84]	; 0x54
 800aa54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d103      	bne.n	800aa64 <f_open+0x30c>
 800aa5c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800aa5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800aa60:	429a      	cmp	r2, r3
 800aa62:	d8e0      	bhi.n	800aa26 <f_open+0x2ce>
				}
				fp->clust = clst;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800aa68:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800aa6a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d131      	bne.n	800aad6 <f_open+0x37e>
 800aa72:	693b      	ldr	r3, [r7, #16]
 800aa74:	899b      	ldrh	r3, [r3, #12]
 800aa76:	461a      	mov	r2, r3
 800aa78:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aa7a:	fbb3 f1f2 	udiv	r1, r3, r2
 800aa7e:	fb02 f201 	mul.w	r2, r2, r1
 800aa82:	1a9b      	subs	r3, r3, r2
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d026      	beq.n	800aad6 <f_open+0x37e>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800aa88:	693b      	ldr	r3, [r7, #16]
 800aa8a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800aa8c:	4618      	mov	r0, r3
 800aa8e:	f7fe fbb9 	bl	8009204 <clust2sect>
 800aa92:	6478      	str	r0, [r7, #68]	; 0x44
 800aa94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <f_open+0x34a>
						res = FR_INT_ERR;
 800aa9a:	2302      	movs	r3, #2
 800aa9c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800aaa0:	e019      	b.n	800aad6 <f_open+0x37e>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800aaa2:	693b      	ldr	r3, [r7, #16]
 800aaa4:	899b      	ldrh	r3, [r3, #12]
 800aaa6:	461a      	mov	r2, r3
 800aaa8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800aaaa:	fbb3 f2f2 	udiv	r2, r3, r2
 800aaae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800aab0:	441a      	add	r2, r3
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800aab6:	693b      	ldr	r3, [r7, #16]
 800aab8:	7858      	ldrb	r0, [r3, #1]
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	6a1a      	ldr	r2, [r3, #32]
 800aac4:	2301      	movs	r3, #1
 800aac6:	f7fd fff1 	bl	8008aac <disk_read>
 800aaca:	4603      	mov	r3, r0
 800aacc:	2b00      	cmp	r3, #0
 800aace:	d002      	beq.n	800aad6 <f_open+0x37e>
 800aad0:	2301      	movs	r3, #1
 800aad2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800aad6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d002      	beq.n	800aae4 <f_open+0x38c>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800aae4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800aae8:	4618      	mov	r0, r3
 800aaea:	3760      	adds	r7, #96	; 0x60
 800aaec:	46bd      	mov	sp, r7
 800aaee:	bd80      	pop	{r7, pc}

0800aaf0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800aaf0:	b580      	push	{r7, lr}
 800aaf2:	b08c      	sub	sp, #48	; 0x30
 800aaf4:	af00      	add	r7, sp, #0
 800aaf6:	60f8      	str	r0, [r7, #12]
 800aaf8:	60b9      	str	r1, [r7, #8]
 800aafa:	607a      	str	r2, [r7, #4]
 800aafc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 800aafe:	68bb      	ldr	r3, [r7, #8]
 800ab00:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	2200      	movs	r2, #0
 800ab06:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	f107 0210 	add.w	r2, r7, #16
 800ab0e:	4611      	mov	r1, r2
 800ab10:	4618      	mov	r0, r3
 800ab12:	f7ff fda5 	bl	800a660 <validate>
 800ab16:	4603      	mov	r3, r0
 800ab18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800ab1c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d107      	bne.n	800ab34 <f_write+0x44>
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	7d5b      	ldrb	r3, [r3, #21]
 800ab28:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ab2c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab30:	2b00      	cmp	r3, #0
 800ab32:	d002      	beq.n	800ab3a <f_write+0x4a>
 800ab34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ab38:	e16a      	b.n	800ae10 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	7d1b      	ldrb	r3, [r3, #20]
 800ab3e:	f003 0302 	and.w	r3, r3, #2
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d101      	bne.n	800ab4a <f_write+0x5a>
 800ab46:	2307      	movs	r3, #7
 800ab48:	e162      	b.n	800ae10 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	699a      	ldr	r2, [r3, #24]
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	441a      	add	r2, r3
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	699b      	ldr	r3, [r3, #24]
 800ab56:	429a      	cmp	r2, r3
 800ab58:	f080 814c 	bcs.w	800adf4 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	699b      	ldr	r3, [r3, #24]
 800ab60:	43db      	mvns	r3, r3
 800ab62:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800ab64:	e146      	b.n	800adf4 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	699b      	ldr	r3, [r3, #24]
 800ab6a:	693a      	ldr	r2, [r7, #16]
 800ab6c:	8992      	ldrh	r2, [r2, #12]
 800ab6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ab72:	fb02 f201 	mul.w	r2, r2, r1
 800ab76:	1a9b      	subs	r3, r3, r2
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	f040 80f1 	bne.w	800ad60 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	699b      	ldr	r3, [r3, #24]
 800ab82:	693a      	ldr	r2, [r7, #16]
 800ab84:	8992      	ldrh	r2, [r2, #12]
 800ab86:	fbb3 f3f2 	udiv	r3, r3, r2
 800ab8a:	693a      	ldr	r2, [r7, #16]
 800ab8c:	8952      	ldrh	r2, [r2, #10]
 800ab8e:	3a01      	subs	r2, #1
 800ab90:	4013      	ands	r3, r2
 800ab92:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800ab94:	69bb      	ldr	r3, [r7, #24]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d143      	bne.n	800ac22 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	699b      	ldr	r3, [r3, #24]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d10c      	bne.n	800abbc <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 800aba2:	68fb      	ldr	r3, [r7, #12]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800aba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d11a      	bne.n	800abe4 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	2100      	movs	r1, #0
 800abb2:	4618      	mov	r0, r3
 800abb4:	f7fe fd91 	bl	80096da <create_chain>
 800abb8:	62b8      	str	r0, [r7, #40]	; 0x28
 800abba:	e013      	b.n	800abe4 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d007      	beq.n	800abd4 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	699b      	ldr	r3, [r3, #24]
 800abc8:	4619      	mov	r1, r3
 800abca:	68f8      	ldr	r0, [r7, #12]
 800abcc:	f7fe fe1d 	bl	800980a <clmt_clust>
 800abd0:	62b8      	str	r0, [r7, #40]	; 0x28
 800abd2:	e007      	b.n	800abe4 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800abd4:	68fa      	ldr	r2, [r7, #12]
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	69db      	ldr	r3, [r3, #28]
 800abda:	4619      	mov	r1, r3
 800abdc:	4610      	mov	r0, r2
 800abde:	f7fe fd7c 	bl	80096da <create_chain>
 800abe2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800abe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abe6:	2b00      	cmp	r3, #0
 800abe8:	f000 8109 	beq.w	800adfe <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800abec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abee:	2b01      	cmp	r3, #1
 800abf0:	d104      	bne.n	800abfc <f_write+0x10c>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	2202      	movs	r2, #2
 800abf6:	755a      	strb	r2, [r3, #21]
 800abf8:	2302      	movs	r3, #2
 800abfa:	e109      	b.n	800ae10 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800abfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ac02:	d104      	bne.n	800ac0e <f_write+0x11e>
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	2201      	movs	r2, #1
 800ac08:	755a      	strb	r2, [r3, #21]
 800ac0a:	2301      	movs	r3, #1
 800ac0c:	e100      	b.n	800ae10 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 800ac0e:	68fb      	ldr	r3, [r7, #12]
 800ac10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac12:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	689b      	ldr	r3, [r3, #8]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d102      	bne.n	800ac22 <f_write+0x132>
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ac20:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	7d1b      	ldrb	r3, [r3, #20]
 800ac26:	b25b      	sxtb	r3, r3
 800ac28:	2b00      	cmp	r3, #0
 800ac2a:	da18      	bge.n	800ac5e <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ac2c:	693b      	ldr	r3, [r7, #16]
 800ac2e:	7858      	ldrb	r0, [r3, #1]
 800ac30:	68fb      	ldr	r3, [r7, #12]
 800ac32:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	6a1a      	ldr	r2, [r3, #32]
 800ac3a:	2301      	movs	r3, #1
 800ac3c:	f7fd ff56 	bl	8008aec <disk_write>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d004      	beq.n	800ac50 <f_write+0x160>
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	755a      	strb	r2, [r3, #21]
 800ac4c:	2301      	movs	r3, #1
 800ac4e:	e0df      	b.n	800ae10 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	7d1b      	ldrb	r3, [r3, #20]
 800ac54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ac58:	b2da      	uxtb	r2, r3
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800ac5e:	693a      	ldr	r2, [r7, #16]
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	69db      	ldr	r3, [r3, #28]
 800ac64:	4619      	mov	r1, r3
 800ac66:	4610      	mov	r0, r2
 800ac68:	f7fe facc 	bl	8009204 <clust2sect>
 800ac6c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800ac6e:	697b      	ldr	r3, [r7, #20]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d104      	bne.n	800ac7e <f_write+0x18e>
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2202      	movs	r2, #2
 800ac78:	755a      	strb	r2, [r3, #21]
 800ac7a:	2302      	movs	r3, #2
 800ac7c:	e0c8      	b.n	800ae10 <f_write+0x320>
			sect += csect;
 800ac7e:	697a      	ldr	r2, [r7, #20]
 800ac80:	69bb      	ldr	r3, [r7, #24]
 800ac82:	4413      	add	r3, r2
 800ac84:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800ac86:	693b      	ldr	r3, [r7, #16]
 800ac88:	899b      	ldrh	r3, [r3, #12]
 800ac8a:	461a      	mov	r2, r3
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac92:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800ac94:	6a3b      	ldr	r3, [r7, #32]
 800ac96:	2b00      	cmp	r3, #0
 800ac98:	d043      	beq.n	800ad22 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800ac9a:	69ba      	ldr	r2, [r7, #24]
 800ac9c:	6a3b      	ldr	r3, [r7, #32]
 800ac9e:	4413      	add	r3, r2
 800aca0:	693a      	ldr	r2, [r7, #16]
 800aca2:	8952      	ldrh	r2, [r2, #10]
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d905      	bls.n	800acb4 <f_write+0x1c4>
					cc = fs->csize - csect;
 800aca8:	693b      	ldr	r3, [r7, #16]
 800acaa:	895b      	ldrh	r3, [r3, #10]
 800acac:	461a      	mov	r2, r3
 800acae:	69bb      	ldr	r3, [r7, #24]
 800acb0:	1ad3      	subs	r3, r2, r3
 800acb2:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	7858      	ldrb	r0, [r3, #1]
 800acb8:	6a3b      	ldr	r3, [r7, #32]
 800acba:	697a      	ldr	r2, [r7, #20]
 800acbc:	69f9      	ldr	r1, [r7, #28]
 800acbe:	f7fd ff15 	bl	8008aec <disk_write>
 800acc2:	4603      	mov	r3, r0
 800acc4:	2b00      	cmp	r3, #0
 800acc6:	d004      	beq.n	800acd2 <f_write+0x1e2>
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	2201      	movs	r2, #1
 800accc:	755a      	strb	r2, [r3, #21]
 800acce:	2301      	movs	r3, #1
 800acd0:	e09e      	b.n	800ae10 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 800acd2:	68fb      	ldr	r3, [r7, #12]
 800acd4:	6a1a      	ldr	r2, [r3, #32]
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	1ad3      	subs	r3, r2, r3
 800acda:	6a3a      	ldr	r2, [r7, #32]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d918      	bls.n	800ad12 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f103 0030 	add.w	r0, r3, #48	; 0x30
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	6a1a      	ldr	r2, [r3, #32]
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	1ad3      	subs	r3, r2, r3
 800acee:	693a      	ldr	r2, [r7, #16]
 800acf0:	8992      	ldrh	r2, [r2, #12]
 800acf2:	fb02 f303 	mul.w	r3, r2, r3
 800acf6:	69fa      	ldr	r2, [r7, #28]
 800acf8:	18d1      	adds	r1, r2, r3
 800acfa:	693b      	ldr	r3, [r7, #16]
 800acfc:	899b      	ldrh	r3, [r3, #12]
 800acfe:	461a      	mov	r2, r3
 800ad00:	f7fd ffb4 	bl	8008c6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	7d1b      	ldrb	r3, [r3, #20]
 800ad08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad0c:	b2da      	uxtb	r2, r3
 800ad0e:	68fb      	ldr	r3, [r7, #12]
 800ad10:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 800ad12:	693b      	ldr	r3, [r7, #16]
 800ad14:	899b      	ldrh	r3, [r3, #12]
 800ad16:	461a      	mov	r2, r3
 800ad18:	6a3b      	ldr	r3, [r7, #32]
 800ad1a:	fb02 f303 	mul.w	r3, r2, r3
 800ad1e:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 800ad20:	e04b      	b.n	800adba <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad22:	68fb      	ldr	r3, [r7, #12]
 800ad24:	6a1b      	ldr	r3, [r3, #32]
 800ad26:	697a      	ldr	r2, [r7, #20]
 800ad28:	429a      	cmp	r2, r3
 800ad2a:	d016      	beq.n	800ad5a <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	699a      	ldr	r2, [r3, #24]
 800ad30:	68fb      	ldr	r3, [r7, #12]
 800ad32:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800ad34:	429a      	cmp	r2, r3
 800ad36:	d210      	bcs.n	800ad5a <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800ad38:	693b      	ldr	r3, [r7, #16]
 800ad3a:	7858      	ldrb	r0, [r3, #1]
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad42:	2301      	movs	r3, #1
 800ad44:	697a      	ldr	r2, [r7, #20]
 800ad46:	f7fd feb1 	bl	8008aac <disk_read>
 800ad4a:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d004      	beq.n	800ad5a <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2201      	movs	r2, #1
 800ad54:	755a      	strb	r2, [r3, #21]
 800ad56:	2301      	movs	r3, #1
 800ad58:	e05a      	b.n	800ae10 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800ad60:	693b      	ldr	r3, [r7, #16]
 800ad62:	899b      	ldrh	r3, [r3, #12]
 800ad64:	4618      	mov	r0, r3
 800ad66:	68fb      	ldr	r3, [r7, #12]
 800ad68:	699b      	ldr	r3, [r3, #24]
 800ad6a:	693a      	ldr	r2, [r7, #16]
 800ad6c:	8992      	ldrh	r2, [r2, #12]
 800ad6e:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad72:	fb02 f201 	mul.w	r2, r2, r1
 800ad76:	1a9b      	subs	r3, r3, r2
 800ad78:	1ac3      	subs	r3, r0, r3
 800ad7a:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 800ad7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	429a      	cmp	r2, r3
 800ad82:	d901      	bls.n	800ad88 <f_write+0x298>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800ad88:	68fb      	ldr	r3, [r7, #12]
 800ad8a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ad8e:	68fb      	ldr	r3, [r7, #12]
 800ad90:	699b      	ldr	r3, [r3, #24]
 800ad92:	693a      	ldr	r2, [r7, #16]
 800ad94:	8992      	ldrh	r2, [r2, #12]
 800ad96:	fbb3 f0f2 	udiv	r0, r3, r2
 800ad9a:	fb02 f200 	mul.w	r2, r2, r0
 800ad9e:	1a9b      	subs	r3, r3, r2
 800ada0:	440b      	add	r3, r1
 800ada2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ada4:	69f9      	ldr	r1, [r7, #28]
 800ada6:	4618      	mov	r0, r3
 800ada8:	f7fd ff60 	bl	8008c6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 800adac:	68fb      	ldr	r3, [r7, #12]
 800adae:	7d1b      	ldrb	r3, [r3, #20]
 800adb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800adb4:	b2da      	uxtb	r2, r3
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800adba:	69fa      	ldr	r2, [r7, #28]
 800adbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adbe:	4413      	add	r3, r2
 800adc0:	61fb      	str	r3, [r7, #28]
 800adc2:	68fb      	ldr	r3, [r7, #12]
 800adc4:	699a      	ldr	r2, [r3, #24]
 800adc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adc8:	441a      	add	r2, r3
 800adca:	68fb      	ldr	r3, [r7, #12]
 800adcc:	619a      	str	r2, [r3, #24]
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	68da      	ldr	r2, [r3, #12]
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	699b      	ldr	r3, [r3, #24]
 800add6:	429a      	cmp	r2, r3
 800add8:	bf38      	it	cc
 800adda:	461a      	movcc	r2, r3
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	60da      	str	r2, [r3, #12]
 800ade0:	683b      	ldr	r3, [r7, #0]
 800ade2:	681a      	ldr	r2, [r3, #0]
 800ade4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ade6:	441a      	add	r2, r3
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	601a      	str	r2, [r3, #0]
 800adec:	687a      	ldr	r2, [r7, #4]
 800adee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800adf0:	1ad3      	subs	r3, r2, r3
 800adf2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	f47f aeb5 	bne.w	800ab66 <f_write+0x76>
 800adfc:	e000      	b.n	800ae00 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800adfe:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	7d1b      	ldrb	r3, [r3, #20]
 800ae04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ae08:	b2da      	uxtb	r2, r3
 800ae0a:	68fb      	ldr	r3, [r7, #12]
 800ae0c:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 800ae0e:	2300      	movs	r3, #0
}
 800ae10:	4618      	mov	r0, r3
 800ae12:	3730      	adds	r7, #48	; 0x30
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}

0800ae18 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800ae18:	b580      	push	{r7, lr}
 800ae1a:	b086      	sub	sp, #24
 800ae1c:	af00      	add	r7, sp, #0
 800ae1e:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	f107 0208 	add.w	r2, r7, #8
 800ae26:	4611      	mov	r1, r2
 800ae28:	4618      	mov	r0, r3
 800ae2a:	f7ff fc19 	bl	800a660 <validate>
 800ae2e:	4603      	mov	r3, r0
 800ae30:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ae32:	7dfb      	ldrb	r3, [r7, #23]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d168      	bne.n	800af0a <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	7d1b      	ldrb	r3, [r3, #20]
 800ae3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d062      	beq.n	800af0a <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	7d1b      	ldrb	r3, [r3, #20]
 800ae48:	b25b      	sxtb	r3, r3
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	da15      	bge.n	800ae7a <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	7858      	ldrb	r0, [r3, #1]
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	6a1a      	ldr	r2, [r3, #32]
 800ae5c:	2301      	movs	r3, #1
 800ae5e:	f7fd fe45 	bl	8008aec <disk_write>
 800ae62:	4603      	mov	r3, r0
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d001      	beq.n	800ae6c <f_sync+0x54>
 800ae68:	2301      	movs	r3, #1
 800ae6a:	e04f      	b.n	800af0c <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	7d1b      	ldrb	r3, [r3, #20]
 800ae70:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800ae7a:	f7fa fddf 	bl	8005a3c <get_fattime>
 800ae7e:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800ae80:	68ba      	ldr	r2, [r7, #8]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae86:	4619      	mov	r1, r3
 800ae88:	4610      	mov	r0, r2
 800ae8a:	f7fe f91d 	bl	80090c8 <move_window>
 800ae8e:	4603      	mov	r3, r0
 800ae90:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800ae92:	7dfb      	ldrb	r3, [r7, #23]
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d138      	bne.n	800af0a <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae9c:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	330b      	adds	r3, #11
 800aea2:	781a      	ldrb	r2, [r3, #0]
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	330b      	adds	r3, #11
 800aea8:	f042 0220 	orr.w	r2, r2, #32
 800aeac:	b2d2      	uxtb	r2, r2
 800aeae:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	6818      	ldr	r0, [r3, #0]
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	689b      	ldr	r3, [r3, #8]
 800aeb8:	461a      	mov	r2, r3
 800aeba:	68f9      	ldr	r1, [r7, #12]
 800aebc:	f7fe fea2 	bl	8009c04 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f103 021c 	add.w	r2, r3, #28
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	68db      	ldr	r3, [r3, #12]
 800aeca:	4619      	mov	r1, r3
 800aecc:	4610      	mov	r0, r2
 800aece:	f7fd fea1 	bl	8008c14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	3316      	adds	r3, #22
 800aed6:	6939      	ldr	r1, [r7, #16]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f7fd fe9b 	bl	8008c14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	3312      	adds	r3, #18
 800aee2:	2100      	movs	r1, #0
 800aee4:	4618      	mov	r0, r3
 800aee6:	f7fd fe7a 	bl	8008bde <st_word>
					fs->wflag = 1;
 800aeea:	68bb      	ldr	r3, [r7, #8]
 800aeec:	2201      	movs	r2, #1
 800aeee:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	4618      	mov	r0, r3
 800aef4:	f7fe f916 	bl	8009124 <sync_fs>
 800aef8:	4603      	mov	r3, r0
 800aefa:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	7d1b      	ldrb	r3, [r3, #20]
 800af00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af04:	b2da      	uxtb	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800af0a:	7dfb      	ldrb	r3, [r7, #23]
}
 800af0c:	4618      	mov	r0, r3
 800af0e:	3718      	adds	r7, #24
 800af10:	46bd      	mov	sp, r7
 800af12:	bd80      	pop	{r7, pc}

0800af14 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800af14:	b580      	push	{r7, lr}
 800af16:	b084      	sub	sp, #16
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800af1c:	6878      	ldr	r0, [r7, #4]
 800af1e:	f7ff ff7b 	bl	800ae18 <f_sync>
 800af22:	4603      	mov	r3, r0
 800af24:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d118      	bne.n	800af5e <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	f107 0208 	add.w	r2, r7, #8
 800af32:	4611      	mov	r1, r2
 800af34:	4618      	mov	r0, r3
 800af36:	f7ff fb93 	bl	800a660 <validate>
 800af3a:	4603      	mov	r3, r0
 800af3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
 800af40:	2b00      	cmp	r3, #0
 800af42:	d10c      	bne.n	800af5e <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	691b      	ldr	r3, [r3, #16]
 800af48:	4618      	mov	r0, r3
 800af4a:	f7fe f819 	bl	8008f80 <dec_lock>
 800af4e:	4603      	mov	r3, r0
 800af50:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800af52:	7bfb      	ldrb	r3, [r7, #15]
 800af54:	2b00      	cmp	r3, #0
 800af56:	d102      	bne.n	800af5e <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2200      	movs	r2, #0
 800af5c:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800af5e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af60:	4618      	mov	r0, r3
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <f_stat>:

FRESULT f_stat (
	const TCHAR* path,	/* Pointer to the file path */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b090      	sub	sp, #64	; 0x40
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
	DIR dj;
	DEF_NAMBUF


	/* Get logical drive */
	res = find_volume(&path, &dj.obj.fs, 0);
 800af72:	f107 010c 	add.w	r1, r7, #12
 800af76:	1d3b      	adds	r3, r7, #4
 800af78:	2200      	movs	r2, #0
 800af7a:	4618      	mov	r0, r3
 800af7c:	f7ff f8ec 	bl	800a158 <find_volume>
 800af80:	4603      	mov	r3, r0
 800af82:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) {
 800af86:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800af8a:	2b00      	cmp	r3, #0
 800af8c:	d11f      	bne.n	800afce <f_stat+0x66>
		INIT_NAMBUF(dj.obj.fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	f107 030c 	add.w	r3, r7, #12
 800af94:	4611      	mov	r1, r2
 800af96:	4618      	mov	r0, r3
 800af98:	f7fe ffce 	bl	8009f38 <follow_path>
 800af9c:	4603      	mov	r3, r0
 800af9e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		if (res == FR_OK) {				/* Follow completed */
 800afa2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d111      	bne.n	800afce <f_stat+0x66>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* It is origin directory */
 800afaa:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 800afae:	b25b      	sxtb	r3, r3
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	da03      	bge.n	800afbc <f_stat+0x54>
				res = FR_INVALID_NAME;
 800afb4:	2306      	movs	r3, #6
 800afb6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800afba:	e008      	b.n	800afce <f_stat+0x66>
			} else {							/* Found an object */
				if (fno) get_fileinfo(&dj, fno);
 800afbc:	683b      	ldr	r3, [r7, #0]
 800afbe:	2b00      	cmp	r3, #0
 800afc0:	d005      	beq.n	800afce <f_stat+0x66>
 800afc2:	f107 030c 	add.w	r3, r7, #12
 800afc6:	6839      	ldr	r1, [r7, #0]
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe fec2 	bl	8009d52 <get_fileinfo>
			}
		}
		FREE_NAMBUF();
	}

	LEAVE_FF(dj.obj.fs, res);
 800afce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3740      	adds	r7, #64	; 0x40
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800afda:	b580      	push	{r7, lr}
 800afdc:	b092      	sub	sp, #72	; 0x48
 800afde:	af00      	add	r7, sp, #0
 800afe0:	60f8      	str	r0, [r7, #12]
 800afe2:	60b9      	str	r1, [r7, #8]
 800afe4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 800afe6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 800afea:	f107 030c 	add.w	r3, r7, #12
 800afee:	2200      	movs	r2, #0
 800aff0:	4618      	mov	r0, r3
 800aff2:	f7ff f8b1 	bl	800a158 <find_volume>
 800aff6:	4603      	mov	r3, r0
 800aff8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (res == FR_OK) {
 800affc:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b000:	2b00      	cmp	r3, #0
 800b002:	f040 8099 	bne.w	800b138 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 800b006:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800b00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b00e:	695a      	ldr	r2, [r3, #20]
 800b010:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b012:	699b      	ldr	r3, [r3, #24]
 800b014:	3b02      	subs	r3, #2
 800b016:	429a      	cmp	r2, r3
 800b018:	d804      	bhi.n	800b024 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 800b01a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01c:	695a      	ldr	r2, [r3, #20]
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	601a      	str	r2, [r3, #0]
 800b022:	e089      	b.n	800b138 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 800b024:	2300      	movs	r3, #0
 800b026:	643b      	str	r3, [r7, #64]	; 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 800b028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b02a:	781b      	ldrb	r3, [r3, #0]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d128      	bne.n	800b082 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 800b030:	2302      	movs	r3, #2
 800b032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b036:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800b038:	f107 0314 	add.w	r3, r7, #20
 800b03c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b03e:	4618      	mov	r0, r3
 800b040:	f7fe f8ff 	bl	8009242 <get_fat>
 800b044:	62f8      	str	r0, [r7, #44]	; 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800b046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b048:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b04c:	d103      	bne.n	800b056 <f_getfree+0x7c>
 800b04e:	2301      	movs	r3, #1
 800b050:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b054:	e063      	b.n	800b11e <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800b056:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b058:	2b01      	cmp	r3, #1
 800b05a:	d103      	bne.n	800b064 <f_getfree+0x8a>
 800b05c:	2302      	movs	r3, #2
 800b05e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800b062:	e05c      	b.n	800b11e <f_getfree+0x144>
					if (stat == 0) nfree++;
 800b064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b066:	2b00      	cmp	r3, #0
 800b068:	d102      	bne.n	800b070 <f_getfree+0x96>
 800b06a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b06c:	3301      	adds	r3, #1
 800b06e:	643b      	str	r3, [r7, #64]	; 0x40
				} while (++clst < fs->n_fatent);
 800b070:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b072:	3301      	adds	r3, #1
 800b074:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b076:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b078:	699b      	ldr	r3, [r3, #24]
 800b07a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b07c:	429a      	cmp	r2, r3
 800b07e:	d3db      	bcc.n	800b038 <f_getfree+0x5e>
 800b080:	e04d      	b.n	800b11e <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 800b082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b084:	699b      	ldr	r3, [r3, #24]
 800b086:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b08c:	63bb      	str	r3, [r7, #56]	; 0x38
					i = 0; p = 0;
 800b08e:	2300      	movs	r3, #0
 800b090:	637b      	str	r3, [r7, #52]	; 0x34
 800b092:	2300      	movs	r3, #0
 800b094:	633b      	str	r3, [r7, #48]	; 0x30
					do {
						if (i == 0) {
 800b096:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d113      	bne.n	800b0c4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800b09c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b09e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b0a0:	1c5a      	adds	r2, r3, #1
 800b0a2:	63ba      	str	r2, [r7, #56]	; 0x38
 800b0a4:	4619      	mov	r1, r3
 800b0a6:	f7fe f80f 	bl	80090c8 <move_window>
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
							if (res != FR_OK) break;
 800b0b0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d131      	bne.n	800b11c <f_getfree+0x142>
							p = fs->win;
 800b0b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0ba:	3334      	adds	r3, #52	; 0x34
 800b0bc:	633b      	str	r3, [r7, #48]	; 0x30
							i = SS(fs);
 800b0be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c0:	899b      	ldrh	r3, [r3, #12]
 800b0c2:	637b      	str	r3, [r7, #52]	; 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 800b0c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0c6:	781b      	ldrb	r3, [r3, #0]
 800b0c8:	2b02      	cmp	r3, #2
 800b0ca:	d10f      	bne.n	800b0ec <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800b0cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ce:	f7fd fd4b 	bl	8008b68 <ld_word>
 800b0d2:	4603      	mov	r3, r0
 800b0d4:	2b00      	cmp	r3, #0
 800b0d6:	d102      	bne.n	800b0de <f_getfree+0x104>
 800b0d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0da:	3301      	adds	r3, #1
 800b0dc:	643b      	str	r3, [r7, #64]	; 0x40
							p += 2; i -= 2;
 800b0de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b0e0:	3302      	adds	r3, #2
 800b0e2:	633b      	str	r3, [r7, #48]	; 0x30
 800b0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b0e6:	3b02      	subs	r3, #2
 800b0e8:	637b      	str	r3, [r7, #52]	; 0x34
 800b0ea:	e010      	b.n	800b10e <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800b0ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b0ee:	f7fd fd53 	bl	8008b98 <ld_dword>
 800b0f2:	4603      	mov	r3, r0
 800b0f4:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b0f8:	2b00      	cmp	r3, #0
 800b0fa:	d102      	bne.n	800b102 <f_getfree+0x128>
 800b0fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b0fe:	3301      	adds	r3, #1
 800b100:	643b      	str	r3, [r7, #64]	; 0x40
							p += 4; i -= 4;
 800b102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b104:	3304      	adds	r3, #4
 800b106:	633b      	str	r3, [r7, #48]	; 0x30
 800b108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10a:	3b04      	subs	r3, #4
 800b10c:	637b      	str	r3, [r7, #52]	; 0x34
						}
					} while (--clst);
 800b10e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b110:	3b01      	subs	r3, #1
 800b112:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b114:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b116:	2b00      	cmp	r3, #0
 800b118:	d1bd      	bne.n	800b096 <f_getfree+0xbc>
 800b11a:	e000      	b.n	800b11e <f_getfree+0x144>
							if (res != FR_OK) break;
 800b11c:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b122:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 800b124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b126:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b128:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800b12a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12c:	791a      	ldrb	r2, [r3, #4]
 800b12e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b130:	f042 0201 	orr.w	r2, r2, #1
 800b134:	b2d2      	uxtb	r2, r2
 800b136:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800b138:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3748      	adds	r7, #72	; 0x48
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800b144:	b480      	push	{r7}
 800b146:	b087      	sub	sp, #28
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	4613      	mov	r3, r2
 800b150:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800b152:	2301      	movs	r3, #1
 800b154:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800b156:	2300      	movs	r3, #0
 800b158:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800b15a:	4b1f      	ldr	r3, [pc, #124]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b15c:	7a5b      	ldrb	r3, [r3, #9]
 800b15e:	b2db      	uxtb	r3, r3
 800b160:	2b00      	cmp	r3, #0
 800b162:	d131      	bne.n	800b1c8 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800b164:	4b1c      	ldr	r3, [pc, #112]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b166:	7a5b      	ldrb	r3, [r3, #9]
 800b168:	b2db      	uxtb	r3, r3
 800b16a:	461a      	mov	r2, r3
 800b16c:	4b1a      	ldr	r3, [pc, #104]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b16e:	2100      	movs	r1, #0
 800b170:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800b172:	4b19      	ldr	r3, [pc, #100]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b174:	7a5b      	ldrb	r3, [r3, #9]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	4a17      	ldr	r2, [pc, #92]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b17a:	009b      	lsls	r3, r3, #2
 800b17c:	4413      	add	r3, r2
 800b17e:	68fa      	ldr	r2, [r7, #12]
 800b180:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800b182:	4b15      	ldr	r3, [pc, #84]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b184:	7a5b      	ldrb	r3, [r3, #9]
 800b186:	b2db      	uxtb	r3, r3
 800b188:	461a      	mov	r2, r3
 800b18a:	4b13      	ldr	r3, [pc, #76]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b18c:	4413      	add	r3, r2
 800b18e:	79fa      	ldrb	r2, [r7, #7]
 800b190:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800b192:	4b11      	ldr	r3, [pc, #68]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b194:	7a5b      	ldrb	r3, [r3, #9]
 800b196:	b2db      	uxtb	r3, r3
 800b198:	1c5a      	adds	r2, r3, #1
 800b19a:	b2d1      	uxtb	r1, r2
 800b19c:	4a0e      	ldr	r2, [pc, #56]	; (800b1d8 <FATFS_LinkDriverEx+0x94>)
 800b19e:	7251      	strb	r1, [r2, #9]
 800b1a0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800b1a2:	7dbb      	ldrb	r3, [r7, #22]
 800b1a4:	3330      	adds	r3, #48	; 0x30
 800b1a6:	b2da      	uxtb	r2, r3
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	223a      	movs	r2, #58	; 0x3a
 800b1b2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800b1b4:	68bb      	ldr	r3, [r7, #8]
 800b1b6:	3302      	adds	r3, #2
 800b1b8:	222f      	movs	r2, #47	; 0x2f
 800b1ba:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800b1bc:	68bb      	ldr	r3, [r7, #8]
 800b1be:	3303      	adds	r3, #3
 800b1c0:	2200      	movs	r2, #0
 800b1c2:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800b1c8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	371c      	adds	r7, #28
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr
 800b1d6:	bf00      	nop
 800b1d8:	200000dc 	.word	0x200000dc

0800b1dc <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800b1dc:	b580      	push	{r7, lr}
 800b1de:	b082      	sub	sp, #8
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800b1e6:	2200      	movs	r2, #0
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f7ff ffaa 	bl	800b144 <FATFS_LinkDriverEx>
 800b1f0:	4603      	mov	r3, r0
}
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	3708      	adds	r7, #8
 800b1f6:	46bd      	mov	sp, r7
 800b1f8:	bd80      	pop	{r7, pc}
	...

0800b1fc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */
  
  /* USER CODE END USB_HOST_Init_PreTreatment */
  
  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800b200:	2201      	movs	r2, #1
 800b202:	490e      	ldr	r1, [pc, #56]	; (800b23c <MX_USB_HOST_Init+0x40>)
 800b204:	480e      	ldr	r0, [pc, #56]	; (800b240 <MX_USB_HOST_Init+0x44>)
 800b206:	f7fc f8b7 	bl	8007378 <USBH_Init>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b210:	f7f5 fd66 	bl	8000ce0 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800b214:	490b      	ldr	r1, [pc, #44]	; (800b244 <MX_USB_HOST_Init+0x48>)
 800b216:	480a      	ldr	r0, [pc, #40]	; (800b240 <MX_USB_HOST_Init+0x44>)
 800b218:	f7fc f93c 	bl	8007494 <USBH_RegisterClass>
 800b21c:	4603      	mov	r3, r0
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d001      	beq.n	800b226 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b222:	f7f5 fd5d 	bl	8000ce0 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800b226:	4806      	ldr	r0, [pc, #24]	; (800b240 <MX_USB_HOST_Init+0x44>)
 800b228:	f7fc f9c0 	bl	80075ac <USBH_Start>
 800b22c:	4603      	mov	r3, r0
 800b22e:	2b00      	cmp	r3, #0
 800b230:	d001      	beq.n	800b236 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b232:	f7f5 fd55 	bl	8000ce0 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */
  
  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b236:	bf00      	nop
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	0800b25d 	.word	0x0800b25d
 800b240:	20002220 	.word	0x20002220
 800b244:	2000000c 	.word	0x2000000c

0800b248 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b248:	b580      	push	{r7, lr}
 800b24a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800b24c:	4802      	ldr	r0, [pc, #8]	; (800b258 <MX_USB_HOST_Process+0x10>)
 800b24e:	f7fc f9bd 	bl	80075cc <USBH_Process>
}
 800b252:	bf00      	nop
 800b254:	bd80      	pop	{r7, pc}
 800b256:	bf00      	nop
 800b258:	20002220 	.word	0x20002220

0800b25c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b25c:	b580      	push	{r7, lr}
 800b25e:	b082      	sub	sp, #8
 800b260:	af00      	add	r7, sp, #0
 800b262:	6078      	str	r0, [r7, #4]
 800b264:	460b      	mov	r3, r1
 800b266:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b268:	78fb      	ldrb	r3, [r7, #3]
 800b26a:	3b01      	subs	r3, #1
 800b26c:	2b04      	cmp	r3, #4
 800b26e:	d82d      	bhi.n	800b2cc <USBH_UserProcess+0x70>
 800b270:	a201      	add	r2, pc, #4	; (adr r2, 800b278 <USBH_UserProcess+0x1c>)
 800b272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b276:	bf00      	nop
 800b278:	0800b2cd 	.word	0x0800b2cd
 800b27c:	0800b299 	.word	0x0800b299
 800b280:	0800b2cd 	.word	0x0800b2cd
 800b284:	0800b2c5 	.word	0x0800b2c5
 800b288:	0800b28d 	.word	0x0800b28d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b28c:	4b13      	ldr	r3, [pc, #76]	; (800b2dc <USBH_UserProcess+0x80>)
 800b28e:	2203      	movs	r2, #3
 800b290:	701a      	strb	r2, [r3, #0]
  Unmount_USB();
 800b292:	f7f5 f9e5 	bl	8000660 <Unmount_USB>
  break;
 800b296:	e01c      	b.n	800b2d2 <USBH_UserProcess+0x76>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b298:	4b10      	ldr	r3, [pc, #64]	; (800b2dc <USBH_UserProcess+0x80>)
 800b29a:	2202      	movs	r2, #2
 800b29c:	701a      	strb	r2, [r3, #0]
  if (!has_written) {
 800b29e:	4b10      	ldr	r3, [pc, #64]	; (800b2e0 <USBH_UserProcess+0x84>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d114      	bne.n	800b2d0 <USBH_UserProcess+0x74>
   Mount_USB();
 800b2a6:	f7f5 f9b9 	bl	800061c <Mount_USB>

   Check_USB_Details();   // check space details
 800b2aa:	f7f5 fb59 	bl	8000960 <Check_USB_Details>


   Create_File("/ROOTFILE.txt");
 800b2ae:	480d      	ldr	r0, [pc, #52]	; (800b2e4 <USBH_UserProcess+0x88>)
 800b2b0:	f7f5 faba 	bl	8000828 <Create_File>
   Write_File("/ROOTFILE.txt", "This data should be in root file\n");
 800b2b4:	490c      	ldr	r1, [pc, #48]	; (800b2e8 <USBH_UserProcess+0x8c>)
 800b2b6:	480b      	ldr	r0, [pc, #44]	; (800b2e4 <USBH_UserProcess+0x88>)
 800b2b8:	f7f5 f9f2 	bl	80006a0 <Write_File>
   has_written = 1;
 800b2bc:	4b08      	ldr	r3, [pc, #32]	; (800b2e0 <USBH_UserProcess+0x84>)
 800b2be:	2201      	movs	r2, #1
 800b2c0:	601a      	str	r2, [r3, #0]
  }
  break;
 800b2c2:	e005      	b.n	800b2d0 <USBH_UserProcess+0x74>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b2c4:	4b05      	ldr	r3, [pc, #20]	; (800b2dc <USBH_UserProcess+0x80>)
 800b2c6:	2201      	movs	r2, #1
 800b2c8:	701a      	strb	r2, [r3, #0]

  break;
 800b2ca:	e002      	b.n	800b2d2 <USBH_UserProcess+0x76>

  default:
  break;
 800b2cc:	bf00      	nop
 800b2ce:	e000      	b.n	800b2d2 <USBH_UserProcess+0x76>
  break;
 800b2d0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b2d2:	bf00      	nop
 800b2d4:	3708      	adds	r7, #8
 800b2d6:	46bd      	mov	sp, r7
 800b2d8:	bd80      	pop	{r7, pc}
 800b2da:	bf00      	nop
 800b2dc:	200000ec 	.word	0x200000ec
 800b2e0:	200000e8 	.word	0x200000e8
 800b2e4:	0800c610 	.word	0x0800c610
 800b2e8:	0800c620 	.word	0x0800c620

0800b2ec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b08a      	sub	sp, #40	; 0x28
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b2f4:	f107 0314 	add.w	r3, r7, #20
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	601a      	str	r2, [r3, #0]
 800b2fc:	605a      	str	r2, [r3, #4]
 800b2fe:	609a      	str	r2, [r3, #8]
 800b300:	60da      	str	r2, [r3, #12]
 800b302:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	681b      	ldr	r3, [r3, #0]
 800b308:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b30c:	d149      	bne.n	800b3a2 <HAL_HCD_MspInit+0xb6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b30e:	4b27      	ldr	r3, [pc, #156]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b312:	4a26      	ldr	r2, [pc, #152]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b314:	f043 0301 	orr.w	r3, r3, #1
 800b318:	6313      	str	r3, [r2, #48]	; 0x30
 800b31a:	4b24      	ldr	r3, [pc, #144]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b31c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b31e:	f003 0301 	and.w	r3, r3, #1
 800b322:	613b      	str	r3, [r7, #16]
 800b324:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration    
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800b326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b32a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b32c:	2300      	movs	r3, #0
 800b32e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b330:	2300      	movs	r3, #0
 800b332:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b334:	f107 0314 	add.w	r3, r7, #20
 800b338:	4619      	mov	r1, r3
 800b33a:	481d      	ldr	r0, [pc, #116]	; (800b3b0 <HAL_HCD_MspInit+0xc4>)
 800b33c:	f7f5 ff7a 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800b340:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800b344:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b346:	2302      	movs	r3, #2
 800b348:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b34a:	2300      	movs	r3, #0
 800b34c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b34e:	2303      	movs	r3, #3
 800b350:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b352:	230a      	movs	r3, #10
 800b354:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b356:	f107 0314 	add.w	r3, r7, #20
 800b35a:	4619      	mov	r1, r3
 800b35c:	4814      	ldr	r0, [pc, #80]	; (800b3b0 <HAL_HCD_MspInit+0xc4>)
 800b35e:	f7f5 ff69 	bl	8001234 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b362:	4b12      	ldr	r3, [pc, #72]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b366:	4a11      	ldr	r2, [pc, #68]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b368:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b36c:	6353      	str	r3, [r2, #52]	; 0x34
 800b36e:	4b0f      	ldr	r3, [pc, #60]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b376:	60fb      	str	r3, [r7, #12]
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	4b0c      	ldr	r3, [pc, #48]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b37c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b37e:	4a0b      	ldr	r2, [pc, #44]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b380:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b384:	6453      	str	r3, [r2, #68]	; 0x44
 800b386:	4b09      	ldr	r3, [pc, #36]	; (800b3ac <HAL_HCD_MspInit+0xc0>)
 800b388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b38a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b38e:	60bb      	str	r3, [r7, #8]
 800b390:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b392:	2200      	movs	r2, #0
 800b394:	2100      	movs	r1, #0
 800b396:	2043      	movs	r0, #67	; 0x43
 800b398:	f7f5 ff15 	bl	80011c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b39c:	2043      	movs	r0, #67	; 0x43
 800b39e:	f7f5 ff2e 	bl	80011fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b3a2:	bf00      	nop
 800b3a4:	3728      	adds	r7, #40	; 0x28
 800b3a6:	46bd      	mov	sp, r7
 800b3a8:	bd80      	pop	{r7, pc}
 800b3aa:	bf00      	nop
 800b3ac:	40023800 	.word	0x40023800
 800b3b0:	40020000 	.word	0x40020000

0800b3b4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3b4:	b580      	push	{r7, lr}
 800b3b6:	b082      	sub	sp, #8
 800b3b8:	af00      	add	r7, sp, #0
 800b3ba:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3c2:	4618      	mov	r0, r3
 800b3c4:	f7fc fcd5 	bl	8007d72 <USBH_LL_IncTimer>
}
 800b3c8:	bf00      	nop
 800b3ca:	3708      	adds	r7, #8
 800b3cc:	46bd      	mov	sp, r7
 800b3ce:	bd80      	pop	{r7, pc}

0800b3d0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3d0:	b580      	push	{r7, lr}
 800b3d2:	b082      	sub	sp, #8
 800b3d4:	af00      	add	r7, sp, #0
 800b3d6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3de:	4618      	mov	r0, r3
 800b3e0:	f7fc fd0d 	bl	8007dfe <USBH_LL_Connect>
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b082      	sub	sp, #8
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f7fc fd16 	bl	8007e2c <USBH_LL_Disconnect>
}
 800b400:	bf00      	nop
 800b402:	3708      	adds	r7, #8
 800b404:	46bd      	mov	sp, r7
 800b406:	bd80      	pop	{r7, pc}

0800b408 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b408:	b480      	push	{r7}
 800b40a:	b083      	sub	sp, #12
 800b40c:	af00      	add	r7, sp, #0
 800b40e:	6078      	str	r0, [r7, #4]
 800b410:	460b      	mov	r3, r1
 800b412:	70fb      	strb	r3, [r7, #3]
 800b414:	4613      	mov	r3, r2
 800b416:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b418:	bf00      	nop
 800b41a:	370c      	adds	r7, #12
 800b41c:	46bd      	mov	sp, r7
 800b41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b422:	4770      	bx	lr

0800b424 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b424:	b580      	push	{r7, lr}
 800b426:	b082      	sub	sp, #8
 800b428:	af00      	add	r7, sp, #0
 800b42a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b432:	4618      	mov	r0, r3
 800b434:	f7fc fcc7 	bl	8007dc6 <USBH_LL_PortEnabled>
} 
 800b438:	bf00      	nop
 800b43a:	3708      	adds	r7, #8
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}

0800b440 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b440:	b580      	push	{r7, lr}
 800b442:	b082      	sub	sp, #8
 800b444:	af00      	add	r7, sp, #0
 800b446:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800b44e:	4618      	mov	r0, r3
 800b450:	f7fc fcc7 	bl	8007de2 <USBH_LL_PortDisabled>
} 
 800b454:	bf00      	nop
 800b456:	3708      	adds	r7, #8
 800b458:	46bd      	mov	sp, r7
 800b45a:	bd80      	pop	{r7, pc}

0800b45c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b45c:	b580      	push	{r7, lr}
 800b45e:	b082      	sub	sp, #8
 800b460:	af00      	add	r7, sp, #0
 800b462:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800b46a:	2b01      	cmp	r3, #1
 800b46c:	d12a      	bne.n	800b4c4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800b46e:	4a18      	ldr	r2, [pc, #96]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	f8c2 32c0 	str.w	r3, [r2, #704]	; 0x2c0
  phost->pData = &hhcd_USB_OTG_FS;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	4a15      	ldr	r2, [pc, #84]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b47a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b47e:	4b14      	ldr	r3, [pc, #80]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b480:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b484:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800b486:	4b12      	ldr	r3, [pc, #72]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b488:	2208      	movs	r2, #8
 800b48a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800b48c:	4b10      	ldr	r3, [pc, #64]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b48e:	2201      	movs	r2, #1
 800b490:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b492:	4b0f      	ldr	r3, [pc, #60]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b494:	2200      	movs	r2, #0
 800b496:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800b498:	4b0d      	ldr	r3, [pc, #52]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b49a:	2202      	movs	r2, #2
 800b49c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b49e:	4b0c      	ldr	r3, [pc, #48]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b4a0:	2200      	movs	r2, #0
 800b4a2:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800b4a4:	480a      	ldr	r0, [pc, #40]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b4a6:	f7f6 f888 	bl	80015ba <HAL_HCD_Init>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d001      	beq.n	800b4b4 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800b4b0:	f7f5 fc16 	bl	8000ce0 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800b4b4:	4806      	ldr	r0, [pc, #24]	; (800b4d0 <USBH_LL_Init+0x74>)
 800b4b6:	f7f6 fc8b 	bl	8001dd0 <HAL_HCD_GetCurrentFrame>
 800b4ba:	4603      	mov	r3, r0
 800b4bc:	4619      	mov	r1, r3
 800b4be:	6878      	ldr	r0, [r7, #4]
 800b4c0:	f7fc fc48 	bl	8007d54 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b4c4:	2300      	movs	r3, #0
}
 800b4c6:	4618      	mov	r0, r3
 800b4c8:	3708      	adds	r7, #8
 800b4ca:	46bd      	mov	sp, r7
 800b4cc:	bd80      	pop	{r7, pc}
 800b4ce:	bf00      	nop
 800b4d0:	200025f8 	.word	0x200025f8

0800b4d4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b4d4:	b580      	push	{r7, lr}
 800b4d6:	b084      	sub	sp, #16
 800b4d8:	af00      	add	r7, sp, #0
 800b4da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b4dc:	2300      	movs	r3, #0
 800b4de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	f7f6 fbf8 	bl	8001ce0 <HAL_HCD_Start>
 800b4f0:	4603      	mov	r3, r0
 800b4f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4f4:	7bfb      	ldrb	r3, [r7, #15]
 800b4f6:	4618      	mov	r0, r3
 800b4f8:	f000 f986 	bl	800b808 <USBH_Get_USB_Status>
 800b4fc:	4603      	mov	r3, r0
 800b4fe:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b500:	7bbb      	ldrb	r3, [r7, #14]
}
 800b502:	4618      	mov	r0, r3
 800b504:	3710      	adds	r7, #16
 800b506:	46bd      	mov	sp, r7
 800b508:	bd80      	pop	{r7, pc}

0800b50a <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b50a:	b580      	push	{r7, lr}
 800b50c:	b084      	sub	sp, #16
 800b50e:	af00      	add	r7, sp, #0
 800b510:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b512:	2300      	movs	r3, #0
 800b514:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b516:	2300      	movs	r3, #0
 800b518:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b520:	4618      	mov	r0, r3
 800b522:	f7f6 fc00 	bl	8001d26 <HAL_HCD_Stop>
 800b526:	4603      	mov	r3, r0
 800b528:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b52a:	7bfb      	ldrb	r3, [r7, #15]
 800b52c:	4618      	mov	r0, r3
 800b52e:	f000 f96b 	bl	800b808 <USBH_Get_USB_Status>
 800b532:	4603      	mov	r3, r0
 800b534:	73bb      	strb	r3, [r7, #14]
 
  return usb_status;
 800b536:	7bbb      	ldrb	r3, [r7, #14]
}
 800b538:	4618      	mov	r0, r3
 800b53a:	3710      	adds	r7, #16
 800b53c:	46bd      	mov	sp, r7
 800b53e:	bd80      	pop	{r7, pc}

0800b540 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b540:	b580      	push	{r7, lr}
 800b542:	b084      	sub	sp, #16
 800b544:	af00      	add	r7, sp, #0
 800b546:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b548:	2301      	movs	r3, #1
 800b54a:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b552:	4618      	mov	r0, r3
 800b554:	f7f6 fc4a 	bl	8001dec <HAL_HCD_GetCurrentSpeed>
 800b558:	4603      	mov	r3, r0
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d007      	beq.n	800b56e <USBH_LL_GetSpeed+0x2e>
 800b55e:	2b01      	cmp	r3, #1
 800b560:	d302      	bcc.n	800b568 <USBH_LL_GetSpeed+0x28>
 800b562:	2b02      	cmp	r3, #2
 800b564:	d006      	beq.n	800b574 <USBH_LL_GetSpeed+0x34>
 800b566:	e008      	b.n	800b57a <USBH_LL_GetSpeed+0x3a>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b568:	2300      	movs	r3, #0
 800b56a:	73fb      	strb	r3, [r7, #15]
    break;
 800b56c:	e008      	b.n	800b580 <USBH_LL_GetSpeed+0x40>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b56e:	2301      	movs	r3, #1
 800b570:	73fb      	strb	r3, [r7, #15]
    break;
 800b572:	e005      	b.n	800b580 <USBH_LL_GetSpeed+0x40>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b574:	2302      	movs	r3, #2
 800b576:	73fb      	strb	r3, [r7, #15]
    break;
 800b578:	e002      	b.n	800b580 <USBH_LL_GetSpeed+0x40>

  default:
   speed = USBH_SPEED_FULL;
 800b57a:	2301      	movs	r3, #1
 800b57c:	73fb      	strb	r3, [r7, #15]
    break;
 800b57e:	bf00      	nop
  }
  return  speed;
 800b580:	7bfb      	ldrb	r3, [r7, #15]
}
 800b582:	4618      	mov	r0, r3
 800b584:	3710      	adds	r7, #16
 800b586:	46bd      	mov	sp, r7
 800b588:	bd80      	pop	{r7, pc}

0800b58a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b58a:	b580      	push	{r7, lr}
 800b58c:	b084      	sub	sp, #16
 800b58e:	af00      	add	r7, sp, #0
 800b590:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b592:	2300      	movs	r3, #0
 800b594:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b596:	2300      	movs	r3, #0
 800b598:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5a0:	4618      	mov	r0, r3
 800b5a2:	f7f6 fbdd 	bl	8001d60 <HAL_HCD_ResetPort>
 800b5a6:	4603      	mov	r3, r0
 800b5a8:	73fb      	strb	r3, [r7, #15]
  
  usb_status = USBH_Get_USB_Status(hal_status);
 800b5aa:	7bfb      	ldrb	r3, [r7, #15]
 800b5ac:	4618      	mov	r0, r3
 800b5ae:	f000 f92b 	bl	800b808 <USBH_Get_USB_Status>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b5b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5c0:	b580      	push	{r7, lr}
 800b5c2:	b082      	sub	sp, #8
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
 800b5c8:	460b      	mov	r3, r1
 800b5ca:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b5d2:	78fa      	ldrb	r2, [r7, #3]
 800b5d4:	4611      	mov	r1, r2
 800b5d6:	4618      	mov	r0, r3
 800b5d8:	f7f6 fbe5 	bl	8001da6 <HAL_HCD_HC_GetXferCount>
 800b5dc:	4603      	mov	r3, r0
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3708      	adds	r7, #8
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b5e6:	b590      	push	{r4, r7, lr}
 800b5e8:	b089      	sub	sp, #36	; 0x24
 800b5ea:	af04      	add	r7, sp, #16
 800b5ec:	6078      	str	r0, [r7, #4]
 800b5ee:	4608      	mov	r0, r1
 800b5f0:	4611      	mov	r1, r2
 800b5f2:	461a      	mov	r2, r3
 800b5f4:	4603      	mov	r3, r0
 800b5f6:	70fb      	strb	r3, [r7, #3]
 800b5f8:	460b      	mov	r3, r1
 800b5fa:	70bb      	strb	r3, [r7, #2]
 800b5fc:	4613      	mov	r3, r2
 800b5fe:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b600:	2300      	movs	r3, #0
 800b602:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b604:	2300      	movs	r3, #0
 800b606:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b60e:	787c      	ldrb	r4, [r7, #1]
 800b610:	78ba      	ldrb	r2, [r7, #2]
 800b612:	78f9      	ldrb	r1, [r7, #3]
 800b614:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b616:	9302      	str	r3, [sp, #8]
 800b618:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800b61c:	9301      	str	r3, [sp, #4]
 800b61e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	4623      	mov	r3, r4
 800b626:	f7f6 f82a 	bl	800167e <HAL_HCD_HC_Init>
 800b62a:	4603      	mov	r3, r0
 800b62c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b62e:	7bfb      	ldrb	r3, [r7, #15]
 800b630:	4618      	mov	r0, r3
 800b632:	f000 f8e9 	bl	800b808 <USBH_Get_USB_Status>
 800b636:	4603      	mov	r3, r0
 800b638:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b63a:	7bbb      	ldrb	r3, [r7, #14]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3714      	adds	r7, #20
 800b640:	46bd      	mov	sp, r7
 800b642:	bd90      	pop	{r4, r7, pc}

0800b644 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b084      	sub	sp, #16
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
 800b64c:	460b      	mov	r3, r1
 800b64e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b650:	2300      	movs	r3, #0
 800b652:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b654:	2300      	movs	r3, #0
 800b656:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b65e:	78fa      	ldrb	r2, [r7, #3]
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f7f6 f8a3 	bl	80017ae <HAL_HCD_HC_Halt>
 800b668:	4603      	mov	r3, r0
 800b66a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b66c:	7bfb      	ldrb	r3, [r7, #15]
 800b66e:	4618      	mov	r0, r3
 800b670:	f000 f8ca 	bl	800b808 <USBH_Get_USB_Status>
 800b674:	4603      	mov	r3, r0
 800b676:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b678:	7bbb      	ldrb	r3, [r7, #14]
}
 800b67a:	4618      	mov	r0, r3
 800b67c:	3710      	adds	r7, #16
 800b67e:	46bd      	mov	sp, r7
 800b680:	bd80      	pop	{r7, pc}

0800b682 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b682:	b590      	push	{r4, r7, lr}
 800b684:	b089      	sub	sp, #36	; 0x24
 800b686:	af04      	add	r7, sp, #16
 800b688:	6078      	str	r0, [r7, #4]
 800b68a:	4608      	mov	r0, r1
 800b68c:	4611      	mov	r1, r2
 800b68e:	461a      	mov	r2, r3
 800b690:	4603      	mov	r3, r0
 800b692:	70fb      	strb	r3, [r7, #3]
 800b694:	460b      	mov	r3, r1
 800b696:	70bb      	strb	r3, [r7, #2]
 800b698:	4613      	mov	r3, r2
 800b69a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b69c:	2300      	movs	r3, #0
 800b69e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800b6aa:	787c      	ldrb	r4, [r7, #1]
 800b6ac:	78ba      	ldrb	r2, [r7, #2]
 800b6ae:	78f9      	ldrb	r1, [r7, #3]
 800b6b0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b6b4:	9303      	str	r3, [sp, #12]
 800b6b6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800b6b8:	9302      	str	r3, [sp, #8]
 800b6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6bc:	9301      	str	r3, [sp, #4]
 800b6be:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b6c2:	9300      	str	r3, [sp, #0]
 800b6c4:	4623      	mov	r3, r4
 800b6c6:	f7f6 f895 	bl	80017f4 <HAL_HCD_HC_SubmitRequest>
 800b6ca:	4603      	mov	r3, r0
 800b6cc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b6ce:	7bfb      	ldrb	r3, [r7, #15]
 800b6d0:	4618      	mov	r0, r3
 800b6d2:	f000 f899 	bl	800b808 <USBH_Get_USB_Status>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	73bb      	strb	r3, [r7, #14]
  
  return usb_status;
 800b6da:	7bbb      	ldrb	r3, [r7, #14]
}
 800b6dc:	4618      	mov	r0, r3
 800b6de:	3714      	adds	r7, #20
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bd90      	pop	{r4, r7, pc}

0800b6e4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b6e4:	b580      	push	{r7, lr}
 800b6e6:	b082      	sub	sp, #8
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
 800b6ec:	460b      	mov	r3, r1
 800b6ee:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b6f6:	78fa      	ldrb	r2, [r7, #3]
 800b6f8:	4611      	mov	r1, r2
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7f6 fb3e 	bl	8001d7c <HAL_HCD_HC_GetURBState>
 800b700:	4603      	mov	r3, r0
}
 800b702:	4618      	mov	r0, r3
 800b704:	3708      	adds	r7, #8
 800b706:	46bd      	mov	sp, r7
 800b708:	bd80      	pop	{r7, pc}

0800b70a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Active
  *           1 : VBUS Inactive
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b70a:	b580      	push	{r7, lr}
 800b70c:	b082      	sub	sp, #8
 800b70e:	af00      	add	r7, sp, #0
 800b710:	6078      	str	r0, [r7, #4]
 800b712:	460b      	mov	r3, r1
 800b714:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800b716:	20c8      	movs	r0, #200	; 0xc8
 800b718:	f7f5 fc58 	bl	8000fcc <HAL_Delay>
  return USBH_OK;
 800b71c:	2300      	movs	r3, #0
}
 800b71e:	4618      	mov	r0, r3
 800b720:	3708      	adds	r7, #8
 800b722:	46bd      	mov	sp, r7
 800b724:	bd80      	pop	{r7, pc}

0800b726 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b726:	b480      	push	{r7}
 800b728:	b085      	sub	sp, #20
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
 800b72e:	460b      	mov	r3, r1
 800b730:	70fb      	strb	r3, [r7, #3]
 800b732:	4613      	mov	r3, r2
 800b734:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b736:	687b      	ldr	r3, [r7, #4]
 800b738:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b73c:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b73e:	78fa      	ldrb	r2, [r7, #3]
 800b740:	68f9      	ldr	r1, [r7, #12]
 800b742:	4613      	mov	r3, r2
 800b744:	009b      	lsls	r3, r3, #2
 800b746:	4413      	add	r3, r2
 800b748:	00db      	lsls	r3, r3, #3
 800b74a:	440b      	add	r3, r1
 800b74c:	333b      	adds	r3, #59	; 0x3b
 800b74e:	781b      	ldrb	r3, [r3, #0]
 800b750:	2b00      	cmp	r3, #0
 800b752:	d00a      	beq.n	800b76a <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b754:	78fa      	ldrb	r2, [r7, #3]
 800b756:	68f9      	ldr	r1, [r7, #12]
 800b758:	4613      	mov	r3, r2
 800b75a:	009b      	lsls	r3, r3, #2
 800b75c:	4413      	add	r3, r2
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	440b      	add	r3, r1
 800b762:	3350      	adds	r3, #80	; 0x50
 800b764:	78ba      	ldrb	r2, [r7, #2]
 800b766:	701a      	strb	r2, [r3, #0]
 800b768:	e009      	b.n	800b77e <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b76a:	78fa      	ldrb	r2, [r7, #3]
 800b76c:	68f9      	ldr	r1, [r7, #12]
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	00db      	lsls	r3, r3, #3
 800b776:	440b      	add	r3, r1
 800b778:	3351      	adds	r3, #81	; 0x51
 800b77a:	78ba      	ldrb	r2, [r7, #2]
 800b77c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b77e:	2300      	movs	r3, #0
}
 800b780:	4618      	mov	r0, r3
 800b782:	3714      	adds	r7, #20
 800b784:	46bd      	mov	sp, r7
 800b786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78a:	4770      	bx	lr

0800b78c <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b78c:	b480      	push	{r7}
 800b78e:	b085      	sub	sp, #20
 800b790:	af00      	add	r7, sp, #0
 800b792:	6078      	str	r0, [r7, #4]
 800b794:	460b      	mov	r3, r1
 800b796:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800b798:	2300      	movs	r3, #0
 800b79a:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800b7a2:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800b7a4:	78fa      	ldrb	r2, [r7, #3]
 800b7a6:	68b9      	ldr	r1, [r7, #8]
 800b7a8:	4613      	mov	r3, r2
 800b7aa:	009b      	lsls	r3, r3, #2
 800b7ac:	4413      	add	r3, r2
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	440b      	add	r3, r1
 800b7b2:	333b      	adds	r3, #59	; 0x3b
 800b7b4:	781b      	ldrb	r3, [r3, #0]
 800b7b6:	2b00      	cmp	r3, #0
 800b7b8:	d00a      	beq.n	800b7d0 <USBH_LL_GetToggle+0x44>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800b7ba:	78fa      	ldrb	r2, [r7, #3]
 800b7bc:	68b9      	ldr	r1, [r7, #8]
 800b7be:	4613      	mov	r3, r2
 800b7c0:	009b      	lsls	r3, r3, #2
 800b7c2:	4413      	add	r3, r2
 800b7c4:	00db      	lsls	r3, r3, #3
 800b7c6:	440b      	add	r3, r1
 800b7c8:	3350      	adds	r3, #80	; 0x50
 800b7ca:	781b      	ldrb	r3, [r3, #0]
 800b7cc:	73fb      	strb	r3, [r7, #15]
 800b7ce:	e009      	b.n	800b7e4 <USBH_LL_GetToggle+0x58>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800b7d0:	78fa      	ldrb	r2, [r7, #3]
 800b7d2:	68b9      	ldr	r1, [r7, #8]
 800b7d4:	4613      	mov	r3, r2
 800b7d6:	009b      	lsls	r3, r3, #2
 800b7d8:	4413      	add	r3, r2
 800b7da:	00db      	lsls	r3, r3, #3
 800b7dc:	440b      	add	r3, r1
 800b7de:	3351      	adds	r3, #81	; 0x51
 800b7e0:	781b      	ldrb	r3, [r3, #0]
 800b7e2:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800b7e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7e6:	4618      	mov	r0, r3
 800b7e8:	3714      	adds	r7, #20
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f0:	4770      	bx	lr

0800b7f2 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b7f2:	b580      	push	{r7, lr}
 800b7f4:	b082      	sub	sp, #8
 800b7f6:	af00      	add	r7, sp, #0
 800b7f8:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b7fa:	6878      	ldr	r0, [r7, #4]
 800b7fc:	f7f5 fbe6 	bl	8000fcc <HAL_Delay>
}
 800b800:	bf00      	nop
 800b802:	3708      	adds	r7, #8
 800b804:	46bd      	mov	sp, r7
 800b806:	bd80      	pop	{r7, pc}

0800b808 <USBH_Get_USB_Status>:
  * @brief  Retuns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b808:	b480      	push	{r7}
 800b80a:	b085      	sub	sp, #20
 800b80c:	af00      	add	r7, sp, #0
 800b80e:	4603      	mov	r3, r0
 800b810:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b812:	2300      	movs	r3, #0
 800b814:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	2b03      	cmp	r3, #3
 800b81a:	d817      	bhi.n	800b84c <USBH_Get_USB_Status+0x44>
 800b81c:	a201      	add	r2, pc, #4	; (adr r2, 800b824 <USBH_Get_USB_Status+0x1c>)
 800b81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b822:	bf00      	nop
 800b824:	0800b835 	.word	0x0800b835
 800b828:	0800b83b 	.word	0x0800b83b
 800b82c:	0800b841 	.word	0x0800b841
 800b830:	0800b847 	.word	0x0800b847
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b834:	2300      	movs	r3, #0
 800b836:	73fb      	strb	r3, [r7, #15]
    break;
 800b838:	e00b      	b.n	800b852 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b83a:	2302      	movs	r3, #2
 800b83c:	73fb      	strb	r3, [r7, #15]
    break;
 800b83e:	e008      	b.n	800b852 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b840:	2301      	movs	r3, #1
 800b842:	73fb      	strb	r3, [r7, #15]
    break;
 800b844:	e005      	b.n	800b852 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b846:	2302      	movs	r3, #2
 800b848:	73fb      	strb	r3, [r7, #15]
    break;
 800b84a:	e002      	b.n	800b852 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b84c:	2302      	movs	r3, #2
 800b84e:	73fb      	strb	r3, [r7, #15]
    break;
 800b850:	bf00      	nop
  }
  return usb_status;
 800b852:	7bfb      	ldrb	r3, [r7, #15]
}
 800b854:	4618      	mov	r0, r3
 800b856:	3714      	adds	r7, #20
 800b858:	46bd      	mov	sp, r7
 800b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b85e:	4770      	bx	lr

0800b860 <__errno>:
 800b860:	4b01      	ldr	r3, [pc, #4]	; (800b868 <__errno+0x8>)
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	2000002c 	.word	0x2000002c

0800b86c <__libc_init_array>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	4e0d      	ldr	r6, [pc, #52]	; (800b8a4 <__libc_init_array+0x38>)
 800b870:	4c0d      	ldr	r4, [pc, #52]	; (800b8a8 <__libc_init_array+0x3c>)
 800b872:	1ba4      	subs	r4, r4, r6
 800b874:	10a4      	asrs	r4, r4, #2
 800b876:	2500      	movs	r5, #0
 800b878:	42a5      	cmp	r5, r4
 800b87a:	d109      	bne.n	800b890 <__libc_init_array+0x24>
 800b87c:	4e0b      	ldr	r6, [pc, #44]	; (800b8ac <__libc_init_array+0x40>)
 800b87e:	4c0c      	ldr	r4, [pc, #48]	; (800b8b0 <__libc_init_array+0x44>)
 800b880:	f000 fc38 	bl	800c0f4 <_init>
 800b884:	1ba4      	subs	r4, r4, r6
 800b886:	10a4      	asrs	r4, r4, #2
 800b888:	2500      	movs	r5, #0
 800b88a:	42a5      	cmp	r5, r4
 800b88c:	d105      	bne.n	800b89a <__libc_init_array+0x2e>
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b894:	4798      	blx	r3
 800b896:	3501      	adds	r5, #1
 800b898:	e7ee      	b.n	800b878 <__libc_init_array+0xc>
 800b89a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b89e:	4798      	blx	r3
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	e7f2      	b.n	800b88a <__libc_init_array+0x1e>
 800b8a4:	0800c72c 	.word	0x0800c72c
 800b8a8:	0800c72c 	.word	0x0800c72c
 800b8ac:	0800c72c 	.word	0x0800c72c
 800b8b0:	0800c730 	.word	0x0800c730

0800b8b4 <malloc>:
 800b8b4:	4b02      	ldr	r3, [pc, #8]	; (800b8c0 <malloc+0xc>)
 800b8b6:	4601      	mov	r1, r0
 800b8b8:	6818      	ldr	r0, [r3, #0]
 800b8ba:	f000 b86d 	b.w	800b998 <_malloc_r>
 800b8be:	bf00      	nop
 800b8c0:	2000002c 	.word	0x2000002c

0800b8c4 <free>:
 800b8c4:	4b02      	ldr	r3, [pc, #8]	; (800b8d0 <free+0xc>)
 800b8c6:	4601      	mov	r1, r0
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f000 b817 	b.w	800b8fc <_free_r>
 800b8ce:	bf00      	nop
 800b8d0:	2000002c 	.word	0x2000002c

0800b8d4 <memcpy>:
 800b8d4:	b510      	push	{r4, lr}
 800b8d6:	1e43      	subs	r3, r0, #1
 800b8d8:	440a      	add	r2, r1
 800b8da:	4291      	cmp	r1, r2
 800b8dc:	d100      	bne.n	800b8e0 <memcpy+0xc>
 800b8de:	bd10      	pop	{r4, pc}
 800b8e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8e8:	e7f7      	b.n	800b8da <memcpy+0x6>

0800b8ea <memset>:
 800b8ea:	4402      	add	r2, r0
 800b8ec:	4603      	mov	r3, r0
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d100      	bne.n	800b8f4 <memset+0xa>
 800b8f2:	4770      	bx	lr
 800b8f4:	f803 1b01 	strb.w	r1, [r3], #1
 800b8f8:	e7f9      	b.n	800b8ee <memset+0x4>
	...

0800b8fc <_free_r>:
 800b8fc:	b538      	push	{r3, r4, r5, lr}
 800b8fe:	4605      	mov	r5, r0
 800b900:	2900      	cmp	r1, #0
 800b902:	d045      	beq.n	800b990 <_free_r+0x94>
 800b904:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b908:	1f0c      	subs	r4, r1, #4
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	bfb8      	it	lt
 800b90e:	18e4      	addlt	r4, r4, r3
 800b910:	f000 f8cc 	bl	800baac <__malloc_lock>
 800b914:	4a1f      	ldr	r2, [pc, #124]	; (800b994 <_free_r+0x98>)
 800b916:	6813      	ldr	r3, [r2, #0]
 800b918:	4610      	mov	r0, r2
 800b91a:	b933      	cbnz	r3, 800b92a <_free_r+0x2e>
 800b91c:	6063      	str	r3, [r4, #4]
 800b91e:	6014      	str	r4, [r2, #0]
 800b920:	4628      	mov	r0, r5
 800b922:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b926:	f000 b8c2 	b.w	800baae <__malloc_unlock>
 800b92a:	42a3      	cmp	r3, r4
 800b92c:	d90c      	bls.n	800b948 <_free_r+0x4c>
 800b92e:	6821      	ldr	r1, [r4, #0]
 800b930:	1862      	adds	r2, r4, r1
 800b932:	4293      	cmp	r3, r2
 800b934:	bf04      	itt	eq
 800b936:	681a      	ldreq	r2, [r3, #0]
 800b938:	685b      	ldreq	r3, [r3, #4]
 800b93a:	6063      	str	r3, [r4, #4]
 800b93c:	bf04      	itt	eq
 800b93e:	1852      	addeq	r2, r2, r1
 800b940:	6022      	streq	r2, [r4, #0]
 800b942:	6004      	str	r4, [r0, #0]
 800b944:	e7ec      	b.n	800b920 <_free_r+0x24>
 800b946:	4613      	mov	r3, r2
 800b948:	685a      	ldr	r2, [r3, #4]
 800b94a:	b10a      	cbz	r2, 800b950 <_free_r+0x54>
 800b94c:	42a2      	cmp	r2, r4
 800b94e:	d9fa      	bls.n	800b946 <_free_r+0x4a>
 800b950:	6819      	ldr	r1, [r3, #0]
 800b952:	1858      	adds	r0, r3, r1
 800b954:	42a0      	cmp	r0, r4
 800b956:	d10b      	bne.n	800b970 <_free_r+0x74>
 800b958:	6820      	ldr	r0, [r4, #0]
 800b95a:	4401      	add	r1, r0
 800b95c:	1858      	adds	r0, r3, r1
 800b95e:	4282      	cmp	r2, r0
 800b960:	6019      	str	r1, [r3, #0]
 800b962:	d1dd      	bne.n	800b920 <_free_r+0x24>
 800b964:	6810      	ldr	r0, [r2, #0]
 800b966:	6852      	ldr	r2, [r2, #4]
 800b968:	605a      	str	r2, [r3, #4]
 800b96a:	4401      	add	r1, r0
 800b96c:	6019      	str	r1, [r3, #0]
 800b96e:	e7d7      	b.n	800b920 <_free_r+0x24>
 800b970:	d902      	bls.n	800b978 <_free_r+0x7c>
 800b972:	230c      	movs	r3, #12
 800b974:	602b      	str	r3, [r5, #0]
 800b976:	e7d3      	b.n	800b920 <_free_r+0x24>
 800b978:	6820      	ldr	r0, [r4, #0]
 800b97a:	1821      	adds	r1, r4, r0
 800b97c:	428a      	cmp	r2, r1
 800b97e:	bf04      	itt	eq
 800b980:	6811      	ldreq	r1, [r2, #0]
 800b982:	6852      	ldreq	r2, [r2, #4]
 800b984:	6062      	str	r2, [r4, #4]
 800b986:	bf04      	itt	eq
 800b988:	1809      	addeq	r1, r1, r0
 800b98a:	6021      	streq	r1, [r4, #0]
 800b98c:	605c      	str	r4, [r3, #4]
 800b98e:	e7c7      	b.n	800b920 <_free_r+0x24>
 800b990:	bd38      	pop	{r3, r4, r5, pc}
 800b992:	bf00      	nop
 800b994:	200000f0 	.word	0x200000f0

0800b998 <_malloc_r>:
 800b998:	b570      	push	{r4, r5, r6, lr}
 800b99a:	1ccd      	adds	r5, r1, #3
 800b99c:	f025 0503 	bic.w	r5, r5, #3
 800b9a0:	3508      	adds	r5, #8
 800b9a2:	2d0c      	cmp	r5, #12
 800b9a4:	bf38      	it	cc
 800b9a6:	250c      	movcc	r5, #12
 800b9a8:	2d00      	cmp	r5, #0
 800b9aa:	4606      	mov	r6, r0
 800b9ac:	db01      	blt.n	800b9b2 <_malloc_r+0x1a>
 800b9ae:	42a9      	cmp	r1, r5
 800b9b0:	d903      	bls.n	800b9ba <_malloc_r+0x22>
 800b9b2:	230c      	movs	r3, #12
 800b9b4:	6033      	str	r3, [r6, #0]
 800b9b6:	2000      	movs	r0, #0
 800b9b8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ba:	f000 f877 	bl	800baac <__malloc_lock>
 800b9be:	4a21      	ldr	r2, [pc, #132]	; (800ba44 <_malloc_r+0xac>)
 800b9c0:	6814      	ldr	r4, [r2, #0]
 800b9c2:	4621      	mov	r1, r4
 800b9c4:	b991      	cbnz	r1, 800b9ec <_malloc_r+0x54>
 800b9c6:	4c20      	ldr	r4, [pc, #128]	; (800ba48 <_malloc_r+0xb0>)
 800b9c8:	6823      	ldr	r3, [r4, #0]
 800b9ca:	b91b      	cbnz	r3, 800b9d4 <_malloc_r+0x3c>
 800b9cc:	4630      	mov	r0, r6
 800b9ce:	f000 f83d 	bl	800ba4c <_sbrk_r>
 800b9d2:	6020      	str	r0, [r4, #0]
 800b9d4:	4629      	mov	r1, r5
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	f000 f838 	bl	800ba4c <_sbrk_r>
 800b9dc:	1c43      	adds	r3, r0, #1
 800b9de:	d124      	bne.n	800ba2a <_malloc_r+0x92>
 800b9e0:	230c      	movs	r3, #12
 800b9e2:	6033      	str	r3, [r6, #0]
 800b9e4:	4630      	mov	r0, r6
 800b9e6:	f000 f862 	bl	800baae <__malloc_unlock>
 800b9ea:	e7e4      	b.n	800b9b6 <_malloc_r+0x1e>
 800b9ec:	680b      	ldr	r3, [r1, #0]
 800b9ee:	1b5b      	subs	r3, r3, r5
 800b9f0:	d418      	bmi.n	800ba24 <_malloc_r+0x8c>
 800b9f2:	2b0b      	cmp	r3, #11
 800b9f4:	d90f      	bls.n	800ba16 <_malloc_r+0x7e>
 800b9f6:	600b      	str	r3, [r1, #0]
 800b9f8:	50cd      	str	r5, [r1, r3]
 800b9fa:	18cc      	adds	r4, r1, r3
 800b9fc:	4630      	mov	r0, r6
 800b9fe:	f000 f856 	bl	800baae <__malloc_unlock>
 800ba02:	f104 000b 	add.w	r0, r4, #11
 800ba06:	1d23      	adds	r3, r4, #4
 800ba08:	f020 0007 	bic.w	r0, r0, #7
 800ba0c:	1ac3      	subs	r3, r0, r3
 800ba0e:	d0d3      	beq.n	800b9b8 <_malloc_r+0x20>
 800ba10:	425a      	negs	r2, r3
 800ba12:	50e2      	str	r2, [r4, r3]
 800ba14:	e7d0      	b.n	800b9b8 <_malloc_r+0x20>
 800ba16:	428c      	cmp	r4, r1
 800ba18:	684b      	ldr	r3, [r1, #4]
 800ba1a:	bf16      	itet	ne
 800ba1c:	6063      	strne	r3, [r4, #4]
 800ba1e:	6013      	streq	r3, [r2, #0]
 800ba20:	460c      	movne	r4, r1
 800ba22:	e7eb      	b.n	800b9fc <_malloc_r+0x64>
 800ba24:	460c      	mov	r4, r1
 800ba26:	6849      	ldr	r1, [r1, #4]
 800ba28:	e7cc      	b.n	800b9c4 <_malloc_r+0x2c>
 800ba2a:	1cc4      	adds	r4, r0, #3
 800ba2c:	f024 0403 	bic.w	r4, r4, #3
 800ba30:	42a0      	cmp	r0, r4
 800ba32:	d005      	beq.n	800ba40 <_malloc_r+0xa8>
 800ba34:	1a21      	subs	r1, r4, r0
 800ba36:	4630      	mov	r0, r6
 800ba38:	f000 f808 	bl	800ba4c <_sbrk_r>
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	d0cf      	beq.n	800b9e0 <_malloc_r+0x48>
 800ba40:	6025      	str	r5, [r4, #0]
 800ba42:	e7db      	b.n	800b9fc <_malloc_r+0x64>
 800ba44:	200000f0 	.word	0x200000f0
 800ba48:	200000f4 	.word	0x200000f4

0800ba4c <_sbrk_r>:
 800ba4c:	b538      	push	{r3, r4, r5, lr}
 800ba4e:	4c06      	ldr	r4, [pc, #24]	; (800ba68 <_sbrk_r+0x1c>)
 800ba50:	2300      	movs	r3, #0
 800ba52:	4605      	mov	r5, r0
 800ba54:	4608      	mov	r0, r1
 800ba56:	6023      	str	r3, [r4, #0]
 800ba58:	f7f5 f9f0 	bl	8000e3c <_sbrk>
 800ba5c:	1c43      	adds	r3, r0, #1
 800ba5e:	d102      	bne.n	800ba66 <_sbrk_r+0x1a>
 800ba60:	6823      	ldr	r3, [r4, #0]
 800ba62:	b103      	cbz	r3, 800ba66 <_sbrk_r+0x1a>
 800ba64:	602b      	str	r3, [r5, #0]
 800ba66:	bd38      	pop	{r3, r4, r5, pc}
 800ba68:	200028bc 	.word	0x200028bc

0800ba6c <siprintf>:
 800ba6c:	b40e      	push	{r1, r2, r3}
 800ba6e:	b500      	push	{lr}
 800ba70:	b09c      	sub	sp, #112	; 0x70
 800ba72:	ab1d      	add	r3, sp, #116	; 0x74
 800ba74:	9002      	str	r0, [sp, #8]
 800ba76:	9006      	str	r0, [sp, #24]
 800ba78:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba7c:	4809      	ldr	r0, [pc, #36]	; (800baa4 <siprintf+0x38>)
 800ba7e:	9107      	str	r1, [sp, #28]
 800ba80:	9104      	str	r1, [sp, #16]
 800ba82:	4909      	ldr	r1, [pc, #36]	; (800baa8 <siprintf+0x3c>)
 800ba84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba88:	9105      	str	r1, [sp, #20]
 800ba8a:	6800      	ldr	r0, [r0, #0]
 800ba8c:	9301      	str	r3, [sp, #4]
 800ba8e:	a902      	add	r1, sp, #8
 800ba90:	f000 f868 	bl	800bb64 <_svfiprintf_r>
 800ba94:	9b02      	ldr	r3, [sp, #8]
 800ba96:	2200      	movs	r2, #0
 800ba98:	701a      	strb	r2, [r3, #0]
 800ba9a:	b01c      	add	sp, #112	; 0x70
 800ba9c:	f85d eb04 	ldr.w	lr, [sp], #4
 800baa0:	b003      	add	sp, #12
 800baa2:	4770      	bx	lr
 800baa4:	2000002c 	.word	0x2000002c
 800baa8:	ffff0208 	.word	0xffff0208

0800baac <__malloc_lock>:
 800baac:	4770      	bx	lr

0800baae <__malloc_unlock>:
 800baae:	4770      	bx	lr

0800bab0 <__ssputs_r>:
 800bab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bab4:	688e      	ldr	r6, [r1, #8]
 800bab6:	429e      	cmp	r6, r3
 800bab8:	4682      	mov	sl, r0
 800baba:	460c      	mov	r4, r1
 800babc:	4690      	mov	r8, r2
 800babe:	4699      	mov	r9, r3
 800bac0:	d837      	bhi.n	800bb32 <__ssputs_r+0x82>
 800bac2:	898a      	ldrh	r2, [r1, #12]
 800bac4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bac8:	d031      	beq.n	800bb2e <__ssputs_r+0x7e>
 800baca:	6825      	ldr	r5, [r4, #0]
 800bacc:	6909      	ldr	r1, [r1, #16]
 800bace:	1a6f      	subs	r7, r5, r1
 800bad0:	6965      	ldr	r5, [r4, #20]
 800bad2:	2302      	movs	r3, #2
 800bad4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bad8:	fb95 f5f3 	sdiv	r5, r5, r3
 800badc:	f109 0301 	add.w	r3, r9, #1
 800bae0:	443b      	add	r3, r7
 800bae2:	429d      	cmp	r5, r3
 800bae4:	bf38      	it	cc
 800bae6:	461d      	movcc	r5, r3
 800bae8:	0553      	lsls	r3, r2, #21
 800baea:	d530      	bpl.n	800bb4e <__ssputs_r+0x9e>
 800baec:	4629      	mov	r1, r5
 800baee:	f7ff ff53 	bl	800b998 <_malloc_r>
 800baf2:	4606      	mov	r6, r0
 800baf4:	b950      	cbnz	r0, 800bb0c <__ssputs_r+0x5c>
 800baf6:	230c      	movs	r3, #12
 800baf8:	f8ca 3000 	str.w	r3, [sl]
 800bafc:	89a3      	ldrh	r3, [r4, #12]
 800bafe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bb02:	81a3      	strh	r3, [r4, #12]
 800bb04:	f04f 30ff 	mov.w	r0, #4294967295
 800bb08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb0c:	463a      	mov	r2, r7
 800bb0e:	6921      	ldr	r1, [r4, #16]
 800bb10:	f7ff fee0 	bl	800b8d4 <memcpy>
 800bb14:	89a3      	ldrh	r3, [r4, #12]
 800bb16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bb1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb1e:	81a3      	strh	r3, [r4, #12]
 800bb20:	6126      	str	r6, [r4, #16]
 800bb22:	6165      	str	r5, [r4, #20]
 800bb24:	443e      	add	r6, r7
 800bb26:	1bed      	subs	r5, r5, r7
 800bb28:	6026      	str	r6, [r4, #0]
 800bb2a:	60a5      	str	r5, [r4, #8]
 800bb2c:	464e      	mov	r6, r9
 800bb2e:	454e      	cmp	r6, r9
 800bb30:	d900      	bls.n	800bb34 <__ssputs_r+0x84>
 800bb32:	464e      	mov	r6, r9
 800bb34:	4632      	mov	r2, r6
 800bb36:	4641      	mov	r1, r8
 800bb38:	6820      	ldr	r0, [r4, #0]
 800bb3a:	f000 fa93 	bl	800c064 <memmove>
 800bb3e:	68a3      	ldr	r3, [r4, #8]
 800bb40:	1b9b      	subs	r3, r3, r6
 800bb42:	60a3      	str	r3, [r4, #8]
 800bb44:	6823      	ldr	r3, [r4, #0]
 800bb46:	441e      	add	r6, r3
 800bb48:	6026      	str	r6, [r4, #0]
 800bb4a:	2000      	movs	r0, #0
 800bb4c:	e7dc      	b.n	800bb08 <__ssputs_r+0x58>
 800bb4e:	462a      	mov	r2, r5
 800bb50:	f000 faa1 	bl	800c096 <_realloc_r>
 800bb54:	4606      	mov	r6, r0
 800bb56:	2800      	cmp	r0, #0
 800bb58:	d1e2      	bne.n	800bb20 <__ssputs_r+0x70>
 800bb5a:	6921      	ldr	r1, [r4, #16]
 800bb5c:	4650      	mov	r0, sl
 800bb5e:	f7ff fecd 	bl	800b8fc <_free_r>
 800bb62:	e7c8      	b.n	800baf6 <__ssputs_r+0x46>

0800bb64 <_svfiprintf_r>:
 800bb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb68:	461d      	mov	r5, r3
 800bb6a:	898b      	ldrh	r3, [r1, #12]
 800bb6c:	061f      	lsls	r7, r3, #24
 800bb6e:	b09d      	sub	sp, #116	; 0x74
 800bb70:	4680      	mov	r8, r0
 800bb72:	460c      	mov	r4, r1
 800bb74:	4616      	mov	r6, r2
 800bb76:	d50f      	bpl.n	800bb98 <_svfiprintf_r+0x34>
 800bb78:	690b      	ldr	r3, [r1, #16]
 800bb7a:	b96b      	cbnz	r3, 800bb98 <_svfiprintf_r+0x34>
 800bb7c:	2140      	movs	r1, #64	; 0x40
 800bb7e:	f7ff ff0b 	bl	800b998 <_malloc_r>
 800bb82:	6020      	str	r0, [r4, #0]
 800bb84:	6120      	str	r0, [r4, #16]
 800bb86:	b928      	cbnz	r0, 800bb94 <_svfiprintf_r+0x30>
 800bb88:	230c      	movs	r3, #12
 800bb8a:	f8c8 3000 	str.w	r3, [r8]
 800bb8e:	f04f 30ff 	mov.w	r0, #4294967295
 800bb92:	e0c8      	b.n	800bd26 <_svfiprintf_r+0x1c2>
 800bb94:	2340      	movs	r3, #64	; 0x40
 800bb96:	6163      	str	r3, [r4, #20]
 800bb98:	2300      	movs	r3, #0
 800bb9a:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9c:	2320      	movs	r3, #32
 800bb9e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bba2:	2330      	movs	r3, #48	; 0x30
 800bba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bba8:	9503      	str	r5, [sp, #12]
 800bbaa:	f04f 0b01 	mov.w	fp, #1
 800bbae:	4637      	mov	r7, r6
 800bbb0:	463d      	mov	r5, r7
 800bbb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 800bbb6:	b10b      	cbz	r3, 800bbbc <_svfiprintf_r+0x58>
 800bbb8:	2b25      	cmp	r3, #37	; 0x25
 800bbba:	d13e      	bne.n	800bc3a <_svfiprintf_r+0xd6>
 800bbbc:	ebb7 0a06 	subs.w	sl, r7, r6
 800bbc0:	d00b      	beq.n	800bbda <_svfiprintf_r+0x76>
 800bbc2:	4653      	mov	r3, sl
 800bbc4:	4632      	mov	r2, r6
 800bbc6:	4621      	mov	r1, r4
 800bbc8:	4640      	mov	r0, r8
 800bbca:	f7ff ff71 	bl	800bab0 <__ssputs_r>
 800bbce:	3001      	adds	r0, #1
 800bbd0:	f000 80a4 	beq.w	800bd1c <_svfiprintf_r+0x1b8>
 800bbd4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbd6:	4453      	add	r3, sl
 800bbd8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbda:	783b      	ldrb	r3, [r7, #0]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	f000 809d 	beq.w	800bd1c <_svfiprintf_r+0x1b8>
 800bbe2:	2300      	movs	r3, #0
 800bbe4:	f04f 32ff 	mov.w	r2, #4294967295
 800bbe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bbec:	9304      	str	r3, [sp, #16]
 800bbee:	9307      	str	r3, [sp, #28]
 800bbf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bbf4:	931a      	str	r3, [sp, #104]	; 0x68
 800bbf6:	462f      	mov	r7, r5
 800bbf8:	2205      	movs	r2, #5
 800bbfa:	f817 1b01 	ldrb.w	r1, [r7], #1
 800bbfe:	4850      	ldr	r0, [pc, #320]	; (800bd40 <_svfiprintf_r+0x1dc>)
 800bc00:	f7f4 fb26 	bl	8000250 <memchr>
 800bc04:	9b04      	ldr	r3, [sp, #16]
 800bc06:	b9d0      	cbnz	r0, 800bc3e <_svfiprintf_r+0xda>
 800bc08:	06d9      	lsls	r1, r3, #27
 800bc0a:	bf44      	itt	mi
 800bc0c:	2220      	movmi	r2, #32
 800bc0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc12:	071a      	lsls	r2, r3, #28
 800bc14:	bf44      	itt	mi
 800bc16:	222b      	movmi	r2, #43	; 0x2b
 800bc18:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800bc1c:	782a      	ldrb	r2, [r5, #0]
 800bc1e:	2a2a      	cmp	r2, #42	; 0x2a
 800bc20:	d015      	beq.n	800bc4e <_svfiprintf_r+0xea>
 800bc22:	9a07      	ldr	r2, [sp, #28]
 800bc24:	462f      	mov	r7, r5
 800bc26:	2000      	movs	r0, #0
 800bc28:	250a      	movs	r5, #10
 800bc2a:	4639      	mov	r1, r7
 800bc2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc30:	3b30      	subs	r3, #48	; 0x30
 800bc32:	2b09      	cmp	r3, #9
 800bc34:	d94d      	bls.n	800bcd2 <_svfiprintf_r+0x16e>
 800bc36:	b1b8      	cbz	r0, 800bc68 <_svfiprintf_r+0x104>
 800bc38:	e00f      	b.n	800bc5a <_svfiprintf_r+0xf6>
 800bc3a:	462f      	mov	r7, r5
 800bc3c:	e7b8      	b.n	800bbb0 <_svfiprintf_r+0x4c>
 800bc3e:	4a40      	ldr	r2, [pc, #256]	; (800bd40 <_svfiprintf_r+0x1dc>)
 800bc40:	1a80      	subs	r0, r0, r2
 800bc42:	fa0b f000 	lsl.w	r0, fp, r0
 800bc46:	4318      	orrs	r0, r3
 800bc48:	9004      	str	r0, [sp, #16]
 800bc4a:	463d      	mov	r5, r7
 800bc4c:	e7d3      	b.n	800bbf6 <_svfiprintf_r+0x92>
 800bc4e:	9a03      	ldr	r2, [sp, #12]
 800bc50:	1d11      	adds	r1, r2, #4
 800bc52:	6812      	ldr	r2, [r2, #0]
 800bc54:	9103      	str	r1, [sp, #12]
 800bc56:	2a00      	cmp	r2, #0
 800bc58:	db01      	blt.n	800bc5e <_svfiprintf_r+0xfa>
 800bc5a:	9207      	str	r2, [sp, #28]
 800bc5c:	e004      	b.n	800bc68 <_svfiprintf_r+0x104>
 800bc5e:	4252      	negs	r2, r2
 800bc60:	f043 0302 	orr.w	r3, r3, #2
 800bc64:	9207      	str	r2, [sp, #28]
 800bc66:	9304      	str	r3, [sp, #16]
 800bc68:	783b      	ldrb	r3, [r7, #0]
 800bc6a:	2b2e      	cmp	r3, #46	; 0x2e
 800bc6c:	d10c      	bne.n	800bc88 <_svfiprintf_r+0x124>
 800bc6e:	787b      	ldrb	r3, [r7, #1]
 800bc70:	2b2a      	cmp	r3, #42	; 0x2a
 800bc72:	d133      	bne.n	800bcdc <_svfiprintf_r+0x178>
 800bc74:	9b03      	ldr	r3, [sp, #12]
 800bc76:	1d1a      	adds	r2, r3, #4
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	9203      	str	r2, [sp, #12]
 800bc7c:	2b00      	cmp	r3, #0
 800bc7e:	bfb8      	it	lt
 800bc80:	f04f 33ff 	movlt.w	r3, #4294967295
 800bc84:	3702      	adds	r7, #2
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	4d2e      	ldr	r5, [pc, #184]	; (800bd44 <_svfiprintf_r+0x1e0>)
 800bc8a:	7839      	ldrb	r1, [r7, #0]
 800bc8c:	2203      	movs	r2, #3
 800bc8e:	4628      	mov	r0, r5
 800bc90:	f7f4 fade 	bl	8000250 <memchr>
 800bc94:	b138      	cbz	r0, 800bca6 <_svfiprintf_r+0x142>
 800bc96:	2340      	movs	r3, #64	; 0x40
 800bc98:	1b40      	subs	r0, r0, r5
 800bc9a:	fa03 f000 	lsl.w	r0, r3, r0
 800bc9e:	9b04      	ldr	r3, [sp, #16]
 800bca0:	4303      	orrs	r3, r0
 800bca2:	3701      	adds	r7, #1
 800bca4:	9304      	str	r3, [sp, #16]
 800bca6:	7839      	ldrb	r1, [r7, #0]
 800bca8:	4827      	ldr	r0, [pc, #156]	; (800bd48 <_svfiprintf_r+0x1e4>)
 800bcaa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bcae:	2206      	movs	r2, #6
 800bcb0:	1c7e      	adds	r6, r7, #1
 800bcb2:	f7f4 facd 	bl	8000250 <memchr>
 800bcb6:	2800      	cmp	r0, #0
 800bcb8:	d038      	beq.n	800bd2c <_svfiprintf_r+0x1c8>
 800bcba:	4b24      	ldr	r3, [pc, #144]	; (800bd4c <_svfiprintf_r+0x1e8>)
 800bcbc:	bb13      	cbnz	r3, 800bd04 <_svfiprintf_r+0x1a0>
 800bcbe:	9b03      	ldr	r3, [sp, #12]
 800bcc0:	3307      	adds	r3, #7
 800bcc2:	f023 0307 	bic.w	r3, r3, #7
 800bcc6:	3308      	adds	r3, #8
 800bcc8:	9303      	str	r3, [sp, #12]
 800bcca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bccc:	444b      	add	r3, r9
 800bcce:	9309      	str	r3, [sp, #36]	; 0x24
 800bcd0:	e76d      	b.n	800bbae <_svfiprintf_r+0x4a>
 800bcd2:	fb05 3202 	mla	r2, r5, r2, r3
 800bcd6:	2001      	movs	r0, #1
 800bcd8:	460f      	mov	r7, r1
 800bcda:	e7a6      	b.n	800bc2a <_svfiprintf_r+0xc6>
 800bcdc:	2300      	movs	r3, #0
 800bcde:	3701      	adds	r7, #1
 800bce0:	9305      	str	r3, [sp, #20]
 800bce2:	4619      	mov	r1, r3
 800bce4:	250a      	movs	r5, #10
 800bce6:	4638      	mov	r0, r7
 800bce8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bcec:	3a30      	subs	r2, #48	; 0x30
 800bcee:	2a09      	cmp	r2, #9
 800bcf0:	d903      	bls.n	800bcfa <_svfiprintf_r+0x196>
 800bcf2:	2b00      	cmp	r3, #0
 800bcf4:	d0c8      	beq.n	800bc88 <_svfiprintf_r+0x124>
 800bcf6:	9105      	str	r1, [sp, #20]
 800bcf8:	e7c6      	b.n	800bc88 <_svfiprintf_r+0x124>
 800bcfa:	fb05 2101 	mla	r1, r5, r1, r2
 800bcfe:	2301      	movs	r3, #1
 800bd00:	4607      	mov	r7, r0
 800bd02:	e7f0      	b.n	800bce6 <_svfiprintf_r+0x182>
 800bd04:	ab03      	add	r3, sp, #12
 800bd06:	9300      	str	r3, [sp, #0]
 800bd08:	4622      	mov	r2, r4
 800bd0a:	4b11      	ldr	r3, [pc, #68]	; (800bd50 <_svfiprintf_r+0x1ec>)
 800bd0c:	a904      	add	r1, sp, #16
 800bd0e:	4640      	mov	r0, r8
 800bd10:	f3af 8000 	nop.w
 800bd14:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bd18:	4681      	mov	r9, r0
 800bd1a:	d1d6      	bne.n	800bcca <_svfiprintf_r+0x166>
 800bd1c:	89a3      	ldrh	r3, [r4, #12]
 800bd1e:	065b      	lsls	r3, r3, #25
 800bd20:	f53f af35 	bmi.w	800bb8e <_svfiprintf_r+0x2a>
 800bd24:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bd26:	b01d      	add	sp, #116	; 0x74
 800bd28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd2c:	ab03      	add	r3, sp, #12
 800bd2e:	9300      	str	r3, [sp, #0]
 800bd30:	4622      	mov	r2, r4
 800bd32:	4b07      	ldr	r3, [pc, #28]	; (800bd50 <_svfiprintf_r+0x1ec>)
 800bd34:	a904      	add	r1, sp, #16
 800bd36:	4640      	mov	r0, r8
 800bd38:	f000 f882 	bl	800be40 <_printf_i>
 800bd3c:	e7ea      	b.n	800bd14 <_svfiprintf_r+0x1b0>
 800bd3e:	bf00      	nop
 800bd40:	0800c6f0 	.word	0x0800c6f0
 800bd44:	0800c6f6 	.word	0x0800c6f6
 800bd48:	0800c6fa 	.word	0x0800c6fa
 800bd4c:	00000000 	.word	0x00000000
 800bd50:	0800bab1 	.word	0x0800bab1

0800bd54 <_printf_common>:
 800bd54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd58:	4691      	mov	r9, r2
 800bd5a:	461f      	mov	r7, r3
 800bd5c:	688a      	ldr	r2, [r1, #8]
 800bd5e:	690b      	ldr	r3, [r1, #16]
 800bd60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bd64:	4293      	cmp	r3, r2
 800bd66:	bfb8      	it	lt
 800bd68:	4613      	movlt	r3, r2
 800bd6a:	f8c9 3000 	str.w	r3, [r9]
 800bd6e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bd72:	4606      	mov	r6, r0
 800bd74:	460c      	mov	r4, r1
 800bd76:	b112      	cbz	r2, 800bd7e <_printf_common+0x2a>
 800bd78:	3301      	adds	r3, #1
 800bd7a:	f8c9 3000 	str.w	r3, [r9]
 800bd7e:	6823      	ldr	r3, [r4, #0]
 800bd80:	0699      	lsls	r1, r3, #26
 800bd82:	bf42      	ittt	mi
 800bd84:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bd88:	3302      	addmi	r3, #2
 800bd8a:	f8c9 3000 	strmi.w	r3, [r9]
 800bd8e:	6825      	ldr	r5, [r4, #0]
 800bd90:	f015 0506 	ands.w	r5, r5, #6
 800bd94:	d107      	bne.n	800bda6 <_printf_common+0x52>
 800bd96:	f104 0a19 	add.w	sl, r4, #25
 800bd9a:	68e3      	ldr	r3, [r4, #12]
 800bd9c:	f8d9 2000 	ldr.w	r2, [r9]
 800bda0:	1a9b      	subs	r3, r3, r2
 800bda2:	42ab      	cmp	r3, r5
 800bda4:	dc28      	bgt.n	800bdf8 <_printf_common+0xa4>
 800bda6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bdaa:	6822      	ldr	r2, [r4, #0]
 800bdac:	3300      	adds	r3, #0
 800bdae:	bf18      	it	ne
 800bdb0:	2301      	movne	r3, #1
 800bdb2:	0692      	lsls	r2, r2, #26
 800bdb4:	d42d      	bmi.n	800be12 <_printf_common+0xbe>
 800bdb6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800bdba:	4639      	mov	r1, r7
 800bdbc:	4630      	mov	r0, r6
 800bdbe:	47c0      	blx	r8
 800bdc0:	3001      	adds	r0, #1
 800bdc2:	d020      	beq.n	800be06 <_printf_common+0xb2>
 800bdc4:	6823      	ldr	r3, [r4, #0]
 800bdc6:	68e5      	ldr	r5, [r4, #12]
 800bdc8:	f8d9 2000 	ldr.w	r2, [r9]
 800bdcc:	f003 0306 	and.w	r3, r3, #6
 800bdd0:	2b04      	cmp	r3, #4
 800bdd2:	bf08      	it	eq
 800bdd4:	1aad      	subeq	r5, r5, r2
 800bdd6:	68a3      	ldr	r3, [r4, #8]
 800bdd8:	6922      	ldr	r2, [r4, #16]
 800bdda:	bf0c      	ite	eq
 800bddc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800bde0:	2500      	movne	r5, #0
 800bde2:	4293      	cmp	r3, r2
 800bde4:	bfc4      	itt	gt
 800bde6:	1a9b      	subgt	r3, r3, r2
 800bde8:	18ed      	addgt	r5, r5, r3
 800bdea:	f04f 0900 	mov.w	r9, #0
 800bdee:	341a      	adds	r4, #26
 800bdf0:	454d      	cmp	r5, r9
 800bdf2:	d11a      	bne.n	800be2a <_printf_common+0xd6>
 800bdf4:	2000      	movs	r0, #0
 800bdf6:	e008      	b.n	800be0a <_printf_common+0xb6>
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	4652      	mov	r2, sl
 800bdfc:	4639      	mov	r1, r7
 800bdfe:	4630      	mov	r0, r6
 800be00:	47c0      	blx	r8
 800be02:	3001      	adds	r0, #1
 800be04:	d103      	bne.n	800be0e <_printf_common+0xba>
 800be06:	f04f 30ff 	mov.w	r0, #4294967295
 800be0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be0e:	3501      	adds	r5, #1
 800be10:	e7c3      	b.n	800bd9a <_printf_common+0x46>
 800be12:	18e1      	adds	r1, r4, r3
 800be14:	1c5a      	adds	r2, r3, #1
 800be16:	2030      	movs	r0, #48	; 0x30
 800be18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800be1c:	4422      	add	r2, r4
 800be1e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800be22:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800be26:	3302      	adds	r3, #2
 800be28:	e7c5      	b.n	800bdb6 <_printf_common+0x62>
 800be2a:	2301      	movs	r3, #1
 800be2c:	4622      	mov	r2, r4
 800be2e:	4639      	mov	r1, r7
 800be30:	4630      	mov	r0, r6
 800be32:	47c0      	blx	r8
 800be34:	3001      	adds	r0, #1
 800be36:	d0e6      	beq.n	800be06 <_printf_common+0xb2>
 800be38:	f109 0901 	add.w	r9, r9, #1
 800be3c:	e7d8      	b.n	800bdf0 <_printf_common+0x9c>
	...

0800be40 <_printf_i>:
 800be40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be44:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800be48:	460c      	mov	r4, r1
 800be4a:	7e09      	ldrb	r1, [r1, #24]
 800be4c:	b085      	sub	sp, #20
 800be4e:	296e      	cmp	r1, #110	; 0x6e
 800be50:	4617      	mov	r7, r2
 800be52:	4606      	mov	r6, r0
 800be54:	4698      	mov	r8, r3
 800be56:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800be58:	f000 80b3 	beq.w	800bfc2 <_printf_i+0x182>
 800be5c:	d822      	bhi.n	800bea4 <_printf_i+0x64>
 800be5e:	2963      	cmp	r1, #99	; 0x63
 800be60:	d036      	beq.n	800bed0 <_printf_i+0x90>
 800be62:	d80a      	bhi.n	800be7a <_printf_i+0x3a>
 800be64:	2900      	cmp	r1, #0
 800be66:	f000 80b9 	beq.w	800bfdc <_printf_i+0x19c>
 800be6a:	2958      	cmp	r1, #88	; 0x58
 800be6c:	f000 8083 	beq.w	800bf76 <_printf_i+0x136>
 800be70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800be74:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800be78:	e032      	b.n	800bee0 <_printf_i+0xa0>
 800be7a:	2964      	cmp	r1, #100	; 0x64
 800be7c:	d001      	beq.n	800be82 <_printf_i+0x42>
 800be7e:	2969      	cmp	r1, #105	; 0x69
 800be80:	d1f6      	bne.n	800be70 <_printf_i+0x30>
 800be82:	6820      	ldr	r0, [r4, #0]
 800be84:	6813      	ldr	r3, [r2, #0]
 800be86:	0605      	lsls	r5, r0, #24
 800be88:	f103 0104 	add.w	r1, r3, #4
 800be8c:	d52a      	bpl.n	800bee4 <_printf_i+0xa4>
 800be8e:	681b      	ldr	r3, [r3, #0]
 800be90:	6011      	str	r1, [r2, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	da03      	bge.n	800be9e <_printf_i+0x5e>
 800be96:	222d      	movs	r2, #45	; 0x2d
 800be98:	425b      	negs	r3, r3
 800be9a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800be9e:	486f      	ldr	r0, [pc, #444]	; (800c05c <_printf_i+0x21c>)
 800bea0:	220a      	movs	r2, #10
 800bea2:	e039      	b.n	800bf18 <_printf_i+0xd8>
 800bea4:	2973      	cmp	r1, #115	; 0x73
 800bea6:	f000 809d 	beq.w	800bfe4 <_printf_i+0x1a4>
 800beaa:	d808      	bhi.n	800bebe <_printf_i+0x7e>
 800beac:	296f      	cmp	r1, #111	; 0x6f
 800beae:	d020      	beq.n	800bef2 <_printf_i+0xb2>
 800beb0:	2970      	cmp	r1, #112	; 0x70
 800beb2:	d1dd      	bne.n	800be70 <_printf_i+0x30>
 800beb4:	6823      	ldr	r3, [r4, #0]
 800beb6:	f043 0320 	orr.w	r3, r3, #32
 800beba:	6023      	str	r3, [r4, #0]
 800bebc:	e003      	b.n	800bec6 <_printf_i+0x86>
 800bebe:	2975      	cmp	r1, #117	; 0x75
 800bec0:	d017      	beq.n	800bef2 <_printf_i+0xb2>
 800bec2:	2978      	cmp	r1, #120	; 0x78
 800bec4:	d1d4      	bne.n	800be70 <_printf_i+0x30>
 800bec6:	2378      	movs	r3, #120	; 0x78
 800bec8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800becc:	4864      	ldr	r0, [pc, #400]	; (800c060 <_printf_i+0x220>)
 800bece:	e055      	b.n	800bf7c <_printf_i+0x13c>
 800bed0:	6813      	ldr	r3, [r2, #0]
 800bed2:	1d19      	adds	r1, r3, #4
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	6011      	str	r1, [r2, #0]
 800bed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800bedc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800bee0:	2301      	movs	r3, #1
 800bee2:	e08c      	b.n	800bffe <_printf_i+0x1be>
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	6011      	str	r1, [r2, #0]
 800bee8:	f010 0f40 	tst.w	r0, #64	; 0x40
 800beec:	bf18      	it	ne
 800beee:	b21b      	sxthne	r3, r3
 800bef0:	e7cf      	b.n	800be92 <_printf_i+0x52>
 800bef2:	6813      	ldr	r3, [r2, #0]
 800bef4:	6825      	ldr	r5, [r4, #0]
 800bef6:	1d18      	adds	r0, r3, #4
 800bef8:	6010      	str	r0, [r2, #0]
 800befa:	0628      	lsls	r0, r5, #24
 800befc:	d501      	bpl.n	800bf02 <_printf_i+0xc2>
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	e002      	b.n	800bf08 <_printf_i+0xc8>
 800bf02:	0668      	lsls	r0, r5, #25
 800bf04:	d5fb      	bpl.n	800befe <_printf_i+0xbe>
 800bf06:	881b      	ldrh	r3, [r3, #0]
 800bf08:	4854      	ldr	r0, [pc, #336]	; (800c05c <_printf_i+0x21c>)
 800bf0a:	296f      	cmp	r1, #111	; 0x6f
 800bf0c:	bf14      	ite	ne
 800bf0e:	220a      	movne	r2, #10
 800bf10:	2208      	moveq	r2, #8
 800bf12:	2100      	movs	r1, #0
 800bf14:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800bf18:	6865      	ldr	r5, [r4, #4]
 800bf1a:	60a5      	str	r5, [r4, #8]
 800bf1c:	2d00      	cmp	r5, #0
 800bf1e:	f2c0 8095 	blt.w	800c04c <_printf_i+0x20c>
 800bf22:	6821      	ldr	r1, [r4, #0]
 800bf24:	f021 0104 	bic.w	r1, r1, #4
 800bf28:	6021      	str	r1, [r4, #0]
 800bf2a:	2b00      	cmp	r3, #0
 800bf2c:	d13d      	bne.n	800bfaa <_printf_i+0x16a>
 800bf2e:	2d00      	cmp	r5, #0
 800bf30:	f040 808e 	bne.w	800c050 <_printf_i+0x210>
 800bf34:	4665      	mov	r5, ip
 800bf36:	2a08      	cmp	r2, #8
 800bf38:	d10b      	bne.n	800bf52 <_printf_i+0x112>
 800bf3a:	6823      	ldr	r3, [r4, #0]
 800bf3c:	07db      	lsls	r3, r3, #31
 800bf3e:	d508      	bpl.n	800bf52 <_printf_i+0x112>
 800bf40:	6923      	ldr	r3, [r4, #16]
 800bf42:	6862      	ldr	r2, [r4, #4]
 800bf44:	429a      	cmp	r2, r3
 800bf46:	bfde      	ittt	le
 800bf48:	2330      	movle	r3, #48	; 0x30
 800bf4a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800bf4e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800bf52:	ebac 0305 	sub.w	r3, ip, r5
 800bf56:	6123      	str	r3, [r4, #16]
 800bf58:	f8cd 8000 	str.w	r8, [sp]
 800bf5c:	463b      	mov	r3, r7
 800bf5e:	aa03      	add	r2, sp, #12
 800bf60:	4621      	mov	r1, r4
 800bf62:	4630      	mov	r0, r6
 800bf64:	f7ff fef6 	bl	800bd54 <_printf_common>
 800bf68:	3001      	adds	r0, #1
 800bf6a:	d14d      	bne.n	800c008 <_printf_i+0x1c8>
 800bf6c:	f04f 30ff 	mov.w	r0, #4294967295
 800bf70:	b005      	add	sp, #20
 800bf72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf76:	4839      	ldr	r0, [pc, #228]	; (800c05c <_printf_i+0x21c>)
 800bf78:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800bf7c:	6813      	ldr	r3, [r2, #0]
 800bf7e:	6821      	ldr	r1, [r4, #0]
 800bf80:	1d1d      	adds	r5, r3, #4
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	6015      	str	r5, [r2, #0]
 800bf86:	060a      	lsls	r2, r1, #24
 800bf88:	d50b      	bpl.n	800bfa2 <_printf_i+0x162>
 800bf8a:	07ca      	lsls	r2, r1, #31
 800bf8c:	bf44      	itt	mi
 800bf8e:	f041 0120 	orrmi.w	r1, r1, #32
 800bf92:	6021      	strmi	r1, [r4, #0]
 800bf94:	b91b      	cbnz	r3, 800bf9e <_printf_i+0x15e>
 800bf96:	6822      	ldr	r2, [r4, #0]
 800bf98:	f022 0220 	bic.w	r2, r2, #32
 800bf9c:	6022      	str	r2, [r4, #0]
 800bf9e:	2210      	movs	r2, #16
 800bfa0:	e7b7      	b.n	800bf12 <_printf_i+0xd2>
 800bfa2:	064d      	lsls	r5, r1, #25
 800bfa4:	bf48      	it	mi
 800bfa6:	b29b      	uxthmi	r3, r3
 800bfa8:	e7ef      	b.n	800bf8a <_printf_i+0x14a>
 800bfaa:	4665      	mov	r5, ip
 800bfac:	fbb3 f1f2 	udiv	r1, r3, r2
 800bfb0:	fb02 3311 	mls	r3, r2, r1, r3
 800bfb4:	5cc3      	ldrb	r3, [r0, r3]
 800bfb6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800bfba:	460b      	mov	r3, r1
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	d1f5      	bne.n	800bfac <_printf_i+0x16c>
 800bfc0:	e7b9      	b.n	800bf36 <_printf_i+0xf6>
 800bfc2:	6813      	ldr	r3, [r2, #0]
 800bfc4:	6825      	ldr	r5, [r4, #0]
 800bfc6:	6961      	ldr	r1, [r4, #20]
 800bfc8:	1d18      	adds	r0, r3, #4
 800bfca:	6010      	str	r0, [r2, #0]
 800bfcc:	0628      	lsls	r0, r5, #24
 800bfce:	681b      	ldr	r3, [r3, #0]
 800bfd0:	d501      	bpl.n	800bfd6 <_printf_i+0x196>
 800bfd2:	6019      	str	r1, [r3, #0]
 800bfd4:	e002      	b.n	800bfdc <_printf_i+0x19c>
 800bfd6:	066a      	lsls	r2, r5, #25
 800bfd8:	d5fb      	bpl.n	800bfd2 <_printf_i+0x192>
 800bfda:	8019      	strh	r1, [r3, #0]
 800bfdc:	2300      	movs	r3, #0
 800bfde:	6123      	str	r3, [r4, #16]
 800bfe0:	4665      	mov	r5, ip
 800bfe2:	e7b9      	b.n	800bf58 <_printf_i+0x118>
 800bfe4:	6813      	ldr	r3, [r2, #0]
 800bfe6:	1d19      	adds	r1, r3, #4
 800bfe8:	6011      	str	r1, [r2, #0]
 800bfea:	681d      	ldr	r5, [r3, #0]
 800bfec:	6862      	ldr	r2, [r4, #4]
 800bfee:	2100      	movs	r1, #0
 800bff0:	4628      	mov	r0, r5
 800bff2:	f7f4 f92d 	bl	8000250 <memchr>
 800bff6:	b108      	cbz	r0, 800bffc <_printf_i+0x1bc>
 800bff8:	1b40      	subs	r0, r0, r5
 800bffa:	6060      	str	r0, [r4, #4]
 800bffc:	6863      	ldr	r3, [r4, #4]
 800bffe:	6123      	str	r3, [r4, #16]
 800c000:	2300      	movs	r3, #0
 800c002:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c006:	e7a7      	b.n	800bf58 <_printf_i+0x118>
 800c008:	6923      	ldr	r3, [r4, #16]
 800c00a:	462a      	mov	r2, r5
 800c00c:	4639      	mov	r1, r7
 800c00e:	4630      	mov	r0, r6
 800c010:	47c0      	blx	r8
 800c012:	3001      	adds	r0, #1
 800c014:	d0aa      	beq.n	800bf6c <_printf_i+0x12c>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	079b      	lsls	r3, r3, #30
 800c01a:	d413      	bmi.n	800c044 <_printf_i+0x204>
 800c01c:	68e0      	ldr	r0, [r4, #12]
 800c01e:	9b03      	ldr	r3, [sp, #12]
 800c020:	4298      	cmp	r0, r3
 800c022:	bfb8      	it	lt
 800c024:	4618      	movlt	r0, r3
 800c026:	e7a3      	b.n	800bf70 <_printf_i+0x130>
 800c028:	2301      	movs	r3, #1
 800c02a:	464a      	mov	r2, r9
 800c02c:	4639      	mov	r1, r7
 800c02e:	4630      	mov	r0, r6
 800c030:	47c0      	blx	r8
 800c032:	3001      	adds	r0, #1
 800c034:	d09a      	beq.n	800bf6c <_printf_i+0x12c>
 800c036:	3501      	adds	r5, #1
 800c038:	68e3      	ldr	r3, [r4, #12]
 800c03a:	9a03      	ldr	r2, [sp, #12]
 800c03c:	1a9b      	subs	r3, r3, r2
 800c03e:	42ab      	cmp	r3, r5
 800c040:	dcf2      	bgt.n	800c028 <_printf_i+0x1e8>
 800c042:	e7eb      	b.n	800c01c <_printf_i+0x1dc>
 800c044:	2500      	movs	r5, #0
 800c046:	f104 0919 	add.w	r9, r4, #25
 800c04a:	e7f5      	b.n	800c038 <_printf_i+0x1f8>
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d1ac      	bne.n	800bfaa <_printf_i+0x16a>
 800c050:	7803      	ldrb	r3, [r0, #0]
 800c052:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c056:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c05a:	e76c      	b.n	800bf36 <_printf_i+0xf6>
 800c05c:	0800c701 	.word	0x0800c701
 800c060:	0800c712 	.word	0x0800c712

0800c064 <memmove>:
 800c064:	4288      	cmp	r0, r1
 800c066:	b510      	push	{r4, lr}
 800c068:	eb01 0302 	add.w	r3, r1, r2
 800c06c:	d807      	bhi.n	800c07e <memmove+0x1a>
 800c06e:	1e42      	subs	r2, r0, #1
 800c070:	4299      	cmp	r1, r3
 800c072:	d00a      	beq.n	800c08a <memmove+0x26>
 800c074:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c078:	f802 4f01 	strb.w	r4, [r2, #1]!
 800c07c:	e7f8      	b.n	800c070 <memmove+0xc>
 800c07e:	4283      	cmp	r3, r0
 800c080:	d9f5      	bls.n	800c06e <memmove+0xa>
 800c082:	1881      	adds	r1, r0, r2
 800c084:	1ad2      	subs	r2, r2, r3
 800c086:	42d3      	cmn	r3, r2
 800c088:	d100      	bne.n	800c08c <memmove+0x28>
 800c08a:	bd10      	pop	{r4, pc}
 800c08c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c090:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800c094:	e7f7      	b.n	800c086 <memmove+0x22>

0800c096 <_realloc_r>:
 800c096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c098:	4607      	mov	r7, r0
 800c09a:	4614      	mov	r4, r2
 800c09c:	460e      	mov	r6, r1
 800c09e:	b921      	cbnz	r1, 800c0aa <_realloc_r+0x14>
 800c0a0:	4611      	mov	r1, r2
 800c0a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c0a6:	f7ff bc77 	b.w	800b998 <_malloc_r>
 800c0aa:	b922      	cbnz	r2, 800c0b6 <_realloc_r+0x20>
 800c0ac:	f7ff fc26 	bl	800b8fc <_free_r>
 800c0b0:	4625      	mov	r5, r4
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c0b6:	f000 f814 	bl	800c0e2 <_malloc_usable_size_r>
 800c0ba:	42a0      	cmp	r0, r4
 800c0bc:	d20f      	bcs.n	800c0de <_realloc_r+0x48>
 800c0be:	4621      	mov	r1, r4
 800c0c0:	4638      	mov	r0, r7
 800c0c2:	f7ff fc69 	bl	800b998 <_malloc_r>
 800c0c6:	4605      	mov	r5, r0
 800c0c8:	2800      	cmp	r0, #0
 800c0ca:	d0f2      	beq.n	800c0b2 <_realloc_r+0x1c>
 800c0cc:	4631      	mov	r1, r6
 800c0ce:	4622      	mov	r2, r4
 800c0d0:	f7ff fc00 	bl	800b8d4 <memcpy>
 800c0d4:	4631      	mov	r1, r6
 800c0d6:	4638      	mov	r0, r7
 800c0d8:	f7ff fc10 	bl	800b8fc <_free_r>
 800c0dc:	e7e9      	b.n	800c0b2 <_realloc_r+0x1c>
 800c0de:	4635      	mov	r5, r6
 800c0e0:	e7e7      	b.n	800c0b2 <_realloc_r+0x1c>

0800c0e2 <_malloc_usable_size_r>:
 800c0e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c0e6:	1f18      	subs	r0, r3, #4
 800c0e8:	2b00      	cmp	r3, #0
 800c0ea:	bfbc      	itt	lt
 800c0ec:	580b      	ldrlt	r3, [r1, r0]
 800c0ee:	18c0      	addlt	r0, r0, r3
 800c0f0:	4770      	bx	lr
	...

0800c0f4 <_init>:
 800c0f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0f6:	bf00      	nop
 800c0f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c0fa:	bc08      	pop	{r3}
 800c0fc:	469e      	mov	lr, r3
 800c0fe:	4770      	bx	lr

0800c100 <_fini>:
 800c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c102:	bf00      	nop
 800c104:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c106:	bc08      	pop	{r3}
 800c108:	469e      	mov	lr, r3
 800c10a:	4770      	bx	lr
